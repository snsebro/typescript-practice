"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogsResponseMetadata = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* The metadata associated with a request
*/
var LogsResponseMetadata = /** @class */ (function () {
    function LogsResponseMetadata() {
    }
    LogsResponseMetadata.getAttributeTypeMap = function () {
        return LogsResponseMetadata.attributeTypeMap;
    };
    LogsResponseMetadata.deserialize = function (data) {
        var res = new LogsResponseMetadata();
        res.elapsed = ObjectSerializer_1.ObjectSerializer.deserialize(data.elapsed, "number", "int64");
        res.page = ObjectSerializer_1.ObjectSerializer.deserialize(data.page, "LogsResponseMetadataPage", "");
        res.requestId = ObjectSerializer_1.ObjectSerializer.deserialize(data.request_id, "string", "");
        if (['done', 'timeout', undefined].includes(data.status)) {
            res.status = data.status;
        }
        else {
            throw TypeError("invalid enum value " + data.status + " for status");
        }
        res.warnings = ObjectSerializer_1.ObjectSerializer.deserialize(data.warnings, "Array<LogsWarning>", "");
        return res;
    };
    LogsResponseMetadata.serialize = function (data) {
        var attributeTypes = LogsResponseMetadata.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.elapsed = ObjectSerializer_1.ObjectSerializer.serialize(data.elapsed, "number", "int64");
        res.page = ObjectSerializer_1.ObjectSerializer.serialize(data.page, "LogsResponseMetadataPage", "");
        res.request_id = ObjectSerializer_1.ObjectSerializer.serialize(data.requestId, "string", "");
        if (['done', 'timeout', undefined].includes(data.status)) {
            res.status = data.status;
        }
        else {
            throw TypeError("invalid enum value " + data.status + " for status");
        }
        res.warnings = ObjectSerializer_1.ObjectSerializer.serialize(data.warnings, "Array<LogsWarning>", "");
        return res;
    };
    LogsResponseMetadata.discriminator = undefined;
    LogsResponseMetadata.attributeTypeMap = {
        "elapsed": {
            "baseName": "elapsed",
            "type": "number",
            "format": "int64"
        },
        "page": {
            "baseName": "page",
            "type": "LogsResponseMetadataPage",
            "format": ""
        },
        "requestId": {
            "baseName": "request_id",
            "type": "string",
            "format": ""
        },
        "status": {
            "baseName": "status",
            "type": "LogsAggregateResponseStatus",
            "format": ""
        },
        "warnings": {
            "baseName": "warnings",
            "type": "Array<LogsWarning>",
            "format": ""
        }
    };
    return LogsResponseMetadata;
}());
exports.LogsResponseMetadata = LogsResponseMetadata;
//# sourceMappingURL=LogsResponseMetadata.js.map