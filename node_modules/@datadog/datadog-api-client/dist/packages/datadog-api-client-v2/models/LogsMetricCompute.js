"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogsMetricCompute = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* The compute rule to compute the log-based metric.
*/
var LogsMetricCompute = /** @class */ (function () {
    function LogsMetricCompute() {
    }
    LogsMetricCompute.getAttributeTypeMap = function () {
        return LogsMetricCompute.attributeTypeMap;
    };
    LogsMetricCompute.deserialize = function (data) {
        var res = new LogsMetricCompute();
        if (data.aggregation_type === undefined) {
            throw new TypeError("missing required attribute 'aggregation_type' on 'LogsMetricCompute' object");
        }
        if (['count', 'distribution', undefined].includes(data.aggregation_type)) {
            res.aggregationType = data.aggregation_type;
        }
        else {
            throw TypeError("invalid enum value " + data.aggregation_type + " for aggregation_type");
        }
        res.path = ObjectSerializer_1.ObjectSerializer.deserialize(data.path, "string", "");
        return res;
    };
    LogsMetricCompute.serialize = function (data) {
        var attributeTypes = LogsMetricCompute.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        if (data.aggregationType === undefined) {
            throw new TypeError("missing required attribute 'aggregation_type' on 'LogsMetricCompute' object");
        }
        if (['count', 'distribution', undefined].includes(data.aggregationType)) {
            res.aggregation_type = data.aggregationType;
        }
        else {
            throw TypeError("invalid enum value " + data.aggregationType + " for aggregationType");
        }
        res.path = ObjectSerializer_1.ObjectSerializer.serialize(data.path, "string", "");
        return res;
    };
    LogsMetricCompute.discriminator = undefined;
    LogsMetricCompute.attributeTypeMap = {
        "aggregationType": {
            "baseName": "aggregation_type",
            "type": "LogsMetricComputeAggregationType",
            "format": ""
        },
        "path": {
            "baseName": "path",
            "type": "string",
            "format": ""
        }
    };
    return LogsMetricCompute;
}());
exports.LogsMetricCompute = LogsMetricCompute;
//# sourceMappingURL=LogsMetricCompute.js.map