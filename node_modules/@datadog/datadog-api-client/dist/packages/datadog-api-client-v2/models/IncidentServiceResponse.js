"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IncidentServiceResponse = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Response with an incident service payload.
*/
var IncidentServiceResponse = /** @class */ (function () {
    function IncidentServiceResponse() {
    }
    IncidentServiceResponse.getAttributeTypeMap = function () {
        return IncidentServiceResponse.attributeTypeMap;
    };
    IncidentServiceResponse.deserialize = function (data) {
        var res = new IncidentServiceResponse();
        if (data.data === undefined) {
            throw new TypeError("missing required attribute 'data' on 'IncidentServiceResponse' object");
        }
        res.data = ObjectSerializer_1.ObjectSerializer.deserialize(data.data, "IncidentServiceResponseData", "");
        res.included = ObjectSerializer_1.ObjectSerializer.deserialize(data.included, "Array<IncidentServiceIncludedItems>", "");
        return res;
    };
    IncidentServiceResponse.serialize = function (data) {
        var attributeTypes = IncidentServiceResponse.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        if (data.data === undefined) {
            throw new TypeError("missing required attribute 'data' on 'IncidentServiceResponse' object");
        }
        res.data = ObjectSerializer_1.ObjectSerializer.serialize(data.data, "IncidentServiceResponseData", "");
        res.included = ObjectSerializer_1.ObjectSerializer.serialize(data.included, "Array<IncidentServiceIncludedItems>", "");
        return res;
    };
    IncidentServiceResponse.discriminator = undefined;
    IncidentServiceResponse.attributeTypeMap = {
        "data": {
            "baseName": "data",
            "type": "IncidentServiceResponseData",
            "format": ""
        },
        "included": {
            "baseName": "included",
            "type": "Array<IncidentServiceIncludedItems>",
            "format": ""
        }
    };
    return IncidentServiceResponse;
}());
exports.IncidentServiceResponse = IncidentServiceResponse;
//# sourceMappingURL=IncidentServiceResponse.js.map