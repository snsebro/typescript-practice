"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecurityMonitoringSignalListRequest = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* The request for a security signal list.
*/
var SecurityMonitoringSignalListRequest = /** @class */ (function () {
    function SecurityMonitoringSignalListRequest() {
    }
    SecurityMonitoringSignalListRequest.getAttributeTypeMap = function () {
        return SecurityMonitoringSignalListRequest.attributeTypeMap;
    };
    SecurityMonitoringSignalListRequest.deserialize = function (data) {
        var res = new SecurityMonitoringSignalListRequest();
        res.filter = ObjectSerializer_1.ObjectSerializer.deserialize(data.filter, "SecurityMonitoringSignalListRequestFilter", "");
        res.page = ObjectSerializer_1.ObjectSerializer.deserialize(data.page, "SecurityMonitoringSignalListRequestPage", "");
        if (['timestamp', '-timestamp', undefined].includes(data.sort)) {
            res.sort = data.sort;
        }
        else {
            throw TypeError("invalid enum value " + data.sort + " for sort");
        }
        return res;
    };
    SecurityMonitoringSignalListRequest.serialize = function (data) {
        var attributeTypes = SecurityMonitoringSignalListRequest.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.filter = ObjectSerializer_1.ObjectSerializer.serialize(data.filter, "SecurityMonitoringSignalListRequestFilter", "");
        res.page = ObjectSerializer_1.ObjectSerializer.serialize(data.page, "SecurityMonitoringSignalListRequestPage", "");
        if (['timestamp', '-timestamp', undefined].includes(data.sort)) {
            res.sort = data.sort;
        }
        else {
            throw TypeError("invalid enum value " + data.sort + " for sort");
        }
        return res;
    };
    SecurityMonitoringSignalListRequest.discriminator = undefined;
    SecurityMonitoringSignalListRequest.attributeTypeMap = {
        "filter": {
            "baseName": "filter",
            "type": "SecurityMonitoringSignalListRequestFilter",
            "format": ""
        },
        "page": {
            "baseName": "page",
            "type": "SecurityMonitoringSignalListRequestPage",
            "format": ""
        },
        "sort": {
            "baseName": "sort",
            "type": "SecurityMonitoringSignalsSort",
            "format": ""
        }
    };
    return SecurityMonitoringSignalListRequest;
}());
exports.SecurityMonitoringSignalListRequest = SecurityMonitoringSignalListRequest;
//# sourceMappingURL=SecurityMonitoringSignalListRequest.js.map