"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserResponseRelationships = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Relationships of the user object returned by the API.
*/
var UserResponseRelationships = /** @class */ (function () {
    function UserResponseRelationships() {
    }
    UserResponseRelationships.getAttributeTypeMap = function () {
        return UserResponseRelationships.attributeTypeMap;
    };
    UserResponseRelationships.deserialize = function (data) {
        var res = new UserResponseRelationships();
        res.org = ObjectSerializer_1.ObjectSerializer.deserialize(data.org, "RelationshipToOrganization", "");
        res.otherOrgs = ObjectSerializer_1.ObjectSerializer.deserialize(data.other_orgs, "RelationshipToOrganizations", "");
        res.otherUsers = ObjectSerializer_1.ObjectSerializer.deserialize(data.other_users, "RelationshipToUsers", "");
        res.roles = ObjectSerializer_1.ObjectSerializer.deserialize(data.roles, "RelationshipToRoles", "");
        return res;
    };
    UserResponseRelationships.serialize = function (data) {
        var attributeTypes = UserResponseRelationships.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.org = ObjectSerializer_1.ObjectSerializer.serialize(data.org, "RelationshipToOrganization", "");
        res.other_orgs = ObjectSerializer_1.ObjectSerializer.serialize(data.otherOrgs, "RelationshipToOrganizations", "");
        res.other_users = ObjectSerializer_1.ObjectSerializer.serialize(data.otherUsers, "RelationshipToUsers", "");
        res.roles = ObjectSerializer_1.ObjectSerializer.serialize(data.roles, "RelationshipToRoles", "");
        return res;
    };
    UserResponseRelationships.discriminator = undefined;
    UserResponseRelationships.attributeTypeMap = {
        "org": {
            "baseName": "org",
            "type": "RelationshipToOrganization",
            "format": ""
        },
        "otherOrgs": {
            "baseName": "other_orgs",
            "type": "RelationshipToOrganizations",
            "format": ""
        },
        "otherUsers": {
            "baseName": "other_users",
            "type": "RelationshipToUsers",
            "format": ""
        },
        "roles": {
            "baseName": "roles",
            "type": "RelationshipToRoles",
            "format": ""
        }
    };
    return UserResponseRelationships;
}());
exports.UserResponseRelationships = UserResponseRelationships;
//# sourceMappingURL=UserResponseRelationships.js.map