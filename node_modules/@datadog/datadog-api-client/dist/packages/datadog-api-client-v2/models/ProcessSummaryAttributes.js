"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProcessSummaryAttributes = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Attributes for a process summary.
*/
var ProcessSummaryAttributes = /** @class */ (function () {
    function ProcessSummaryAttributes() {
    }
    ProcessSummaryAttributes.getAttributeTypeMap = function () {
        return ProcessSummaryAttributes.attributeTypeMap;
    };
    ProcessSummaryAttributes.deserialize = function (data) {
        var res = new ProcessSummaryAttributes();
        res.cmdline = ObjectSerializer_1.ObjectSerializer.deserialize(data.cmdline, "string", "");
        res.host = ObjectSerializer_1.ObjectSerializer.deserialize(data.host, "string", "");
        res.pid = ObjectSerializer_1.ObjectSerializer.deserialize(data.pid, "number", "int64");
        res.ppid = ObjectSerializer_1.ObjectSerializer.deserialize(data.ppid, "number", "int64");
        res.start = ObjectSerializer_1.ObjectSerializer.deserialize(data.start, "string", "");
        res.tags = ObjectSerializer_1.ObjectSerializer.deserialize(data.tags, "Array<string>", "");
        res.timestamp = ObjectSerializer_1.ObjectSerializer.deserialize(data.timestamp, "string", "");
        res.user = ObjectSerializer_1.ObjectSerializer.deserialize(data.user, "string", "");
        return res;
    };
    ProcessSummaryAttributes.serialize = function (data) {
        var attributeTypes = ProcessSummaryAttributes.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.cmdline = ObjectSerializer_1.ObjectSerializer.serialize(data.cmdline, "string", "");
        res.host = ObjectSerializer_1.ObjectSerializer.serialize(data.host, "string", "");
        res.pid = ObjectSerializer_1.ObjectSerializer.serialize(data.pid, "number", "int64");
        res.ppid = ObjectSerializer_1.ObjectSerializer.serialize(data.ppid, "number", "int64");
        res.start = ObjectSerializer_1.ObjectSerializer.serialize(data.start, "string", "");
        res.tags = ObjectSerializer_1.ObjectSerializer.serialize(data.tags, "Array<string>", "");
        res.timestamp = ObjectSerializer_1.ObjectSerializer.serialize(data.timestamp, "string", "");
        res.user = ObjectSerializer_1.ObjectSerializer.serialize(data.user, "string", "");
        return res;
    };
    ProcessSummaryAttributes.discriminator = undefined;
    ProcessSummaryAttributes.attributeTypeMap = {
        "cmdline": {
            "baseName": "cmdline",
            "type": "string",
            "format": ""
        },
        "host": {
            "baseName": "host",
            "type": "string",
            "format": ""
        },
        "pid": {
            "baseName": "pid",
            "type": "number",
            "format": "int64"
        },
        "ppid": {
            "baseName": "ppid",
            "type": "number",
            "format": "int64"
        },
        "start": {
            "baseName": "start",
            "type": "string",
            "format": ""
        },
        "tags": {
            "baseName": "tags",
            "type": "Array<string>",
            "format": ""
        },
        "timestamp": {
            "baseName": "timestamp",
            "type": "string",
            "format": ""
        },
        "user": {
            "baseName": "user",
            "type": "string",
            "format": ""
        }
    };
    return ProcessSummaryAttributes;
}());
exports.ProcessSummaryAttributes = ProcessSummaryAttributes;
//# sourceMappingURL=ProcessSummaryAttributes.js.map