"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogsArchiveDestinationS3 = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* The S3 archive destination.
*/
var LogsArchiveDestinationS3 = /** @class */ (function () {
    function LogsArchiveDestinationS3() {
    }
    LogsArchiveDestinationS3.getAttributeTypeMap = function () {
        return LogsArchiveDestinationS3.attributeTypeMap;
    };
    LogsArchiveDestinationS3.deserialize = function (data) {
        var res = new LogsArchiveDestinationS3();
        if (data.bucket === undefined) {
            throw new TypeError("missing required attribute 'bucket' on 'LogsArchiveDestinationS3' object");
        }
        res.bucket = ObjectSerializer_1.ObjectSerializer.deserialize(data.bucket, "string", "");
        if (data.integration === undefined) {
            throw new TypeError("missing required attribute 'integration' on 'LogsArchiveDestinationS3' object");
        }
        res.integration = ObjectSerializer_1.ObjectSerializer.deserialize(data.integration, "LogsArchiveIntegrationS3", "");
        res.path = ObjectSerializer_1.ObjectSerializer.deserialize(data.path, "string", "");
        if (data.type === undefined) {
            throw new TypeError("missing required attribute 'type' on 'LogsArchiveDestinationS3' object");
        }
        if (['s3', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        return res;
    };
    LogsArchiveDestinationS3.serialize = function (data) {
        var attributeTypes = LogsArchiveDestinationS3.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        if (data.bucket === undefined) {
            throw new TypeError("missing required attribute 'bucket' on 'LogsArchiveDestinationS3' object");
        }
        res.bucket = ObjectSerializer_1.ObjectSerializer.serialize(data.bucket, "string", "");
        if (data.integration === undefined) {
            throw new TypeError("missing required attribute 'integration' on 'LogsArchiveDestinationS3' object");
        }
        res.integration = ObjectSerializer_1.ObjectSerializer.serialize(data.integration, "LogsArchiveIntegrationS3", "");
        res.path = ObjectSerializer_1.ObjectSerializer.serialize(data.path, "string", "");
        if (data.type === undefined) {
            throw new TypeError("missing required attribute 'type' on 'LogsArchiveDestinationS3' object");
        }
        if (['s3', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        return res;
    };
    LogsArchiveDestinationS3.discriminator = undefined;
    LogsArchiveDestinationS3.attributeTypeMap = {
        "bucket": {
            "baseName": "bucket",
            "type": "string",
            "format": ""
        },
        "integration": {
            "baseName": "integration",
            "type": "LogsArchiveIntegrationS3",
            "format": ""
        },
        "path": {
            "baseName": "path",
            "type": "string",
            "format": ""
        },
        "type": {
            "baseName": "type",
            "type": "LogsArchiveDestinationS3Type",
            "format": ""
        }
    };
    return LogsArchiveDestinationS3;
}());
exports.LogsArchiveDestinationS3 = LogsArchiveDestinationS3;
//# sourceMappingURL=LogsArchiveDestinationS3.js.map