"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecurityMonitoringRuleOptions = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Options on rules.
*/
var SecurityMonitoringRuleOptions = /** @class */ (function () {
    function SecurityMonitoringRuleOptions() {
    }
    SecurityMonitoringRuleOptions.getAttributeTypeMap = function () {
        return SecurityMonitoringRuleOptions.attributeTypeMap;
    };
    SecurityMonitoringRuleOptions.deserialize = function (data) {
        var res = new SecurityMonitoringRuleOptions();
        if (['threshold', 'new_value', 'anomaly_detection', undefined].includes(data.detectionMethod)) {
            res.detectionMethod = data.detectionMethod;
        }
        else {
            throw TypeError("invalid enum value " + data.detectionMethod + " for detectionMethod");
        }
        if ([0, 60, 300, 600, 900, 1800, 3600, 7200, undefined].includes(data.evaluationWindow)) {
            res.evaluationWindow = data.evaluationWindow;
        }
        else {
            throw TypeError("invalid enum value " + data.evaluationWindow + " for evaluationWindow");
        }
        if ([0, 60, 300, 600, 900, 1800, 3600, 7200, 10800, 21600, undefined].includes(data.keepAlive)) {
            res.keepAlive = data.keepAlive;
        }
        else {
            throw TypeError("invalid enum value " + data.keepAlive + " for keepAlive");
        }
        if ([0, 60, 300, 600, 900, 1800, 3600, 7200, 10800, 21600, 43200, 86400, undefined].includes(data.maxSignalDuration)) {
            res.maxSignalDuration = data.maxSignalDuration;
        }
        else {
            throw TypeError("invalid enum value " + data.maxSignalDuration + " for maxSignalDuration");
        }
        res.newValueOptions = ObjectSerializer_1.ObjectSerializer.deserialize(data.newValueOptions, "SecurityMonitoringRuleNewValueOptions", "");
        return res;
    };
    SecurityMonitoringRuleOptions.serialize = function (data) {
        var attributeTypes = SecurityMonitoringRuleOptions.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        if (['threshold', 'new_value', 'anomaly_detection', undefined].includes(data.detectionMethod)) {
            res.detectionMethod = data.detectionMethod;
        }
        else {
            throw TypeError("invalid enum value " + data.detectionMethod + " for detectionMethod");
        }
        if ([0, 60, 300, 600, 900, 1800, 3600, 7200, undefined].includes(data.evaluationWindow)) {
            res.evaluationWindow = data.evaluationWindow;
        }
        else {
            throw TypeError("invalid enum value " + data.evaluationWindow + " for evaluationWindow");
        }
        if ([0, 60, 300, 600, 900, 1800, 3600, 7200, 10800, 21600, undefined].includes(data.keepAlive)) {
            res.keepAlive = data.keepAlive;
        }
        else {
            throw TypeError("invalid enum value " + data.keepAlive + " for keepAlive");
        }
        if ([0, 60, 300, 600, 900, 1800, 3600, 7200, 10800, 21600, 43200, 86400, undefined].includes(data.maxSignalDuration)) {
            res.maxSignalDuration = data.maxSignalDuration;
        }
        else {
            throw TypeError("invalid enum value " + data.maxSignalDuration + " for maxSignalDuration");
        }
        res.newValueOptions = ObjectSerializer_1.ObjectSerializer.serialize(data.newValueOptions, "SecurityMonitoringRuleNewValueOptions", "");
        return res;
    };
    SecurityMonitoringRuleOptions.discriminator = undefined;
    SecurityMonitoringRuleOptions.attributeTypeMap = {
        "detectionMethod": {
            "baseName": "detectionMethod",
            "type": "SecurityMonitoringRuleDetectionMethod",
            "format": ""
        },
        "evaluationWindow": {
            "baseName": "evaluationWindow",
            "type": "SecurityMonitoringRuleEvaluationWindow",
            "format": ""
        },
        "keepAlive": {
            "baseName": "keepAlive",
            "type": "SecurityMonitoringRuleKeepAlive",
            "format": ""
        },
        "maxSignalDuration": {
            "baseName": "maxSignalDuration",
            "type": "SecurityMonitoringRuleMaxSignalDuration",
            "format": ""
        },
        "newValueOptions": {
            "baseName": "newValueOptions",
            "type": "SecurityMonitoringRuleNewValueOptions",
            "format": ""
        }
    };
    return SecurityMonitoringRuleOptions;
}());
exports.SecurityMonitoringRuleOptions = SecurityMonitoringRuleOptions;
//# sourceMappingURL=SecurityMonitoringRuleOptions.js.map