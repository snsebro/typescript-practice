"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IncidentResponseAttributes = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* The incident's attributes from a response.
*/
var IncidentResponseAttributes = /** @class */ (function () {
    function IncidentResponseAttributes() {
    }
    IncidentResponseAttributes.getAttributeTypeMap = function () {
        return IncidentResponseAttributes.attributeTypeMap;
    };
    IncidentResponseAttributes.deserialize = function (data) {
        var res = new IncidentResponseAttributes();
        res.created = ObjectSerializer_1.ObjectSerializer.deserialize(data.created, "Date", "date-time");
        res.customerImpactDuration = ObjectSerializer_1.ObjectSerializer.deserialize(data.customer_impact_duration, "number", "int64");
        res.customerImpactEnd = ObjectSerializer_1.ObjectSerializer.deserialize(data.customer_impact_end, "Date", "date-time");
        res.customerImpactScope = ObjectSerializer_1.ObjectSerializer.deserialize(data.customer_impact_scope, "string", "");
        res.customerImpactStart = ObjectSerializer_1.ObjectSerializer.deserialize(data.customer_impact_start, "Date", "date-time");
        res.customerImpacted = ObjectSerializer_1.ObjectSerializer.deserialize(data.customer_impacted, "boolean", "");
        res.detected = ObjectSerializer_1.ObjectSerializer.deserialize(data.detected, "Date", "date-time");
        res.fields = ObjectSerializer_1.ObjectSerializer.deserialize(data.fields, "{ [key: string]: IncidentFieldAttributes; }", "");
        res.modified = ObjectSerializer_1.ObjectSerializer.deserialize(data.modified, "Date", "date-time");
        res.notificationHandles = ObjectSerializer_1.ObjectSerializer.deserialize(data.notification_handles, "Array<string>", "");
        res.postmortemId = ObjectSerializer_1.ObjectSerializer.deserialize(data.postmortem_id, "string", "");
        res.publicId = ObjectSerializer_1.ObjectSerializer.deserialize(data.public_id, "number", "int64");
        res.resolved = ObjectSerializer_1.ObjectSerializer.deserialize(data.resolved, "Date", "date-time");
        res.timeToDetect = ObjectSerializer_1.ObjectSerializer.deserialize(data.time_to_detect, "number", "int64");
        res.timeToInternalResponse = ObjectSerializer_1.ObjectSerializer.deserialize(data.time_to_internal_response, "number", "int64");
        res.timeToRepair = ObjectSerializer_1.ObjectSerializer.deserialize(data.time_to_repair, "number", "int64");
        res.timeToResolve = ObjectSerializer_1.ObjectSerializer.deserialize(data.time_to_resolve, "number", "int64");
        if (data.title === undefined) {
            throw new TypeError("missing required attribute 'title' on 'IncidentResponseAttributes' object");
        }
        res.title = ObjectSerializer_1.ObjectSerializer.deserialize(data.title, "string", "");
        return res;
    };
    IncidentResponseAttributes.serialize = function (data) {
        var attributeTypes = IncidentResponseAttributes.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.created = ObjectSerializer_1.ObjectSerializer.serialize(data.created, "Date", "date-time");
        res.customer_impact_duration = ObjectSerializer_1.ObjectSerializer.serialize(data.customerImpactDuration, "number", "int64");
        res.customer_impact_end = ObjectSerializer_1.ObjectSerializer.serialize(data.customerImpactEnd, "Date", "date-time");
        res.customer_impact_scope = ObjectSerializer_1.ObjectSerializer.serialize(data.customerImpactScope, "string", "");
        res.customer_impact_start = ObjectSerializer_1.ObjectSerializer.serialize(data.customerImpactStart, "Date", "date-time");
        res.customer_impacted = ObjectSerializer_1.ObjectSerializer.serialize(data.customerImpacted, "boolean", "");
        res.detected = ObjectSerializer_1.ObjectSerializer.serialize(data.detected, "Date", "date-time");
        res.fields = ObjectSerializer_1.ObjectSerializer.serialize(data.fields, "{ [key: string]: IncidentFieldAttributes; }", "");
        res.modified = ObjectSerializer_1.ObjectSerializer.serialize(data.modified, "Date", "date-time");
        res.notification_handles = ObjectSerializer_1.ObjectSerializer.serialize(data.notificationHandles, "Array<string>", "");
        res.postmortem_id = ObjectSerializer_1.ObjectSerializer.serialize(data.postmortemId, "string", "");
        res.public_id = ObjectSerializer_1.ObjectSerializer.serialize(data.publicId, "number", "int64");
        res.resolved = ObjectSerializer_1.ObjectSerializer.serialize(data.resolved, "Date", "date-time");
        res.time_to_detect = ObjectSerializer_1.ObjectSerializer.serialize(data.timeToDetect, "number", "int64");
        res.time_to_internal_response = ObjectSerializer_1.ObjectSerializer.serialize(data.timeToInternalResponse, "number", "int64");
        res.time_to_repair = ObjectSerializer_1.ObjectSerializer.serialize(data.timeToRepair, "number", "int64");
        res.time_to_resolve = ObjectSerializer_1.ObjectSerializer.serialize(data.timeToResolve, "number", "int64");
        if (data.title === undefined) {
            throw new TypeError("missing required attribute 'title' on 'IncidentResponseAttributes' object");
        }
        res.title = ObjectSerializer_1.ObjectSerializer.serialize(data.title, "string", "");
        return res;
    };
    IncidentResponseAttributes.discriminator = undefined;
    IncidentResponseAttributes.attributeTypeMap = {
        "created": {
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        "customerImpactDuration": {
            "baseName": "customer_impact_duration",
            "type": "number",
            "format": "int64"
        },
        "customerImpactEnd": {
            "baseName": "customer_impact_end",
            "type": "Date",
            "format": "date-time"
        },
        "customerImpactScope": {
            "baseName": "customer_impact_scope",
            "type": "string",
            "format": ""
        },
        "customerImpactStart": {
            "baseName": "customer_impact_start",
            "type": "Date",
            "format": "date-time"
        },
        "customerImpacted": {
            "baseName": "customer_impacted",
            "type": "boolean",
            "format": ""
        },
        "detected": {
            "baseName": "detected",
            "type": "Date",
            "format": "date-time"
        },
        "fields": {
            "baseName": "fields",
            "type": "{ [key: string]: IncidentFieldAttributes; }",
            "format": ""
        },
        "modified": {
            "baseName": "modified",
            "type": "Date",
            "format": "date-time"
        },
        "notificationHandles": {
            "baseName": "notification_handles",
            "type": "Array<string>",
            "format": ""
        },
        "postmortemId": {
            "baseName": "postmortem_id",
            "type": "string",
            "format": ""
        },
        "publicId": {
            "baseName": "public_id",
            "type": "number",
            "format": "int64"
        },
        "resolved": {
            "baseName": "resolved",
            "type": "Date",
            "format": "date-time"
        },
        "timeToDetect": {
            "baseName": "time_to_detect",
            "type": "number",
            "format": "int64"
        },
        "timeToInternalResponse": {
            "baseName": "time_to_internal_response",
            "type": "number",
            "format": "int64"
        },
        "timeToRepair": {
            "baseName": "time_to_repair",
            "type": "number",
            "format": "int64"
        },
        "timeToResolve": {
            "baseName": "time_to_resolve",
            "type": "number",
            "format": "int64"
        },
        "title": {
            "baseName": "title",
            "type": "string",
            "format": ""
        }
    };
    return IncidentResponseAttributes;
}());
exports.IncidentResponseAttributes = IncidentResponseAttributes;
//# sourceMappingURL=IncidentResponseAttributes.js.map