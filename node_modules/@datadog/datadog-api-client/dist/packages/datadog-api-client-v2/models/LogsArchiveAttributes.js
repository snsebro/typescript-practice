"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogsArchiveAttributes = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* The attributes associated with the archive.
*/
var LogsArchiveAttributes = /** @class */ (function () {
    function LogsArchiveAttributes() {
    }
    LogsArchiveAttributes.getAttributeTypeMap = function () {
        return LogsArchiveAttributes.attributeTypeMap;
    };
    LogsArchiveAttributes.deserialize = function (data) {
        var res = new LogsArchiveAttributes();
        if (data.destination === undefined) {
            throw new TypeError("missing required attribute 'destination' on 'LogsArchiveAttributes' object");
        }
        res.destination = ObjectSerializer_1.ObjectSerializer.deserialize(data.destination, "LogsArchiveDestination", "");
        res.includeTags = ObjectSerializer_1.ObjectSerializer.deserialize(data.include_tags, "boolean", "");
        if (data.name === undefined) {
            throw new TypeError("missing required attribute 'name' on 'LogsArchiveAttributes' object");
        }
        res.name = ObjectSerializer_1.ObjectSerializer.deserialize(data.name, "string", "");
        if (data.query === undefined) {
            throw new TypeError("missing required attribute 'query' on 'LogsArchiveAttributes' object");
        }
        res.query = ObjectSerializer_1.ObjectSerializer.deserialize(data.query, "string", "");
        res.rehydrationTags = ObjectSerializer_1.ObjectSerializer.deserialize(data.rehydration_tags, "Array<string>", "");
        if (['UNKNOWN', 'WORKING', 'FAILING', 'WORKING_AUTH_LEGACY', undefined].includes(data.state)) {
            res.state = data.state;
        }
        else {
            throw TypeError("invalid enum value " + data.state + " for state");
        }
        return res;
    };
    LogsArchiveAttributes.serialize = function (data) {
        var attributeTypes = LogsArchiveAttributes.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        if (data.destination === undefined) {
            throw new TypeError("missing required attribute 'destination' on 'LogsArchiveAttributes' object");
        }
        res.destination = ObjectSerializer_1.ObjectSerializer.serialize(data.destination, "LogsArchiveDestination", "");
        res.include_tags = ObjectSerializer_1.ObjectSerializer.serialize(data.includeTags, "boolean", "");
        if (data.name === undefined) {
            throw new TypeError("missing required attribute 'name' on 'LogsArchiveAttributes' object");
        }
        res.name = ObjectSerializer_1.ObjectSerializer.serialize(data.name, "string", "");
        if (data.query === undefined) {
            throw new TypeError("missing required attribute 'query' on 'LogsArchiveAttributes' object");
        }
        res.query = ObjectSerializer_1.ObjectSerializer.serialize(data.query, "string", "");
        res.rehydration_tags = ObjectSerializer_1.ObjectSerializer.serialize(data.rehydrationTags, "Array<string>", "");
        if (['UNKNOWN', 'WORKING', 'FAILING', 'WORKING_AUTH_LEGACY', undefined].includes(data.state)) {
            res.state = data.state;
        }
        else {
            throw TypeError("invalid enum value " + data.state + " for state");
        }
        return res;
    };
    LogsArchiveAttributes.discriminator = undefined;
    LogsArchiveAttributes.attributeTypeMap = {
        "destination": {
            "baseName": "destination",
            "type": "LogsArchiveDestination",
            "format": ""
        },
        "includeTags": {
            "baseName": "include_tags",
            "type": "boolean",
            "format": ""
        },
        "name": {
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        "query": {
            "baseName": "query",
            "type": "string",
            "format": ""
        },
        "rehydrationTags": {
            "baseName": "rehydration_tags",
            "type": "Array<string>",
            "format": ""
        },
        "state": {
            "baseName": "state",
            "type": "LogsArchiveState",
            "format": ""
        }
    };
    return LogsArchiveAttributes;
}());
exports.LogsArchiveAttributes = LogsArchiveAttributes;
//# sourceMappingURL=LogsArchiveAttributes.js.map