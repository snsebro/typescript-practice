"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogsAggregateSort = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* A sort rule
*/
var LogsAggregateSort = /** @class */ (function () {
    function LogsAggregateSort() {
    }
    LogsAggregateSort.getAttributeTypeMap = function () {
        return LogsAggregateSort.attributeTypeMap;
    };
    LogsAggregateSort.deserialize = function (data) {
        var res = new LogsAggregateSort();
        if (['count', 'cardinality', 'pc75', 'pc90', 'pc95', 'pc98', 'pc99', 'sum', 'min', 'max', 'avg', undefined].includes(data.aggregation)) {
            res.aggregation = data.aggregation;
        }
        else {
            throw TypeError("invalid enum value " + data.aggregation + " for aggregation");
        }
        res.metric = ObjectSerializer_1.ObjectSerializer.deserialize(data.metric, "string", "");
        if (['asc', 'desc', undefined].includes(data.order)) {
            res.order = data.order;
        }
        else {
            throw TypeError("invalid enum value " + data.order + " for order");
        }
        if (['alphabetical', 'measure', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        return res;
    };
    LogsAggregateSort.serialize = function (data) {
        var attributeTypes = LogsAggregateSort.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        if (['count', 'cardinality', 'pc75', 'pc90', 'pc95', 'pc98', 'pc99', 'sum', 'min', 'max', 'avg', undefined].includes(data.aggregation)) {
            res.aggregation = data.aggregation;
        }
        else {
            throw TypeError("invalid enum value " + data.aggregation + " for aggregation");
        }
        res.metric = ObjectSerializer_1.ObjectSerializer.serialize(data.metric, "string", "");
        if (['asc', 'desc', undefined].includes(data.order)) {
            res.order = data.order;
        }
        else {
            throw TypeError("invalid enum value " + data.order + " for order");
        }
        if (['alphabetical', 'measure', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        return res;
    };
    LogsAggregateSort.discriminator = undefined;
    LogsAggregateSort.attributeTypeMap = {
        "aggregation": {
            "baseName": "aggregation",
            "type": "LogsAggregationFunction",
            "format": ""
        },
        "metric": {
            "baseName": "metric",
            "type": "string",
            "format": ""
        },
        "order": {
            "baseName": "order",
            "type": "LogsSortOrder",
            "format": ""
        },
        "type": {
            "baseName": "type",
            "type": "LogsAggregateSortType",
            "format": ""
        }
    };
    return LogsAggregateSort;
}());
exports.LogsAggregateSort = LogsAggregateSort;
//# sourceMappingURL=LogsAggregateSort.js.map