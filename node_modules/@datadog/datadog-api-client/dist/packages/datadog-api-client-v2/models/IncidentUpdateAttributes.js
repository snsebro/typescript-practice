"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IncidentUpdateAttributes = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* The incident's attributes for an update request.
*/
var IncidentUpdateAttributes = /** @class */ (function () {
    function IncidentUpdateAttributes() {
    }
    IncidentUpdateAttributes.getAttributeTypeMap = function () {
        return IncidentUpdateAttributes.attributeTypeMap;
    };
    IncidentUpdateAttributes.deserialize = function (data) {
        var res = new IncidentUpdateAttributes();
        res.customerImpactEnd = ObjectSerializer_1.ObjectSerializer.deserialize(data.customer_impact_end, "Date", "date-time");
        res.customerImpactScope = ObjectSerializer_1.ObjectSerializer.deserialize(data.customer_impact_scope, "string", "");
        res.customerImpactStart = ObjectSerializer_1.ObjectSerializer.deserialize(data.customer_impact_start, "Date", "date-time");
        res.customerImpacted = ObjectSerializer_1.ObjectSerializer.deserialize(data.customer_impacted, "boolean", "");
        res.detected = ObjectSerializer_1.ObjectSerializer.deserialize(data.detected, "Date", "date-time");
        res.fields = ObjectSerializer_1.ObjectSerializer.deserialize(data.fields, "{ [key: string]: IncidentFieldAttributes; }", "");
        res.notificationHandles = ObjectSerializer_1.ObjectSerializer.deserialize(data.notification_handles, "Array<string>", "");
        res.resolved = ObjectSerializer_1.ObjectSerializer.deserialize(data.resolved, "Date", "date-time");
        res.title = ObjectSerializer_1.ObjectSerializer.deserialize(data.title, "string", "");
        return res;
    };
    IncidentUpdateAttributes.serialize = function (data) {
        var attributeTypes = IncidentUpdateAttributes.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.customer_impact_end = ObjectSerializer_1.ObjectSerializer.serialize(data.customerImpactEnd, "Date", "date-time");
        res.customer_impact_scope = ObjectSerializer_1.ObjectSerializer.serialize(data.customerImpactScope, "string", "");
        res.customer_impact_start = ObjectSerializer_1.ObjectSerializer.serialize(data.customerImpactStart, "Date", "date-time");
        res.customer_impacted = ObjectSerializer_1.ObjectSerializer.serialize(data.customerImpacted, "boolean", "");
        res.detected = ObjectSerializer_1.ObjectSerializer.serialize(data.detected, "Date", "date-time");
        res.fields = ObjectSerializer_1.ObjectSerializer.serialize(data.fields, "{ [key: string]: IncidentFieldAttributes; }", "");
        res.notification_handles = ObjectSerializer_1.ObjectSerializer.serialize(data.notificationHandles, "Array<string>", "");
        res.resolved = ObjectSerializer_1.ObjectSerializer.serialize(data.resolved, "Date", "date-time");
        res.title = ObjectSerializer_1.ObjectSerializer.serialize(data.title, "string", "");
        return res;
    };
    IncidentUpdateAttributes.discriminator = undefined;
    IncidentUpdateAttributes.attributeTypeMap = {
        "customerImpactEnd": {
            "baseName": "customer_impact_end",
            "type": "Date",
            "format": "date-time"
        },
        "customerImpactScope": {
            "baseName": "customer_impact_scope",
            "type": "string",
            "format": ""
        },
        "customerImpactStart": {
            "baseName": "customer_impact_start",
            "type": "Date",
            "format": "date-time"
        },
        "customerImpacted": {
            "baseName": "customer_impacted",
            "type": "boolean",
            "format": ""
        },
        "detected": {
            "baseName": "detected",
            "type": "Date",
            "format": "date-time"
        },
        "fields": {
            "baseName": "fields",
            "type": "{ [key: string]: IncidentFieldAttributes; }",
            "format": ""
        },
        "notificationHandles": {
            "baseName": "notification_handles",
            "type": "Array<string>",
            "format": ""
        },
        "resolved": {
            "baseName": "resolved",
            "type": "Date",
            "format": "date-time"
        },
        "title": {
            "baseName": "title",
            "type": "string",
            "format": ""
        }
    };
    return IncidentUpdateAttributes;
}());
exports.IncidentUpdateAttributes = IncidentUpdateAttributes;
//# sourceMappingURL=IncidentUpdateAttributes.js.map