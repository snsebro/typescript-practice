"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DashboardListItem = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* A dashboard within a list.
*/
var DashboardListItem = /** @class */ (function () {
    function DashboardListItem() {
    }
    DashboardListItem.getAttributeTypeMap = function () {
        return DashboardListItem.attributeTypeMap;
    };
    DashboardListItem.deserialize = function (data) {
        var res = new DashboardListItem();
        res.author = ObjectSerializer_1.ObjectSerializer.deserialize(data.author, "Creator", "");
        res.created = ObjectSerializer_1.ObjectSerializer.deserialize(data.created, "Date", "date-time");
        res.icon = ObjectSerializer_1.ObjectSerializer.deserialize(data.icon, "string", "");
        if (data.id === undefined) {
            throw new TypeError("missing required attribute 'id' on 'DashboardListItem' object");
        }
        res.id = ObjectSerializer_1.ObjectSerializer.deserialize(data.id, "string", "");
        res.isFavorite = ObjectSerializer_1.ObjectSerializer.deserialize(data.is_favorite, "boolean", "");
        res.isReadOnly = ObjectSerializer_1.ObjectSerializer.deserialize(data.is_read_only, "boolean", "");
        res.isShared = ObjectSerializer_1.ObjectSerializer.deserialize(data.is_shared, "boolean", "");
        res.modified = ObjectSerializer_1.ObjectSerializer.deserialize(data.modified, "Date", "date-time");
        res.popularity = ObjectSerializer_1.ObjectSerializer.deserialize(data.popularity, "number", "int32");
        res.title = ObjectSerializer_1.ObjectSerializer.deserialize(data.title, "string", "");
        if (data.type === undefined) {
            throw new TypeError("missing required attribute 'type' on 'DashboardListItem' object");
        }
        if (['custom_timeboard', 'custom_screenboard', 'integration_screenboard', 'integration_timeboard', 'host_timeboard', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        res.url = ObjectSerializer_1.ObjectSerializer.deserialize(data.url, "string", "");
        return res;
    };
    DashboardListItem.serialize = function (data) {
        var attributeTypes = DashboardListItem.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.author = ObjectSerializer_1.ObjectSerializer.serialize(data.author, "Creator", "");
        res.created = ObjectSerializer_1.ObjectSerializer.serialize(data.created, "Date", "date-time");
        res.icon = ObjectSerializer_1.ObjectSerializer.serialize(data.icon, "string", "");
        if (data.id === undefined) {
            throw new TypeError("missing required attribute 'id' on 'DashboardListItem' object");
        }
        res.id = ObjectSerializer_1.ObjectSerializer.serialize(data.id, "string", "");
        res.is_favorite = ObjectSerializer_1.ObjectSerializer.serialize(data.isFavorite, "boolean", "");
        res.is_read_only = ObjectSerializer_1.ObjectSerializer.serialize(data.isReadOnly, "boolean", "");
        res.is_shared = ObjectSerializer_1.ObjectSerializer.serialize(data.isShared, "boolean", "");
        res.modified = ObjectSerializer_1.ObjectSerializer.serialize(data.modified, "Date", "date-time");
        res.popularity = ObjectSerializer_1.ObjectSerializer.serialize(data.popularity, "number", "int32");
        res.title = ObjectSerializer_1.ObjectSerializer.serialize(data.title, "string", "");
        if (data.type === undefined) {
            throw new TypeError("missing required attribute 'type' on 'DashboardListItem' object");
        }
        if (['custom_timeboard', 'custom_screenboard', 'integration_screenboard', 'integration_timeboard', 'host_timeboard', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        res.url = ObjectSerializer_1.ObjectSerializer.serialize(data.url, "string", "");
        return res;
    };
    DashboardListItem.discriminator = undefined;
    DashboardListItem.attributeTypeMap = {
        "author": {
            "baseName": "author",
            "type": "Creator",
            "format": ""
        },
        "created": {
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        "icon": {
            "baseName": "icon",
            "type": "string",
            "format": ""
        },
        "id": {
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        "isFavorite": {
            "baseName": "is_favorite",
            "type": "boolean",
            "format": ""
        },
        "isReadOnly": {
            "baseName": "is_read_only",
            "type": "boolean",
            "format": ""
        },
        "isShared": {
            "baseName": "is_shared",
            "type": "boolean",
            "format": ""
        },
        "modified": {
            "baseName": "modified",
            "type": "Date",
            "format": "date-time"
        },
        "popularity": {
            "baseName": "popularity",
            "type": "number",
            "format": "int32"
        },
        "title": {
            "baseName": "title",
            "type": "string",
            "format": ""
        },
        "type": {
            "baseName": "type",
            "type": "DashboardType",
            "format": ""
        },
        "url": {
            "baseName": "url",
            "type": "string",
            "format": ""
        }
    };
    return DashboardListItem;
}());
exports.DashboardListItem = DashboardListItem;
//# sourceMappingURL=DashboardListItem.js.map