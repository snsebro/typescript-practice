"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IncidentTimelineCellMarkdownCreateAttributes = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Timeline cell data for Markdown timeline cells for a create request.
*/
var IncidentTimelineCellMarkdownCreateAttributes = /** @class */ (function () {
    function IncidentTimelineCellMarkdownCreateAttributes() {
    }
    IncidentTimelineCellMarkdownCreateAttributes.getAttributeTypeMap = function () {
        return IncidentTimelineCellMarkdownCreateAttributes.attributeTypeMap;
    };
    IncidentTimelineCellMarkdownCreateAttributes.deserialize = function (data) {
        var res = new IncidentTimelineCellMarkdownCreateAttributes();
        if (data.cell_type === undefined) {
            throw new TypeError("missing required attribute 'cell_type' on 'IncidentTimelineCellMarkdownCreateAttributes' object");
        }
        if (['markdown', undefined].includes(data.cell_type)) {
            res.cellType = data.cell_type;
        }
        else {
            throw TypeError("invalid enum value " + data.cell_type + " for cell_type");
        }
        if (data.content === undefined) {
            throw new TypeError("missing required attribute 'content' on 'IncidentTimelineCellMarkdownCreateAttributes' object");
        }
        res.content = ObjectSerializer_1.ObjectSerializer.deserialize(data.content, "IncidentTimelineCellMarkdownCreateAttributesContent", "");
        res.important = ObjectSerializer_1.ObjectSerializer.deserialize(data.important, "boolean", "");
        return res;
    };
    IncidentTimelineCellMarkdownCreateAttributes.serialize = function (data) {
        var attributeTypes = IncidentTimelineCellMarkdownCreateAttributes.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        if (data.cellType === undefined) {
            throw new TypeError("missing required attribute 'cell_type' on 'IncidentTimelineCellMarkdownCreateAttributes' object");
        }
        if (['markdown', undefined].includes(data.cellType)) {
            res.cell_type = data.cellType;
        }
        else {
            throw TypeError("invalid enum value " + data.cellType + " for cellType");
        }
        if (data.content === undefined) {
            throw new TypeError("missing required attribute 'content' on 'IncidentTimelineCellMarkdownCreateAttributes' object");
        }
        res.content = ObjectSerializer_1.ObjectSerializer.serialize(data.content, "IncidentTimelineCellMarkdownCreateAttributesContent", "");
        res.important = ObjectSerializer_1.ObjectSerializer.serialize(data.important, "boolean", "");
        return res;
    };
    IncidentTimelineCellMarkdownCreateAttributes.discriminator = undefined;
    IncidentTimelineCellMarkdownCreateAttributes.attributeTypeMap = {
        "cellType": {
            "baseName": "cell_type",
            "type": "IncidentTimelineCellMarkdownContentType",
            "format": ""
        },
        "content": {
            "baseName": "content",
            "type": "IncidentTimelineCellMarkdownCreateAttributesContent",
            "format": ""
        },
        "important": {
            "baseName": "important",
            "type": "boolean",
            "format": ""
        }
    };
    return IncidentTimelineCellMarkdownCreateAttributes;
}());
exports.IncidentTimelineCellMarkdownCreateAttributes = IncidentTimelineCellMarkdownCreateAttributes;
//# sourceMappingURL=IncidentTimelineCellMarkdownCreateAttributes.js.map