"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecurityMonitoringRuleCreatePayload = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Create a new rule.
*/
var SecurityMonitoringRuleCreatePayload = /** @class */ (function () {
    function SecurityMonitoringRuleCreatePayload() {
    }
    SecurityMonitoringRuleCreatePayload.getAttributeTypeMap = function () {
        return SecurityMonitoringRuleCreatePayload.attributeTypeMap;
    };
    SecurityMonitoringRuleCreatePayload.deserialize = function (data) {
        var res = new SecurityMonitoringRuleCreatePayload();
        if (data.cases === undefined) {
            throw new TypeError("missing required attribute 'cases' on 'SecurityMonitoringRuleCreatePayload' object");
        }
        res.cases = ObjectSerializer_1.ObjectSerializer.deserialize(data.cases, "Array<SecurityMonitoringRuleCaseCreate>", "");
        res.filters = ObjectSerializer_1.ObjectSerializer.deserialize(data.filters, "Array<SecurityMonitoringFilter>", "");
        if (data.isEnabled === undefined) {
            throw new TypeError("missing required attribute 'isEnabled' on 'SecurityMonitoringRuleCreatePayload' object");
        }
        res.isEnabled = ObjectSerializer_1.ObjectSerializer.deserialize(data.isEnabled, "boolean", "");
        if (data.message === undefined) {
            throw new TypeError("missing required attribute 'message' on 'SecurityMonitoringRuleCreatePayload' object");
        }
        res.message = ObjectSerializer_1.ObjectSerializer.deserialize(data.message, "string", "");
        if (data.name === undefined) {
            throw new TypeError("missing required attribute 'name' on 'SecurityMonitoringRuleCreatePayload' object");
        }
        res.name = ObjectSerializer_1.ObjectSerializer.deserialize(data.name, "string", "");
        if (data.options === undefined) {
            throw new TypeError("missing required attribute 'options' on 'SecurityMonitoringRuleCreatePayload' object");
        }
        res.options = ObjectSerializer_1.ObjectSerializer.deserialize(data.options, "SecurityMonitoringRuleOptions", "");
        if (data.queries === undefined) {
            throw new TypeError("missing required attribute 'queries' on 'SecurityMonitoringRuleCreatePayload' object");
        }
        res.queries = ObjectSerializer_1.ObjectSerializer.deserialize(data.queries, "Array<SecurityMonitoringRuleQueryCreate>", "");
        res.tags = ObjectSerializer_1.ObjectSerializer.deserialize(data.tags, "Array<string>", "");
        return res;
    };
    SecurityMonitoringRuleCreatePayload.serialize = function (data) {
        var attributeTypes = SecurityMonitoringRuleCreatePayload.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        if (data.cases === undefined) {
            throw new TypeError("missing required attribute 'cases' on 'SecurityMonitoringRuleCreatePayload' object");
        }
        res.cases = ObjectSerializer_1.ObjectSerializer.serialize(data.cases, "Array<SecurityMonitoringRuleCaseCreate>", "");
        res.filters = ObjectSerializer_1.ObjectSerializer.serialize(data.filters, "Array<SecurityMonitoringFilter>", "");
        if (data.isEnabled === undefined) {
            throw new TypeError("missing required attribute 'isEnabled' on 'SecurityMonitoringRuleCreatePayload' object");
        }
        res.isEnabled = ObjectSerializer_1.ObjectSerializer.serialize(data.isEnabled, "boolean", "");
        if (data.message === undefined) {
            throw new TypeError("missing required attribute 'message' on 'SecurityMonitoringRuleCreatePayload' object");
        }
        res.message = ObjectSerializer_1.ObjectSerializer.serialize(data.message, "string", "");
        if (data.name === undefined) {
            throw new TypeError("missing required attribute 'name' on 'SecurityMonitoringRuleCreatePayload' object");
        }
        res.name = ObjectSerializer_1.ObjectSerializer.serialize(data.name, "string", "");
        if (data.options === undefined) {
            throw new TypeError("missing required attribute 'options' on 'SecurityMonitoringRuleCreatePayload' object");
        }
        res.options = ObjectSerializer_1.ObjectSerializer.serialize(data.options, "SecurityMonitoringRuleOptions", "");
        if (data.queries === undefined) {
            throw new TypeError("missing required attribute 'queries' on 'SecurityMonitoringRuleCreatePayload' object");
        }
        res.queries = ObjectSerializer_1.ObjectSerializer.serialize(data.queries, "Array<SecurityMonitoringRuleQueryCreate>", "");
        res.tags = ObjectSerializer_1.ObjectSerializer.serialize(data.tags, "Array<string>", "");
        return res;
    };
    SecurityMonitoringRuleCreatePayload.discriminator = undefined;
    SecurityMonitoringRuleCreatePayload.attributeTypeMap = {
        "cases": {
            "baseName": "cases",
            "type": "Array<SecurityMonitoringRuleCaseCreate>",
            "format": ""
        },
        "filters": {
            "baseName": "filters",
            "type": "Array<SecurityMonitoringFilter>",
            "format": ""
        },
        "isEnabled": {
            "baseName": "isEnabled",
            "type": "boolean",
            "format": ""
        },
        "message": {
            "baseName": "message",
            "type": "string",
            "format": ""
        },
        "name": {
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        "options": {
            "baseName": "options",
            "type": "SecurityMonitoringRuleOptions",
            "format": ""
        },
        "queries": {
            "baseName": "queries",
            "type": "Array<SecurityMonitoringRuleQueryCreate>",
            "format": ""
        },
        "tags": {
            "baseName": "tags",
            "type": "Array<string>",
            "format": ""
        }
    };
    return SecurityMonitoringRuleCreatePayload;
}());
exports.SecurityMonitoringRuleCreatePayload = SecurityMonitoringRuleCreatePayload;
//# sourceMappingURL=SecurityMonitoringRuleCreatePayload.js.map