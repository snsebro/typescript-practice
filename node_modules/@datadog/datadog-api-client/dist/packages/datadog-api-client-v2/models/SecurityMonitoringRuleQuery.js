"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecurityMonitoringRuleQuery = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Query for matching rule.
*/
var SecurityMonitoringRuleQuery = /** @class */ (function () {
    function SecurityMonitoringRuleQuery() {
    }
    SecurityMonitoringRuleQuery.getAttributeTypeMap = function () {
        return SecurityMonitoringRuleQuery.attributeTypeMap;
    };
    SecurityMonitoringRuleQuery.deserialize = function (data) {
        var res = new SecurityMonitoringRuleQuery();
        res.agentRule = ObjectSerializer_1.ObjectSerializer.deserialize(data.agentRule, "SecurityMonitoringRuntimeAgentRule", "");
        if (['count', 'cardinality', 'sum', 'max', 'new_value', undefined].includes(data.aggregation)) {
            res.aggregation = data.aggregation;
        }
        else {
            throw TypeError("invalid enum value " + data.aggregation + " for aggregation");
        }
        res.distinctFields = ObjectSerializer_1.ObjectSerializer.deserialize(data.distinctFields, "Array<string>", "");
        res.groupByFields = ObjectSerializer_1.ObjectSerializer.deserialize(data.groupByFields, "Array<string>", "");
        res.metric = ObjectSerializer_1.ObjectSerializer.deserialize(data.metric, "string", "");
        res.name = ObjectSerializer_1.ObjectSerializer.deserialize(data.name, "string", "");
        res.query = ObjectSerializer_1.ObjectSerializer.deserialize(data.query, "string", "");
        return res;
    };
    SecurityMonitoringRuleQuery.serialize = function (data) {
        var attributeTypes = SecurityMonitoringRuleQuery.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.agentRule = ObjectSerializer_1.ObjectSerializer.serialize(data.agentRule, "SecurityMonitoringRuntimeAgentRule", "");
        if (['count', 'cardinality', 'sum', 'max', 'new_value', undefined].includes(data.aggregation)) {
            res.aggregation = data.aggregation;
        }
        else {
            throw TypeError("invalid enum value " + data.aggregation + " for aggregation");
        }
        res.distinctFields = ObjectSerializer_1.ObjectSerializer.serialize(data.distinctFields, "Array<string>", "");
        res.groupByFields = ObjectSerializer_1.ObjectSerializer.serialize(data.groupByFields, "Array<string>", "");
        res.metric = ObjectSerializer_1.ObjectSerializer.serialize(data.metric, "string", "");
        res.name = ObjectSerializer_1.ObjectSerializer.serialize(data.name, "string", "");
        res.query = ObjectSerializer_1.ObjectSerializer.serialize(data.query, "string", "");
        return res;
    };
    SecurityMonitoringRuleQuery.discriminator = undefined;
    SecurityMonitoringRuleQuery.attributeTypeMap = {
        "agentRule": {
            "baseName": "agentRule",
            "type": "SecurityMonitoringRuntimeAgentRule",
            "format": ""
        },
        "aggregation": {
            "baseName": "aggregation",
            "type": "SecurityMonitoringRuleQueryAggregation",
            "format": ""
        },
        "distinctFields": {
            "baseName": "distinctFields",
            "type": "Array<string>",
            "format": ""
        },
        "groupByFields": {
            "baseName": "groupByFields",
            "type": "Array<string>",
            "format": ""
        },
        "metric": {
            "baseName": "metric",
            "type": "string",
            "format": ""
        },
        "name": {
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        "query": {
            "baseName": "query",
            "type": "string",
            "format": ""
        }
    };
    return SecurityMonitoringRuleQuery;
}());
exports.SecurityMonitoringRuleQuery = SecurityMonitoringRuleQuery;
//# sourceMappingURL=SecurityMonitoringRuleQuery.js.map