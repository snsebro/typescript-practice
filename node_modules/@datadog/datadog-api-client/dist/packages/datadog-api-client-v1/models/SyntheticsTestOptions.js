"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyntheticsTestOptions = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Object describing the extra options for a Synthetic test.
*/
var SyntheticsTestOptions = /** @class */ (function () {
    function SyntheticsTestOptions() {
    }
    SyntheticsTestOptions.getAttributeTypeMap = function () {
        return SyntheticsTestOptions.attributeTypeMap;
    };
    SyntheticsTestOptions.deserialize = function (data) {
        var res = new SyntheticsTestOptions();
        res.acceptSelfSigned = ObjectSerializer_1.ObjectSerializer.deserialize(data.accept_self_signed, "boolean", "");
        res.allowInsecure = ObjectSerializer_1.ObjectSerializer.deserialize(data.allow_insecure, "boolean", "");
        res.deviceIds = ObjectSerializer_1.ObjectSerializer.deserialize(data.device_ids, "Array<SyntheticsDeviceID>", "");
        res.disableCors = ObjectSerializer_1.ObjectSerializer.deserialize(data.disableCors, "boolean", "");
        res.followRedirects = ObjectSerializer_1.ObjectSerializer.deserialize(data.follow_redirects, "boolean", "");
        res.minFailureDuration = ObjectSerializer_1.ObjectSerializer.deserialize(data.min_failure_duration, "number", "int64");
        res.minLocationFailed = ObjectSerializer_1.ObjectSerializer.deserialize(data.min_location_failed, "number", "int64");
        res.monitorName = ObjectSerializer_1.ObjectSerializer.deserialize(data.monitor_name, "string", "");
        res.monitorOptions = ObjectSerializer_1.ObjectSerializer.deserialize(data.monitor_options, "SyntheticsTestOptionsMonitorOptions", "");
        res.monitorPriority = ObjectSerializer_1.ObjectSerializer.deserialize(data.monitor_priority, "number", "int32");
        res.noScreenshot = ObjectSerializer_1.ObjectSerializer.deserialize(data.noScreenshot, "boolean", "");
        res.retry = ObjectSerializer_1.ObjectSerializer.deserialize(data.retry, "SyntheticsTestOptionsRetry", "");
        if ([30, 60, 300, 900, 1800, 3600, 21600, 43200, 86400, 604800, undefined].includes(data.tick_every)) {
            res.tickEvery = data.tick_every;
        }
        else {
            throw TypeError("invalid enum value " + data.tick_every + " for tick_every");
        }
        return res;
    };
    SyntheticsTestOptions.serialize = function (data) {
        var attributeTypes = SyntheticsTestOptions.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.accept_self_signed = ObjectSerializer_1.ObjectSerializer.serialize(data.acceptSelfSigned, "boolean", "");
        res.allow_insecure = ObjectSerializer_1.ObjectSerializer.serialize(data.allowInsecure, "boolean", "");
        res.device_ids = ObjectSerializer_1.ObjectSerializer.serialize(data.deviceIds, "Array<SyntheticsDeviceID>", "");
        res.disableCors = ObjectSerializer_1.ObjectSerializer.serialize(data.disableCors, "boolean", "");
        res.follow_redirects = ObjectSerializer_1.ObjectSerializer.serialize(data.followRedirects, "boolean", "");
        res.min_failure_duration = ObjectSerializer_1.ObjectSerializer.serialize(data.minFailureDuration, "number", "int64");
        res.min_location_failed = ObjectSerializer_1.ObjectSerializer.serialize(data.minLocationFailed, "number", "int64");
        res.monitor_name = ObjectSerializer_1.ObjectSerializer.serialize(data.monitorName, "string", "");
        res.monitor_options = ObjectSerializer_1.ObjectSerializer.serialize(data.monitorOptions, "SyntheticsTestOptionsMonitorOptions", "");
        res.monitor_priority = ObjectSerializer_1.ObjectSerializer.serialize(data.monitorPriority, "number", "int32");
        res.noScreenshot = ObjectSerializer_1.ObjectSerializer.serialize(data.noScreenshot, "boolean", "");
        res.retry = ObjectSerializer_1.ObjectSerializer.serialize(data.retry, "SyntheticsTestOptionsRetry", "");
        if ([30, 60, 300, 900, 1800, 3600, 21600, 43200, 86400, 604800, undefined].includes(data.tickEvery)) {
            res.tick_every = data.tickEvery;
        }
        else {
            throw TypeError("invalid enum value " + data.tickEvery + " for tickEvery");
        }
        return res;
    };
    SyntheticsTestOptions.discriminator = undefined;
    SyntheticsTestOptions.attributeTypeMap = {
        "acceptSelfSigned": {
            "baseName": "accept_self_signed",
            "type": "boolean",
            "format": ""
        },
        "allowInsecure": {
            "baseName": "allow_insecure",
            "type": "boolean",
            "format": ""
        },
        "deviceIds": {
            "baseName": "device_ids",
            "type": "Array<SyntheticsDeviceID>",
            "format": ""
        },
        "disableCors": {
            "baseName": "disableCors",
            "type": "boolean",
            "format": ""
        },
        "followRedirects": {
            "baseName": "follow_redirects",
            "type": "boolean",
            "format": ""
        },
        "minFailureDuration": {
            "baseName": "min_failure_duration",
            "type": "number",
            "format": "int64"
        },
        "minLocationFailed": {
            "baseName": "min_location_failed",
            "type": "number",
            "format": "int64"
        },
        "monitorName": {
            "baseName": "monitor_name",
            "type": "string",
            "format": ""
        },
        "monitorOptions": {
            "baseName": "monitor_options",
            "type": "SyntheticsTestOptionsMonitorOptions",
            "format": ""
        },
        "monitorPriority": {
            "baseName": "monitor_priority",
            "type": "number",
            "format": "int32"
        },
        "noScreenshot": {
            "baseName": "noScreenshot",
            "type": "boolean",
            "format": ""
        },
        "retry": {
            "baseName": "retry",
            "type": "SyntheticsTestOptionsRetry",
            "format": ""
        },
        "tickEvery": {
            "baseName": "tick_every",
            "type": "SyntheticsTickInterval",
            "format": ""
        }
    };
    return SyntheticsTestOptions;
}());
exports.SyntheticsTestOptions = SyntheticsTestOptions;
//# sourceMappingURL=SyntheticsTestOptions.js.map