/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HostMeta } from './HostMeta';
import { HostMetrics } from './HostMetrics';
/**
* Object representing a host.
*/
export declare class Host {
    /**
    * Host aliases collected by Datadog.
    */
    'aliases'?: Array<string>;
    /**
    * The Datadog integrations reporting metrics for the host.
    */
    'apps'?: Array<string>;
    /**
    * AWS name of your host.
    */
    'awsName'?: string;
    /**
    * The host name.
    */
    'hostName'?: string;
    /**
    * The host ID.
    */
    'id'?: number;
    /**
    * If a host is muted or unmuted.
    */
    'isMuted'?: boolean;
    /**
    * Last time the host reported a metric data point.
    */
    'lastReportedTime'?: number;
    'meta'?: HostMeta;
    'metrics'?: HostMetrics;
    /**
    * Timeout of the mute applied to your host.
    */
    'muteTimeout'?: number;
    /**
    * The host name.
    */
    'name'?: string;
    /**
    * Source or cloud provider associated with your host.
    */
    'sources'?: Array<string>;
    /**
    * List of tags for each source (AWS, Datadog Agent, Chef..).
    */
    'tagsBySource'?: {
        [key: string]: Array<string>;
    };
    /**
    * Displays UP when the expected metrics are received and displays `???` if no metrics are received.
    */
    'up'?: boolean;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: {
        [key: string]: {
            baseName: string;
            type: string;
            format: string;
        };
    };
    static getAttributeTypeMap(): {
        [key: string]: {
            baseName: string;
            type: string;
            format: string;
        };
    };
    static deserialize(data: {
        [key: string]: any;
    }): Host;
    static serialize(data: Host): {
        [key: string]: any;
    };
    constructor();
}
