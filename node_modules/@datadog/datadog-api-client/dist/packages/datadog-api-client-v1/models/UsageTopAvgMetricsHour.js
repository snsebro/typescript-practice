"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsageTopAvgMetricsHour = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Number of hourly recorded custom metrics for a given organization.
*/
var UsageTopAvgMetricsHour = /** @class */ (function () {
    function UsageTopAvgMetricsHour() {
    }
    UsageTopAvgMetricsHour.getAttributeTypeMap = function () {
        return UsageTopAvgMetricsHour.attributeTypeMap;
    };
    UsageTopAvgMetricsHour.deserialize = function (data) {
        var res = new UsageTopAvgMetricsHour();
        res.avgMetricHour = ObjectSerializer_1.ObjectSerializer.deserialize(data.avg_metric_hour, "number", "int64");
        res.maxMetricHour = ObjectSerializer_1.ObjectSerializer.deserialize(data.max_metric_hour, "number", "int64");
        if (['standard', 'custom', undefined].includes(data.metric_category)) {
            res.metricCategory = data.metric_category;
        }
        else {
            throw TypeError("invalid enum value " + data.metric_category + " for metric_category");
        }
        res.metricName = ObjectSerializer_1.ObjectSerializer.deserialize(data.metric_name, "string", "");
        return res;
    };
    UsageTopAvgMetricsHour.serialize = function (data) {
        var attributeTypes = UsageTopAvgMetricsHour.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.avg_metric_hour = ObjectSerializer_1.ObjectSerializer.serialize(data.avgMetricHour, "number", "int64");
        res.max_metric_hour = ObjectSerializer_1.ObjectSerializer.serialize(data.maxMetricHour, "number", "int64");
        if (['standard', 'custom', undefined].includes(data.metricCategory)) {
            res.metric_category = data.metricCategory;
        }
        else {
            throw TypeError("invalid enum value " + data.metricCategory + " for metricCategory");
        }
        res.metric_name = ObjectSerializer_1.ObjectSerializer.serialize(data.metricName, "string", "");
        return res;
    };
    UsageTopAvgMetricsHour.discriminator = undefined;
    UsageTopAvgMetricsHour.attributeTypeMap = {
        "avgMetricHour": {
            "baseName": "avg_metric_hour",
            "type": "number",
            "format": "int64"
        },
        "maxMetricHour": {
            "baseName": "max_metric_hour",
            "type": "number",
            "format": "int64"
        },
        "metricCategory": {
            "baseName": "metric_category",
            "type": "UsageMetricCategory",
            "format": ""
        },
        "metricName": {
            "baseName": "metric_name",
            "type": "string",
            "format": ""
        }
    };
    return UsageTopAvgMetricsHour;
}());
exports.UsageTopAvgMetricsHour = UsageTopAvgMetricsHour;
//# sourceMappingURL=UsageTopAvgMetricsHour.js.map