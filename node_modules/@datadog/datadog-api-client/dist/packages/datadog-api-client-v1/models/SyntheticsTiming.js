"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyntheticsTiming = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Object containing all metrics and their values collected for a Synthetic API test. Learn more about those metrics in [Synthetics documentation](https://docs.datadoghq.com/synthetics/#metrics).
*/
var SyntheticsTiming = /** @class */ (function () {
    function SyntheticsTiming() {
    }
    SyntheticsTiming.getAttributeTypeMap = function () {
        return SyntheticsTiming.attributeTypeMap;
    };
    SyntheticsTiming.deserialize = function (data) {
        var res = new SyntheticsTiming();
        res.dns = ObjectSerializer_1.ObjectSerializer.deserialize(data.dns, "number", "double");
        res.download = ObjectSerializer_1.ObjectSerializer.deserialize(data.download, "number", "double");
        res.firstByte = ObjectSerializer_1.ObjectSerializer.deserialize(data.firstByte, "number", "double");
        res.handshake = ObjectSerializer_1.ObjectSerializer.deserialize(data.handshake, "number", "double");
        res.redirect = ObjectSerializer_1.ObjectSerializer.deserialize(data.redirect, "number", "double");
        res.ssl = ObjectSerializer_1.ObjectSerializer.deserialize(data.ssl, "number", "double");
        res.tcp = ObjectSerializer_1.ObjectSerializer.deserialize(data.tcp, "number", "double");
        res.total = ObjectSerializer_1.ObjectSerializer.deserialize(data.total, "number", "double");
        res.wait = ObjectSerializer_1.ObjectSerializer.deserialize(data.wait, "number", "double");
        return res;
    };
    SyntheticsTiming.serialize = function (data) {
        var attributeTypes = SyntheticsTiming.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.dns = ObjectSerializer_1.ObjectSerializer.serialize(data.dns, "number", "double");
        res.download = ObjectSerializer_1.ObjectSerializer.serialize(data.download, "number", "double");
        res.firstByte = ObjectSerializer_1.ObjectSerializer.serialize(data.firstByte, "number", "double");
        res.handshake = ObjectSerializer_1.ObjectSerializer.serialize(data.handshake, "number", "double");
        res.redirect = ObjectSerializer_1.ObjectSerializer.serialize(data.redirect, "number", "double");
        res.ssl = ObjectSerializer_1.ObjectSerializer.serialize(data.ssl, "number", "double");
        res.tcp = ObjectSerializer_1.ObjectSerializer.serialize(data.tcp, "number", "double");
        res.total = ObjectSerializer_1.ObjectSerializer.serialize(data.total, "number", "double");
        res.wait = ObjectSerializer_1.ObjectSerializer.serialize(data.wait, "number", "double");
        return res;
    };
    SyntheticsTiming.discriminator = undefined;
    SyntheticsTiming.attributeTypeMap = {
        "dns": {
            "baseName": "dns",
            "type": "number",
            "format": "double"
        },
        "download": {
            "baseName": "download",
            "type": "number",
            "format": "double"
        },
        "firstByte": {
            "baseName": "firstByte",
            "type": "number",
            "format": "double"
        },
        "handshake": {
            "baseName": "handshake",
            "type": "number",
            "format": "double"
        },
        "redirect": {
            "baseName": "redirect",
            "type": "number",
            "format": "double"
        },
        "ssl": {
            "baseName": "ssl",
            "type": "number",
            "format": "double"
        },
        "tcp": {
            "baseName": "tcp",
            "type": "number",
            "format": "double"
        },
        "total": {
            "baseName": "total",
            "type": "number",
            "format": "double"
        },
        "wait": {
            "baseName": "wait",
            "type": "number",
            "format": "double"
        }
    };
    return SyntheticsTiming;
}());
exports.SyntheticsTiming = SyntheticsTiming;
//# sourceMappingURL=SyntheticsTiming.js.map