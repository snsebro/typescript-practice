"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyntheticsGlobalVariable = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Synthetics global variable.
*/
var SyntheticsGlobalVariable = /** @class */ (function () {
    function SyntheticsGlobalVariable() {
    }
    SyntheticsGlobalVariable.getAttributeTypeMap = function () {
        return SyntheticsGlobalVariable.attributeTypeMap;
    };
    SyntheticsGlobalVariable.deserialize = function (data) {
        var res = new SyntheticsGlobalVariable();
        if (data.description === undefined) {
            throw new TypeError("missing required attribute 'description' on 'SyntheticsGlobalVariable' object");
        }
        res.description = ObjectSerializer_1.ObjectSerializer.deserialize(data.description, "string", "");
        res.id = ObjectSerializer_1.ObjectSerializer.deserialize(data.id, "string", "");
        if (data.name === undefined) {
            throw new TypeError("missing required attribute 'name' on 'SyntheticsGlobalVariable' object");
        }
        res.name = ObjectSerializer_1.ObjectSerializer.deserialize(data.name, "string", "");
        res.parseTestOptions = ObjectSerializer_1.ObjectSerializer.deserialize(data.parse_test_options, "SyntheticsGlobalVariableParseTestOptions", "");
        res.parseTestPublicId = ObjectSerializer_1.ObjectSerializer.deserialize(data.parse_test_public_id, "string", "");
        if (data.tags === undefined) {
            throw new TypeError("missing required attribute 'tags' on 'SyntheticsGlobalVariable' object");
        }
        res.tags = ObjectSerializer_1.ObjectSerializer.deserialize(data.tags, "Array<string>", "");
        if (data.value === undefined) {
            throw new TypeError("missing required attribute 'value' on 'SyntheticsGlobalVariable' object");
        }
        res.value = ObjectSerializer_1.ObjectSerializer.deserialize(data.value, "SyntheticsGlobalVariableValue", "");
        return res;
    };
    SyntheticsGlobalVariable.serialize = function (data) {
        var attributeTypes = SyntheticsGlobalVariable.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        if (data.description === undefined) {
            throw new TypeError("missing required attribute 'description' on 'SyntheticsGlobalVariable' object");
        }
        res.description = ObjectSerializer_1.ObjectSerializer.serialize(data.description, "string", "");
        res.id = ObjectSerializer_1.ObjectSerializer.serialize(data.id, "string", "");
        if (data.name === undefined) {
            throw new TypeError("missing required attribute 'name' on 'SyntheticsGlobalVariable' object");
        }
        res.name = ObjectSerializer_1.ObjectSerializer.serialize(data.name, "string", "");
        res.parse_test_options = ObjectSerializer_1.ObjectSerializer.serialize(data.parseTestOptions, "SyntheticsGlobalVariableParseTestOptions", "");
        res.parse_test_public_id = ObjectSerializer_1.ObjectSerializer.serialize(data.parseTestPublicId, "string", "");
        if (data.tags === undefined) {
            throw new TypeError("missing required attribute 'tags' on 'SyntheticsGlobalVariable' object");
        }
        res.tags = ObjectSerializer_1.ObjectSerializer.serialize(data.tags, "Array<string>", "");
        if (data.value === undefined) {
            throw new TypeError("missing required attribute 'value' on 'SyntheticsGlobalVariable' object");
        }
        res.value = ObjectSerializer_1.ObjectSerializer.serialize(data.value, "SyntheticsGlobalVariableValue", "");
        return res;
    };
    SyntheticsGlobalVariable.discriminator = undefined;
    SyntheticsGlobalVariable.attributeTypeMap = {
        "description": {
            "baseName": "description",
            "type": "string",
            "format": ""
        },
        "id": {
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        "name": {
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        "parseTestOptions": {
            "baseName": "parse_test_options",
            "type": "SyntheticsGlobalVariableParseTestOptions",
            "format": ""
        },
        "parseTestPublicId": {
            "baseName": "parse_test_public_id",
            "type": "string",
            "format": ""
        },
        "tags": {
            "baseName": "tags",
            "type": "Array<string>",
            "format": ""
        },
        "value": {
            "baseName": "value",
            "type": "SyntheticsGlobalVariableValue",
            "format": ""
        }
    };
    return SyntheticsGlobalVariable;
}());
exports.SyntheticsGlobalVariable = SyntheticsGlobalVariable;
//# sourceMappingURL=SyntheticsGlobalVariable.js.map