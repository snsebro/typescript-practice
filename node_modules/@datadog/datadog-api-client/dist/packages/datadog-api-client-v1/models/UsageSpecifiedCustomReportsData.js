"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsageSpecifiedCustomReportsData = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Response containing date and type for specified custom reports.
*/
var UsageSpecifiedCustomReportsData = /** @class */ (function () {
    function UsageSpecifiedCustomReportsData() {
    }
    UsageSpecifiedCustomReportsData.getAttributeTypeMap = function () {
        return UsageSpecifiedCustomReportsData.attributeTypeMap;
    };
    UsageSpecifiedCustomReportsData.deserialize = function (data) {
        var res = new UsageSpecifiedCustomReportsData();
        res.attributes = ObjectSerializer_1.ObjectSerializer.deserialize(data.attributes, "UsageSpecifiedCustomReportsAttributes", "");
        res.id = ObjectSerializer_1.ObjectSerializer.deserialize(data.id, "string", "");
        if (['reports', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        return res;
    };
    UsageSpecifiedCustomReportsData.serialize = function (data) {
        var attributeTypes = UsageSpecifiedCustomReportsData.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.attributes = ObjectSerializer_1.ObjectSerializer.serialize(data.attributes, "UsageSpecifiedCustomReportsAttributes", "");
        res.id = ObjectSerializer_1.ObjectSerializer.serialize(data.id, "string", "");
        if (['reports', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        return res;
    };
    UsageSpecifiedCustomReportsData.discriminator = undefined;
    UsageSpecifiedCustomReportsData.attributeTypeMap = {
        "attributes": {
            "baseName": "attributes",
            "type": "UsageSpecifiedCustomReportsAttributes",
            "format": ""
        },
        "id": {
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        "type": {
            "baseName": "type",
            "type": "UsageReportsType",
            "format": ""
        }
    };
    return UsageSpecifiedCustomReportsData;
}());
exports.UsageSpecifiedCustomReportsData = UsageSpecifiedCustomReportsData;
//# sourceMappingURL=UsageSpecifiedCustomReportsData.js.map