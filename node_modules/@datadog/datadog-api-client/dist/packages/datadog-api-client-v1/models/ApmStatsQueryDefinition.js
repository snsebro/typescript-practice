"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApmStatsQueryDefinition = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* The APM stats query for table and distributions widgets.
*/
var ApmStatsQueryDefinition = /** @class */ (function () {
    function ApmStatsQueryDefinition() {
    }
    ApmStatsQueryDefinition.getAttributeTypeMap = function () {
        return ApmStatsQueryDefinition.attributeTypeMap;
    };
    ApmStatsQueryDefinition.deserialize = function (data) {
        var res = new ApmStatsQueryDefinition();
        res.columns = ObjectSerializer_1.ObjectSerializer.deserialize(data.columns, "Array<ApmStatsQueryColumnType>", "");
        if (data.env === undefined) {
            throw new TypeError("missing required attribute 'env' on 'ApmStatsQueryDefinition' object");
        }
        res.env = ObjectSerializer_1.ObjectSerializer.deserialize(data.env, "string", "");
        if (data.name === undefined) {
            throw new TypeError("missing required attribute 'name' on 'ApmStatsQueryDefinition' object");
        }
        res.name = ObjectSerializer_1.ObjectSerializer.deserialize(data.name, "string", "");
        if (data.primary_tag === undefined) {
            throw new TypeError("missing required attribute 'primary_tag' on 'ApmStatsQueryDefinition' object");
        }
        res.primaryTag = ObjectSerializer_1.ObjectSerializer.deserialize(data.primary_tag, "string", "");
        res.resource = ObjectSerializer_1.ObjectSerializer.deserialize(data.resource, "string", "");
        if (data.row_type === undefined) {
            throw new TypeError("missing required attribute 'row_type' on 'ApmStatsQueryDefinition' object");
        }
        if (['service', 'resource', 'span', undefined].includes(data.row_type)) {
            res.rowType = data.row_type;
        }
        else {
            throw TypeError("invalid enum value " + data.row_type + " for row_type");
        }
        if (data.service === undefined) {
            throw new TypeError("missing required attribute 'service' on 'ApmStatsQueryDefinition' object");
        }
        res.service = ObjectSerializer_1.ObjectSerializer.deserialize(data.service, "string", "");
        return res;
    };
    ApmStatsQueryDefinition.serialize = function (data) {
        var attributeTypes = ApmStatsQueryDefinition.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.columns = ObjectSerializer_1.ObjectSerializer.serialize(data.columns, "Array<ApmStatsQueryColumnType>", "");
        if (data.env === undefined) {
            throw new TypeError("missing required attribute 'env' on 'ApmStatsQueryDefinition' object");
        }
        res.env = ObjectSerializer_1.ObjectSerializer.serialize(data.env, "string", "");
        if (data.name === undefined) {
            throw new TypeError("missing required attribute 'name' on 'ApmStatsQueryDefinition' object");
        }
        res.name = ObjectSerializer_1.ObjectSerializer.serialize(data.name, "string", "");
        if (data.primaryTag === undefined) {
            throw new TypeError("missing required attribute 'primary_tag' on 'ApmStatsQueryDefinition' object");
        }
        res.primary_tag = ObjectSerializer_1.ObjectSerializer.serialize(data.primaryTag, "string", "");
        res.resource = ObjectSerializer_1.ObjectSerializer.serialize(data.resource, "string", "");
        if (data.rowType === undefined) {
            throw new TypeError("missing required attribute 'row_type' on 'ApmStatsQueryDefinition' object");
        }
        if (['service', 'resource', 'span', undefined].includes(data.rowType)) {
            res.row_type = data.rowType;
        }
        else {
            throw TypeError("invalid enum value " + data.rowType + " for rowType");
        }
        if (data.service === undefined) {
            throw new TypeError("missing required attribute 'service' on 'ApmStatsQueryDefinition' object");
        }
        res.service = ObjectSerializer_1.ObjectSerializer.serialize(data.service, "string", "");
        return res;
    };
    ApmStatsQueryDefinition.discriminator = undefined;
    ApmStatsQueryDefinition.attributeTypeMap = {
        "columns": {
            "baseName": "columns",
            "type": "Array<ApmStatsQueryColumnType>",
            "format": ""
        },
        "env": {
            "baseName": "env",
            "type": "string",
            "format": ""
        },
        "name": {
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        "primaryTag": {
            "baseName": "primary_tag",
            "type": "string",
            "format": ""
        },
        "resource": {
            "baseName": "resource",
            "type": "string",
            "format": ""
        },
        "rowType": {
            "baseName": "row_type",
            "type": "ApmStatsQueryRowType",
            "format": ""
        },
        "service": {
            "baseName": "service",
            "type": "string",
            "format": ""
        }
    };
    return ApmStatsQueryDefinition;
}());
exports.ApmStatsQueryDefinition = ApmStatsQueryDefinition;
//# sourceMappingURL=ApmStatsQueryDefinition.js.map