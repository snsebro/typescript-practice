"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsageBillableSummaryHour = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Response with monthly summary of data billed by Datadog.
*/
var UsageBillableSummaryHour = /** @class */ (function () {
    function UsageBillableSummaryHour() {
    }
    UsageBillableSummaryHour.getAttributeTypeMap = function () {
        return UsageBillableSummaryHour.attributeTypeMap;
    };
    UsageBillableSummaryHour.deserialize = function (data) {
        var res = new UsageBillableSummaryHour();
        res.billingPlan = ObjectSerializer_1.ObjectSerializer.deserialize(data.billing_plan, "string", "");
        res.endDate = ObjectSerializer_1.ObjectSerializer.deserialize(data.end_date, "Date", "date-time");
        res.numOrgs = ObjectSerializer_1.ObjectSerializer.deserialize(data.num_orgs, "number", "int64");
        res.orgName = ObjectSerializer_1.ObjectSerializer.deserialize(data.org_name, "string", "");
        res.publicId = ObjectSerializer_1.ObjectSerializer.deserialize(data.public_id, "string", "");
        res.ratioInMonth = ObjectSerializer_1.ObjectSerializer.deserialize(data.ratio_in_month, "number", "int64");
        res.startDate = ObjectSerializer_1.ObjectSerializer.deserialize(data.start_date, "Date", "date-time");
        res.usage = ObjectSerializer_1.ObjectSerializer.deserialize(data.usage, "UsageBillableSummaryKeys", "");
        return res;
    };
    UsageBillableSummaryHour.serialize = function (data) {
        var attributeTypes = UsageBillableSummaryHour.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.billing_plan = ObjectSerializer_1.ObjectSerializer.serialize(data.billingPlan, "string", "");
        res.end_date = ObjectSerializer_1.ObjectSerializer.serialize(data.endDate, "Date", "date-time");
        res.num_orgs = ObjectSerializer_1.ObjectSerializer.serialize(data.numOrgs, "number", "int64");
        res.org_name = ObjectSerializer_1.ObjectSerializer.serialize(data.orgName, "string", "");
        res.public_id = ObjectSerializer_1.ObjectSerializer.serialize(data.publicId, "string", "");
        res.ratio_in_month = ObjectSerializer_1.ObjectSerializer.serialize(data.ratioInMonth, "number", "int64");
        res.start_date = ObjectSerializer_1.ObjectSerializer.serialize(data.startDate, "Date", "date-time");
        res.usage = ObjectSerializer_1.ObjectSerializer.serialize(data.usage, "UsageBillableSummaryKeys", "");
        return res;
    };
    UsageBillableSummaryHour.discriminator = undefined;
    UsageBillableSummaryHour.attributeTypeMap = {
        "billingPlan": {
            "baseName": "billing_plan",
            "type": "string",
            "format": ""
        },
        "endDate": {
            "baseName": "end_date",
            "type": "Date",
            "format": "date-time"
        },
        "numOrgs": {
            "baseName": "num_orgs",
            "type": "number",
            "format": "int64"
        },
        "orgName": {
            "baseName": "org_name",
            "type": "string",
            "format": ""
        },
        "publicId": {
            "baseName": "public_id",
            "type": "string",
            "format": ""
        },
        "ratioInMonth": {
            "baseName": "ratio_in_month",
            "type": "number",
            "format": "int64"
        },
        "startDate": {
            "baseName": "start_date",
            "type": "Date",
            "format": "date-time"
        },
        "usage": {
            "baseName": "usage",
            "type": "UsageBillableSummaryKeys",
            "format": ""
        }
    };
    return UsageBillableSummaryHour;
}());
exports.UsageBillableSummaryHour = UsageBillableSummaryHour;
//# sourceMappingURL=UsageBillableSummaryHour.js.map