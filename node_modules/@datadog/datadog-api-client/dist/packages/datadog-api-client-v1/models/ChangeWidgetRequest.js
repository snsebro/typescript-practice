"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChangeWidgetRequest = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Updated change widget.
*/
var ChangeWidgetRequest = /** @class */ (function () {
    function ChangeWidgetRequest() {
    }
    ChangeWidgetRequest.getAttributeTypeMap = function () {
        return ChangeWidgetRequest.attributeTypeMap;
    };
    ChangeWidgetRequest.deserialize = function (data) {
        var res = new ChangeWidgetRequest();
        res.apmQuery = ObjectSerializer_1.ObjectSerializer.deserialize(data.apm_query, "LogQueryDefinition", "");
        if (['absolute', 'relative', undefined].includes(data.change_type)) {
            res.changeType = data.change_type;
        }
        else {
            throw TypeError("invalid enum value " + data.change_type + " for change_type");
        }
        if (['hour_before', 'day_before', 'week_before', 'month_before', undefined].includes(data.compare_to)) {
            res.compareTo = data.compare_to;
        }
        else {
            throw TypeError("invalid enum value " + data.compare_to + " for compare_to");
        }
        res.eventQuery = ObjectSerializer_1.ObjectSerializer.deserialize(data.event_query, "LogQueryDefinition", "");
        res.increaseGood = ObjectSerializer_1.ObjectSerializer.deserialize(data.increase_good, "boolean", "");
        res.logQuery = ObjectSerializer_1.ObjectSerializer.deserialize(data.log_query, "LogQueryDefinition", "");
        res.networkQuery = ObjectSerializer_1.ObjectSerializer.deserialize(data.network_query, "LogQueryDefinition", "");
        if (['change', 'name', 'present', 'past', undefined].includes(data.order_by)) {
            res.orderBy = data.order_by;
        }
        else {
            throw TypeError("invalid enum value " + data.order_by + " for order_by");
        }
        if (['asc', 'desc', undefined].includes(data.order_dir)) {
            res.orderDir = data.order_dir;
        }
        else {
            throw TypeError("invalid enum value " + data.order_dir + " for order_dir");
        }
        res.processQuery = ObjectSerializer_1.ObjectSerializer.deserialize(data.process_query, "ProcessQueryDefinition", "");
        res.profileMetricsQuery = ObjectSerializer_1.ObjectSerializer.deserialize(data.profile_metrics_query, "LogQueryDefinition", "");
        res.q = ObjectSerializer_1.ObjectSerializer.deserialize(data.q, "string", "");
        res.rumQuery = ObjectSerializer_1.ObjectSerializer.deserialize(data.rum_query, "LogQueryDefinition", "");
        res.securityQuery = ObjectSerializer_1.ObjectSerializer.deserialize(data.security_query, "LogQueryDefinition", "");
        res.showPresent = ObjectSerializer_1.ObjectSerializer.deserialize(data.show_present, "boolean", "");
        return res;
    };
    ChangeWidgetRequest.serialize = function (data) {
        var attributeTypes = ChangeWidgetRequest.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.apm_query = ObjectSerializer_1.ObjectSerializer.serialize(data.apmQuery, "LogQueryDefinition", "");
        if (['absolute', 'relative', undefined].includes(data.changeType)) {
            res.change_type = data.changeType;
        }
        else {
            throw TypeError("invalid enum value " + data.changeType + " for changeType");
        }
        if (['hour_before', 'day_before', 'week_before', 'month_before', undefined].includes(data.compareTo)) {
            res.compare_to = data.compareTo;
        }
        else {
            throw TypeError("invalid enum value " + data.compareTo + " for compareTo");
        }
        res.event_query = ObjectSerializer_1.ObjectSerializer.serialize(data.eventQuery, "LogQueryDefinition", "");
        res.increase_good = ObjectSerializer_1.ObjectSerializer.serialize(data.increaseGood, "boolean", "");
        res.log_query = ObjectSerializer_1.ObjectSerializer.serialize(data.logQuery, "LogQueryDefinition", "");
        res.network_query = ObjectSerializer_1.ObjectSerializer.serialize(data.networkQuery, "LogQueryDefinition", "");
        if (['change', 'name', 'present', 'past', undefined].includes(data.orderBy)) {
            res.order_by = data.orderBy;
        }
        else {
            throw TypeError("invalid enum value " + data.orderBy + " for orderBy");
        }
        if (['asc', 'desc', undefined].includes(data.orderDir)) {
            res.order_dir = data.orderDir;
        }
        else {
            throw TypeError("invalid enum value " + data.orderDir + " for orderDir");
        }
        res.process_query = ObjectSerializer_1.ObjectSerializer.serialize(data.processQuery, "ProcessQueryDefinition", "");
        res.profile_metrics_query = ObjectSerializer_1.ObjectSerializer.serialize(data.profileMetricsQuery, "LogQueryDefinition", "");
        res.q = ObjectSerializer_1.ObjectSerializer.serialize(data.q, "string", "");
        res.rum_query = ObjectSerializer_1.ObjectSerializer.serialize(data.rumQuery, "LogQueryDefinition", "");
        res.security_query = ObjectSerializer_1.ObjectSerializer.serialize(data.securityQuery, "LogQueryDefinition", "");
        res.show_present = ObjectSerializer_1.ObjectSerializer.serialize(data.showPresent, "boolean", "");
        return res;
    };
    ChangeWidgetRequest.discriminator = undefined;
    ChangeWidgetRequest.attributeTypeMap = {
        "apmQuery": {
            "baseName": "apm_query",
            "type": "LogQueryDefinition",
            "format": ""
        },
        "changeType": {
            "baseName": "change_type",
            "type": "WidgetChangeType",
            "format": ""
        },
        "compareTo": {
            "baseName": "compare_to",
            "type": "WidgetCompareTo",
            "format": ""
        },
        "eventQuery": {
            "baseName": "event_query",
            "type": "LogQueryDefinition",
            "format": ""
        },
        "increaseGood": {
            "baseName": "increase_good",
            "type": "boolean",
            "format": ""
        },
        "logQuery": {
            "baseName": "log_query",
            "type": "LogQueryDefinition",
            "format": ""
        },
        "networkQuery": {
            "baseName": "network_query",
            "type": "LogQueryDefinition",
            "format": ""
        },
        "orderBy": {
            "baseName": "order_by",
            "type": "WidgetOrderBy",
            "format": ""
        },
        "orderDir": {
            "baseName": "order_dir",
            "type": "WidgetSort",
            "format": ""
        },
        "processQuery": {
            "baseName": "process_query",
            "type": "ProcessQueryDefinition",
            "format": ""
        },
        "profileMetricsQuery": {
            "baseName": "profile_metrics_query",
            "type": "LogQueryDefinition",
            "format": ""
        },
        "q": {
            "baseName": "q",
            "type": "string",
            "format": ""
        },
        "rumQuery": {
            "baseName": "rum_query",
            "type": "LogQueryDefinition",
            "format": ""
        },
        "securityQuery": {
            "baseName": "security_query",
            "type": "LogQueryDefinition",
            "format": ""
        },
        "showPresent": {
            "baseName": "show_present",
            "type": "boolean",
            "format": ""
        }
    };
    return ChangeWidgetRequest;
}());
exports.ChangeWidgetRequest = ChangeWidgetRequest;
//# sourceMappingURL=ChangeWidgetRequest.js.map