"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsageLogsHour = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Hour usage for logs.
*/
var UsageLogsHour = /** @class */ (function () {
    function UsageLogsHour() {
    }
    UsageLogsHour.getAttributeTypeMap = function () {
        return UsageLogsHour.attributeTypeMap;
    };
    UsageLogsHour.deserialize = function (data) {
        var res = new UsageLogsHour();
        res.billableIngestedBytes = ObjectSerializer_1.ObjectSerializer.deserialize(data.billable_ingested_bytes, "number", "int64");
        res.hour = ObjectSerializer_1.ObjectSerializer.deserialize(data.hour, "Date", "date-time");
        res.indexedEventsCount = ObjectSerializer_1.ObjectSerializer.deserialize(data.indexed_events_count, "number", "int64");
        res.ingestedEventsBytes = ObjectSerializer_1.ObjectSerializer.deserialize(data.ingested_events_bytes, "number", "int64");
        res.logsLiveIndexedCount = ObjectSerializer_1.ObjectSerializer.deserialize(data.logs_live_indexed_count, "number", "int64");
        res.logsLiveIngestedBytes = ObjectSerializer_1.ObjectSerializer.deserialize(data.logs_live_ingested_bytes, "number", "int64");
        res.logsRehydratedIndexedCount = ObjectSerializer_1.ObjectSerializer.deserialize(data.logs_rehydrated_indexed_count, "number", "int64");
        res.logsRehydratedIngestedBytes = ObjectSerializer_1.ObjectSerializer.deserialize(data.logs_rehydrated_ingested_bytes, "number", "int64");
        return res;
    };
    UsageLogsHour.serialize = function (data) {
        var attributeTypes = UsageLogsHour.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.billable_ingested_bytes = ObjectSerializer_1.ObjectSerializer.serialize(data.billableIngestedBytes, "number", "int64");
        res.hour = ObjectSerializer_1.ObjectSerializer.serialize(data.hour, "Date", "date-time");
        res.indexed_events_count = ObjectSerializer_1.ObjectSerializer.serialize(data.indexedEventsCount, "number", "int64");
        res.ingested_events_bytes = ObjectSerializer_1.ObjectSerializer.serialize(data.ingestedEventsBytes, "number", "int64");
        res.logs_live_indexed_count = ObjectSerializer_1.ObjectSerializer.serialize(data.logsLiveIndexedCount, "number", "int64");
        res.logs_live_ingested_bytes = ObjectSerializer_1.ObjectSerializer.serialize(data.logsLiveIngestedBytes, "number", "int64");
        res.logs_rehydrated_indexed_count = ObjectSerializer_1.ObjectSerializer.serialize(data.logsRehydratedIndexedCount, "number", "int64");
        res.logs_rehydrated_ingested_bytes = ObjectSerializer_1.ObjectSerializer.serialize(data.logsRehydratedIngestedBytes, "number", "int64");
        return res;
    };
    UsageLogsHour.discriminator = undefined;
    UsageLogsHour.attributeTypeMap = {
        "billableIngestedBytes": {
            "baseName": "billable_ingested_bytes",
            "type": "number",
            "format": "int64"
        },
        "hour": {
            "baseName": "hour",
            "type": "Date",
            "format": "date-time"
        },
        "indexedEventsCount": {
            "baseName": "indexed_events_count",
            "type": "number",
            "format": "int64"
        },
        "ingestedEventsBytes": {
            "baseName": "ingested_events_bytes",
            "type": "number",
            "format": "int64"
        },
        "logsLiveIndexedCount": {
            "baseName": "logs_live_indexed_count",
            "type": "number",
            "format": "int64"
        },
        "logsLiveIngestedBytes": {
            "baseName": "logs_live_ingested_bytes",
            "type": "number",
            "format": "int64"
        },
        "logsRehydratedIndexedCount": {
            "baseName": "logs_rehydrated_indexed_count",
            "type": "number",
            "format": "int64"
        },
        "logsRehydratedIngestedBytes": {
            "baseName": "logs_rehydrated_ingested_bytes",
            "type": "number",
            "format": "int64"
        }
    };
    return UsageLogsHour;
}());
exports.UsageLogsHour = UsageLogsHour;
//# sourceMappingURL=UsageLogsHour.js.map