"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyntheticsBrowserTest = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Object containing details about a Synthetic browser test.
*/
var SyntheticsBrowserTest = /** @class */ (function () {
    function SyntheticsBrowserTest() {
    }
    SyntheticsBrowserTest.getAttributeTypeMap = function () {
        return SyntheticsBrowserTest.attributeTypeMap;
    };
    SyntheticsBrowserTest.deserialize = function (data) {
        var res = new SyntheticsBrowserTest();
        res.config = ObjectSerializer_1.ObjectSerializer.deserialize(data.config, "SyntheticsBrowserTestConfig", "");
        res.locations = ObjectSerializer_1.ObjectSerializer.deserialize(data.locations, "Array<string>", "");
        if (data.message === undefined) {
            throw new TypeError("missing required attribute 'message' on 'SyntheticsBrowserTest' object");
        }
        res.message = ObjectSerializer_1.ObjectSerializer.deserialize(data.message, "string", "");
        res.monitorId = ObjectSerializer_1.ObjectSerializer.deserialize(data.monitor_id, "number", "int64");
        res.name = ObjectSerializer_1.ObjectSerializer.deserialize(data.name, "string", "");
        res.options = ObjectSerializer_1.ObjectSerializer.deserialize(data.options, "SyntheticsTestOptions", "");
        res.publicId = ObjectSerializer_1.ObjectSerializer.deserialize(data.public_id, "string", "");
        if (['live', 'paused', undefined].includes(data.status)) {
            res.status = data.status;
        }
        else {
            throw TypeError("invalid enum value " + data.status + " for status");
        }
        res.steps = ObjectSerializer_1.ObjectSerializer.deserialize(data.steps, "Array<SyntheticsStep>", "");
        res.tags = ObjectSerializer_1.ObjectSerializer.deserialize(data.tags, "Array<string>", "");
        if (['browser', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        return res;
    };
    SyntheticsBrowserTest.serialize = function (data) {
        var attributeTypes = SyntheticsBrowserTest.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.config = ObjectSerializer_1.ObjectSerializer.serialize(data.config, "SyntheticsBrowserTestConfig", "");
        res.locations = ObjectSerializer_1.ObjectSerializer.serialize(data.locations, "Array<string>", "");
        if (data.message === undefined) {
            throw new TypeError("missing required attribute 'message' on 'SyntheticsBrowserTest' object");
        }
        res.message = ObjectSerializer_1.ObjectSerializer.serialize(data.message, "string", "");
        res.monitor_id = ObjectSerializer_1.ObjectSerializer.serialize(data.monitorId, "number", "int64");
        res.name = ObjectSerializer_1.ObjectSerializer.serialize(data.name, "string", "");
        res.options = ObjectSerializer_1.ObjectSerializer.serialize(data.options, "SyntheticsTestOptions", "");
        res.public_id = ObjectSerializer_1.ObjectSerializer.serialize(data.publicId, "string", "");
        if (['live', 'paused', undefined].includes(data.status)) {
            res.status = data.status;
        }
        else {
            throw TypeError("invalid enum value " + data.status + " for status");
        }
        res.steps = ObjectSerializer_1.ObjectSerializer.serialize(data.steps, "Array<SyntheticsStep>", "");
        res.tags = ObjectSerializer_1.ObjectSerializer.serialize(data.tags, "Array<string>", "");
        if (['browser', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        return res;
    };
    SyntheticsBrowserTest.discriminator = undefined;
    SyntheticsBrowserTest.attributeTypeMap = {
        "config": {
            "baseName": "config",
            "type": "SyntheticsBrowserTestConfig",
            "format": ""
        },
        "locations": {
            "baseName": "locations",
            "type": "Array<string>",
            "format": ""
        },
        "message": {
            "baseName": "message",
            "type": "string",
            "format": ""
        },
        "monitorId": {
            "baseName": "monitor_id",
            "type": "number",
            "format": "int64"
        },
        "name": {
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        "options": {
            "baseName": "options",
            "type": "SyntheticsTestOptions",
            "format": ""
        },
        "publicId": {
            "baseName": "public_id",
            "type": "string",
            "format": ""
        },
        "status": {
            "baseName": "status",
            "type": "SyntheticsTestPauseStatus",
            "format": ""
        },
        "steps": {
            "baseName": "steps",
            "type": "Array<SyntheticsStep>",
            "format": ""
        },
        "tags": {
            "baseName": "tags",
            "type": "Array<string>",
            "format": ""
        },
        "type": {
            "baseName": "type",
            "type": "SyntheticsBrowserTestType",
            "format": ""
        }
    };
    return SyntheticsBrowserTest;
}());
exports.SyntheticsBrowserTest = SyntheticsBrowserTest;
//# sourceMappingURL=SyntheticsBrowserTest.js.map