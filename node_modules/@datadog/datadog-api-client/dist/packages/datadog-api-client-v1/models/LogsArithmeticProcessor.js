"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogsArithmeticProcessor = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Use the Arithmetic Processor to add a new attribute (without spaces or special characters in the new attribute name) to a log with the result of the provided formula. This enables you to remap different time attributes with different units into a single attribute, or to compute operations on attributes within the same log.  The formula can use parentheses and the basic arithmetic operators `-`, `+`, `*`, `/`.  By default, the calculation is skipped if an attribute is missing. Select “Replace missing attribute by 0” to automatically populate missing attribute values with 0 to ensure that the calculation is done. An attribute is missing if it is not found in the log attributes, or if it cannot be converted to a number.  *Notes*:  - The operator `-` needs to be space split in the formula as it can also be contained in attribute names. - If the target attribute already exists, it is overwritten by the result of the formula. - Results are rounded up to the 9th decimal. For example, if the result of the formula is `0.1234567891`,   the actual value stored for the attribute is `0.123456789`. - If you need to scale a unit of measure,   see [Scale Filter](https://docs.datadoghq.com/logs/processing/parsing/?tab=filter#matcher-and-filter).
*/
var LogsArithmeticProcessor = /** @class */ (function () {
    function LogsArithmeticProcessor() {
    }
    LogsArithmeticProcessor.getAttributeTypeMap = function () {
        return LogsArithmeticProcessor.attributeTypeMap;
    };
    LogsArithmeticProcessor.deserialize = function (data) {
        var res = new LogsArithmeticProcessor();
        if (data.expression === undefined) {
            throw new TypeError("missing required attribute 'expression' on 'LogsArithmeticProcessor' object");
        }
        res.expression = ObjectSerializer_1.ObjectSerializer.deserialize(data.expression, "string", "");
        res.isEnabled = ObjectSerializer_1.ObjectSerializer.deserialize(data.is_enabled, "boolean", "");
        res.isReplaceMissing = ObjectSerializer_1.ObjectSerializer.deserialize(data.is_replace_missing, "boolean", "");
        res.name = ObjectSerializer_1.ObjectSerializer.deserialize(data.name, "string", "");
        if (data.target === undefined) {
            throw new TypeError("missing required attribute 'target' on 'LogsArithmeticProcessor' object");
        }
        res.target = ObjectSerializer_1.ObjectSerializer.deserialize(data.target, "string", "");
        if (data.type === undefined) {
            throw new TypeError("missing required attribute 'type' on 'LogsArithmeticProcessor' object");
        }
        if (['arithmetic-processor', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        return res;
    };
    LogsArithmeticProcessor.serialize = function (data) {
        var attributeTypes = LogsArithmeticProcessor.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        if (data.expression === undefined) {
            throw new TypeError("missing required attribute 'expression' on 'LogsArithmeticProcessor' object");
        }
        res.expression = ObjectSerializer_1.ObjectSerializer.serialize(data.expression, "string", "");
        res.is_enabled = ObjectSerializer_1.ObjectSerializer.serialize(data.isEnabled, "boolean", "");
        res.is_replace_missing = ObjectSerializer_1.ObjectSerializer.serialize(data.isReplaceMissing, "boolean", "");
        res.name = ObjectSerializer_1.ObjectSerializer.serialize(data.name, "string", "");
        if (data.target === undefined) {
            throw new TypeError("missing required attribute 'target' on 'LogsArithmeticProcessor' object");
        }
        res.target = ObjectSerializer_1.ObjectSerializer.serialize(data.target, "string", "");
        if (data.type === undefined) {
            throw new TypeError("missing required attribute 'type' on 'LogsArithmeticProcessor' object");
        }
        if (['arithmetic-processor', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        return res;
    };
    LogsArithmeticProcessor.discriminator = undefined;
    LogsArithmeticProcessor.attributeTypeMap = {
        "expression": {
            "baseName": "expression",
            "type": "string",
            "format": ""
        },
        "isEnabled": {
            "baseName": "is_enabled",
            "type": "boolean",
            "format": ""
        },
        "isReplaceMissing": {
            "baseName": "is_replace_missing",
            "type": "boolean",
            "format": ""
        },
        "name": {
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        "target": {
            "baseName": "target",
            "type": "string",
            "format": ""
        },
        "type": {
            "baseName": "type",
            "type": "LogsArithmeticProcessorType",
            "format": ""
        }
    };
    return LogsArithmeticProcessor;
}());
exports.LogsArithmeticProcessor = LogsArithmeticProcessor;
//# sourceMappingURL=LogsArithmeticProcessor.js.map