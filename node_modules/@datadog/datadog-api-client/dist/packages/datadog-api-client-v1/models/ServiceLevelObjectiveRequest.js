"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceLevelObjectiveRequest = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* A service level objective object includes a service level indicator, thresholds for one or more timeframes, and metadata (`name`, `description`, `tags`, etc.).
*/
var ServiceLevelObjectiveRequest = /** @class */ (function () {
    function ServiceLevelObjectiveRequest() {
    }
    ServiceLevelObjectiveRequest.getAttributeTypeMap = function () {
        return ServiceLevelObjectiveRequest.attributeTypeMap;
    };
    ServiceLevelObjectiveRequest.deserialize = function (data) {
        var res = new ServiceLevelObjectiveRequest();
        res.description = ObjectSerializer_1.ObjectSerializer.deserialize(data.description, "string", "");
        res.groups = ObjectSerializer_1.ObjectSerializer.deserialize(data.groups, "Array<string>", "");
        res.monitorIds = ObjectSerializer_1.ObjectSerializer.deserialize(data.monitor_ids, "Array<number>", "int64");
        if (data.name === undefined) {
            throw new TypeError("missing required attribute 'name' on 'ServiceLevelObjectiveRequest' object");
        }
        res.name = ObjectSerializer_1.ObjectSerializer.deserialize(data.name, "string", "");
        res.query = ObjectSerializer_1.ObjectSerializer.deserialize(data.query, "ServiceLevelObjectiveQuery", "");
        res.tags = ObjectSerializer_1.ObjectSerializer.deserialize(data.tags, "Array<string>", "");
        if (data.thresholds === undefined) {
            throw new TypeError("missing required attribute 'thresholds' on 'ServiceLevelObjectiveRequest' object");
        }
        res.thresholds = ObjectSerializer_1.ObjectSerializer.deserialize(data.thresholds, "Array<SLOThreshold>", "");
        if (data.type === undefined) {
            throw new TypeError("missing required attribute 'type' on 'ServiceLevelObjectiveRequest' object");
        }
        if (['metric', 'monitor', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        return res;
    };
    ServiceLevelObjectiveRequest.serialize = function (data) {
        var attributeTypes = ServiceLevelObjectiveRequest.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.description = ObjectSerializer_1.ObjectSerializer.serialize(data.description, "string", "");
        res.groups = ObjectSerializer_1.ObjectSerializer.serialize(data.groups, "Array<string>", "");
        res.monitor_ids = ObjectSerializer_1.ObjectSerializer.serialize(data.monitorIds, "Array<number>", "int64");
        if (data.name === undefined) {
            throw new TypeError("missing required attribute 'name' on 'ServiceLevelObjectiveRequest' object");
        }
        res.name = ObjectSerializer_1.ObjectSerializer.serialize(data.name, "string", "");
        res.query = ObjectSerializer_1.ObjectSerializer.serialize(data.query, "ServiceLevelObjectiveQuery", "");
        res.tags = ObjectSerializer_1.ObjectSerializer.serialize(data.tags, "Array<string>", "");
        if (data.thresholds === undefined) {
            throw new TypeError("missing required attribute 'thresholds' on 'ServiceLevelObjectiveRequest' object");
        }
        res.thresholds = ObjectSerializer_1.ObjectSerializer.serialize(data.thresholds, "Array<SLOThreshold>", "");
        if (data.type === undefined) {
            throw new TypeError("missing required attribute 'type' on 'ServiceLevelObjectiveRequest' object");
        }
        if (['metric', 'monitor', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        return res;
    };
    ServiceLevelObjectiveRequest.discriminator = undefined;
    ServiceLevelObjectiveRequest.attributeTypeMap = {
        "description": {
            "baseName": "description",
            "type": "string",
            "format": ""
        },
        "groups": {
            "baseName": "groups",
            "type": "Array<string>",
            "format": ""
        },
        "monitorIds": {
            "baseName": "monitor_ids",
            "type": "Array<number>",
            "format": "int64"
        },
        "name": {
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        "query": {
            "baseName": "query",
            "type": "ServiceLevelObjectiveQuery",
            "format": ""
        },
        "tags": {
            "baseName": "tags",
            "type": "Array<string>",
            "format": ""
        },
        "thresholds": {
            "baseName": "thresholds",
            "type": "Array<SLOThreshold>",
            "format": ""
        },
        "type": {
            "baseName": "type",
            "type": "SLOType",
            "format": ""
        }
    };
    return ServiceLevelObjectiveRequest;
}());
exports.ServiceLevelObjectiveRequest = ServiceLevelObjectiveRequest;
//# sourceMappingURL=ServiceLevelObjectiveRequest.js.map