"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SLOHistoryResponseData = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* An array of service level objective objects.
*/
var SLOHistoryResponseData = /** @class */ (function () {
    function SLOHistoryResponseData() {
    }
    SLOHistoryResponseData.getAttributeTypeMap = function () {
        return SLOHistoryResponseData.attributeTypeMap;
    };
    SLOHistoryResponseData.deserialize = function (data) {
        var res = new SLOHistoryResponseData();
        res.fromTs = ObjectSerializer_1.ObjectSerializer.deserialize(data.from_ts, "number", "int64");
        res.groupBy = ObjectSerializer_1.ObjectSerializer.deserialize(data.group_by, "Array<string>", "");
        res.groups = ObjectSerializer_1.ObjectSerializer.deserialize(data.groups, "Array<SLOHistorySLIData>", "");
        res.monitors = ObjectSerializer_1.ObjectSerializer.deserialize(data.monitors, "Array<SLOHistorySLIData>", "");
        res.overall = ObjectSerializer_1.ObjectSerializer.deserialize(data.overall, "SLOHistorySLIData", "");
        res.series = ObjectSerializer_1.ObjectSerializer.deserialize(data.series, "SLOHistoryMetrics", "");
        res.thresholds = ObjectSerializer_1.ObjectSerializer.deserialize(data.thresholds, "{ [key: string]: SLOThreshold; }", "");
        res.toTs = ObjectSerializer_1.ObjectSerializer.deserialize(data.to_ts, "number", "int64");
        if (['metric', 'monitor', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        if ([0, 1, undefined].includes(data.type_id)) {
            res.typeId = data.type_id;
        }
        else {
            throw TypeError("invalid enum value " + data.type_id + " for type_id");
        }
        return res;
    };
    SLOHistoryResponseData.serialize = function (data) {
        var attributeTypes = SLOHistoryResponseData.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.from_ts = ObjectSerializer_1.ObjectSerializer.serialize(data.fromTs, "number", "int64");
        res.group_by = ObjectSerializer_1.ObjectSerializer.serialize(data.groupBy, "Array<string>", "");
        res.groups = ObjectSerializer_1.ObjectSerializer.serialize(data.groups, "Array<SLOHistorySLIData>", "");
        res.monitors = ObjectSerializer_1.ObjectSerializer.serialize(data.monitors, "Array<SLOHistorySLIData>", "");
        res.overall = ObjectSerializer_1.ObjectSerializer.serialize(data.overall, "SLOHistorySLIData", "");
        res.series = ObjectSerializer_1.ObjectSerializer.serialize(data.series, "SLOHistoryMetrics", "");
        res.thresholds = ObjectSerializer_1.ObjectSerializer.serialize(data.thresholds, "{ [key: string]: SLOThreshold; }", "");
        res.to_ts = ObjectSerializer_1.ObjectSerializer.serialize(data.toTs, "number", "int64");
        if (['metric', 'monitor', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        if ([0, 1, undefined].includes(data.typeId)) {
            res.type_id = data.typeId;
        }
        else {
            throw TypeError("invalid enum value " + data.typeId + " for typeId");
        }
        return res;
    };
    SLOHistoryResponseData.discriminator = undefined;
    SLOHistoryResponseData.attributeTypeMap = {
        "fromTs": {
            "baseName": "from_ts",
            "type": "number",
            "format": "int64"
        },
        "groupBy": {
            "baseName": "group_by",
            "type": "Array<string>",
            "format": ""
        },
        "groups": {
            "baseName": "groups",
            "type": "Array<SLOHistorySLIData>",
            "format": ""
        },
        "monitors": {
            "baseName": "monitors",
            "type": "Array<SLOHistorySLIData>",
            "format": ""
        },
        "overall": {
            "baseName": "overall",
            "type": "SLOHistorySLIData",
            "format": ""
        },
        "series": {
            "baseName": "series",
            "type": "SLOHistoryMetrics",
            "format": ""
        },
        "thresholds": {
            "baseName": "thresholds",
            "type": "{ [key: string]: SLOThreshold; }",
            "format": ""
        },
        "toTs": {
            "baseName": "to_ts",
            "type": "number",
            "format": "int64"
        },
        "type": {
            "baseName": "type",
            "type": "SLOType",
            "format": ""
        },
        "typeId": {
            "baseName": "type_id",
            "type": "SLOTypeNumeric",
            "format": ""
        }
    };
    return SLOHistoryResponseData;
}());
exports.SLOHistoryResponseData = SLOHistoryResponseData;
//# sourceMappingURL=SLOHistoryResponseData.js.map