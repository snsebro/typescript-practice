"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Series = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* A metric to submit to Datadog. See [Datadog metrics](https://docs.datadoghq.com/developers/metrics/#custom-metrics-properties).
*/
var Series = /** @class */ (function () {
    function Series() {
    }
    Series.getAttributeTypeMap = function () {
        return Series.attributeTypeMap;
    };
    Series.deserialize = function (data) {
        var res = new Series();
        res.host = ObjectSerializer_1.ObjectSerializer.deserialize(data.host, "string", "");
        res.interval = ObjectSerializer_1.ObjectSerializer.deserialize(data.interval, "number", "int64");
        if (data.metric === undefined) {
            throw new TypeError("missing required attribute 'metric' on 'Series' object");
        }
        res.metric = ObjectSerializer_1.ObjectSerializer.deserialize(data.metric, "string", "");
        if (data.points === undefined) {
            throw new TypeError("missing required attribute 'points' on 'Series' object");
        }
        res.points = ObjectSerializer_1.ObjectSerializer.deserialize(data.points, "Array<Array<number>>", "double");
        res.tags = ObjectSerializer_1.ObjectSerializer.deserialize(data.tags, "Array<string>", "");
        res.type = ObjectSerializer_1.ObjectSerializer.deserialize(data.type, "string", "");
        return res;
    };
    Series.serialize = function (data) {
        var attributeTypes = Series.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.host = ObjectSerializer_1.ObjectSerializer.serialize(data.host, "string", "");
        res.interval = ObjectSerializer_1.ObjectSerializer.serialize(data.interval, "number", "int64");
        if (data.metric === undefined) {
            throw new TypeError("missing required attribute 'metric' on 'Series' object");
        }
        res.metric = ObjectSerializer_1.ObjectSerializer.serialize(data.metric, "string", "");
        if (data.points === undefined) {
            throw new TypeError("missing required attribute 'points' on 'Series' object");
        }
        res.points = ObjectSerializer_1.ObjectSerializer.serialize(data.points, "Array<Array<number>>", "double");
        res.tags = ObjectSerializer_1.ObjectSerializer.serialize(data.tags, "Array<string>", "");
        res.type = ObjectSerializer_1.ObjectSerializer.serialize(data.type, "string", "");
        return res;
    };
    Series.discriminator = undefined;
    Series.attributeTypeMap = {
        "host": {
            "baseName": "host",
            "type": "string",
            "format": ""
        },
        "interval": {
            "baseName": "interval",
            "type": "number",
            "format": "int64"
        },
        "metric": {
            "baseName": "metric",
            "type": "string",
            "format": ""
        },
        "points": {
            "baseName": "points",
            "type": "Array<Array<number>>",
            "format": "double"
        },
        "tags": {
            "baseName": "tags",
            "type": "Array<string>",
            "format": ""
        },
        "type": {
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    };
    return Series;
}());
exports.Series = Series;
//# sourceMappingURL=Series.js.map