"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogsGrokParser = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Create custom grok rules to parse the full message or [a specific attribute of your raw event](https://docs.datadoghq.com/logs/processing/parsing/#advanced-settings). For more information, see the [parsing section](https://docs.datadoghq.com/logs/processing/parsing).
*/
var LogsGrokParser = /** @class */ (function () {
    function LogsGrokParser() {
    }
    LogsGrokParser.getAttributeTypeMap = function () {
        return LogsGrokParser.attributeTypeMap;
    };
    LogsGrokParser.deserialize = function (data) {
        var res = new LogsGrokParser();
        if (data.grok === undefined) {
            throw new TypeError("missing required attribute 'grok' on 'LogsGrokParser' object");
        }
        res.grok = ObjectSerializer_1.ObjectSerializer.deserialize(data.grok, "LogsGrokParserRules", "");
        res.isEnabled = ObjectSerializer_1.ObjectSerializer.deserialize(data.is_enabled, "boolean", "");
        res.name = ObjectSerializer_1.ObjectSerializer.deserialize(data.name, "string", "");
        res.samples = ObjectSerializer_1.ObjectSerializer.deserialize(data.samples, "Array<string>", "");
        if (data.source === undefined) {
            throw new TypeError("missing required attribute 'source' on 'LogsGrokParser' object");
        }
        res.source = ObjectSerializer_1.ObjectSerializer.deserialize(data.source, "string", "");
        if (data.type === undefined) {
            throw new TypeError("missing required attribute 'type' on 'LogsGrokParser' object");
        }
        if (['grok-parser', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        return res;
    };
    LogsGrokParser.serialize = function (data) {
        var attributeTypes = LogsGrokParser.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        if (data.grok === undefined) {
            throw new TypeError("missing required attribute 'grok' on 'LogsGrokParser' object");
        }
        res.grok = ObjectSerializer_1.ObjectSerializer.serialize(data.grok, "LogsGrokParserRules", "");
        res.is_enabled = ObjectSerializer_1.ObjectSerializer.serialize(data.isEnabled, "boolean", "");
        res.name = ObjectSerializer_1.ObjectSerializer.serialize(data.name, "string", "");
        res.samples = ObjectSerializer_1.ObjectSerializer.serialize(data.samples, "Array<string>", "");
        if (data.source === undefined) {
            throw new TypeError("missing required attribute 'source' on 'LogsGrokParser' object");
        }
        res.source = ObjectSerializer_1.ObjectSerializer.serialize(data.source, "string", "");
        if (data.type === undefined) {
            throw new TypeError("missing required attribute 'type' on 'LogsGrokParser' object");
        }
        if (['grok-parser', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        return res;
    };
    LogsGrokParser.discriminator = undefined;
    LogsGrokParser.attributeTypeMap = {
        "grok": {
            "baseName": "grok",
            "type": "LogsGrokParserRules",
            "format": ""
        },
        "isEnabled": {
            "baseName": "is_enabled",
            "type": "boolean",
            "format": ""
        },
        "name": {
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        "samples": {
            "baseName": "samples",
            "type": "Array<string>",
            "format": ""
        },
        "source": {
            "baseName": "source",
            "type": "string",
            "format": ""
        },
        "type": {
            "baseName": "type",
            "type": "LogsGrokParserType",
            "format": ""
        }
    };
    return LogsGrokParser;
}());
exports.LogsGrokParser = LogsGrokParser;
//# sourceMappingURL=LogsGrokParser.js.map