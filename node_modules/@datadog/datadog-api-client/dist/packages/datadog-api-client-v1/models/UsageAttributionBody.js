"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsageAttributionBody = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Usage Summary by tag for a given organization.
*/
var UsageAttributionBody = /** @class */ (function () {
    function UsageAttributionBody() {
    }
    UsageAttributionBody.getAttributeTypeMap = function () {
        return UsageAttributionBody.attributeTypeMap;
    };
    UsageAttributionBody.deserialize = function (data) {
        var res = new UsageAttributionBody();
        res.month = ObjectSerializer_1.ObjectSerializer.deserialize(data.month, "Date", "date-time");
        res.orgName = ObjectSerializer_1.ObjectSerializer.deserialize(data.org_name, "string", "");
        res.publicId = ObjectSerializer_1.ObjectSerializer.deserialize(data.public_id, "string", "");
        res.tagConfigSource = ObjectSerializer_1.ObjectSerializer.deserialize(data.tag_config_source, "string", "");
        res.tags = ObjectSerializer_1.ObjectSerializer.deserialize(data.tags, "{ [key: string]: Array<string>; }", "");
        res.updatedAt = ObjectSerializer_1.ObjectSerializer.deserialize(data.updated_at, "string", "");
        res.values = ObjectSerializer_1.ObjectSerializer.deserialize(data.values, "UsageAttributionValues", "");
        return res;
    };
    UsageAttributionBody.serialize = function (data) {
        var attributeTypes = UsageAttributionBody.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.month = ObjectSerializer_1.ObjectSerializer.serialize(data.month, "Date", "date-time");
        res.org_name = ObjectSerializer_1.ObjectSerializer.serialize(data.orgName, "string", "");
        res.public_id = ObjectSerializer_1.ObjectSerializer.serialize(data.publicId, "string", "");
        res.tag_config_source = ObjectSerializer_1.ObjectSerializer.serialize(data.tagConfigSource, "string", "");
        res.tags = ObjectSerializer_1.ObjectSerializer.serialize(data.tags, "{ [key: string]: Array<string>; }", "");
        res.updated_at = ObjectSerializer_1.ObjectSerializer.serialize(data.updatedAt, "string", "");
        res.values = ObjectSerializer_1.ObjectSerializer.serialize(data.values, "UsageAttributionValues", "");
        return res;
    };
    UsageAttributionBody.discriminator = undefined;
    UsageAttributionBody.attributeTypeMap = {
        "month": {
            "baseName": "month",
            "type": "Date",
            "format": "date-time"
        },
        "orgName": {
            "baseName": "org_name",
            "type": "string",
            "format": ""
        },
        "publicId": {
            "baseName": "public_id",
            "type": "string",
            "format": ""
        },
        "tagConfigSource": {
            "baseName": "tag_config_source",
            "type": "string",
            "format": ""
        },
        "tags": {
            "baseName": "tags",
            "type": "{ [key: string]: Array<string>; }",
            "format": ""
        },
        "updatedAt": {
            "baseName": "updated_at",
            "type": "string",
            "format": ""
        },
        "values": {
            "baseName": "values",
            "type": "UsageAttributionValues",
            "format": ""
        }
    };
    return UsageAttributionBody;
}());
exports.UsageAttributionBody = UsageAttributionBody;
//# sourceMappingURL=UsageAttributionBody.js.map