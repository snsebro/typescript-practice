"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SLOBulkDeleteError = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Object describing the error.
*/
var SLOBulkDeleteError = /** @class */ (function () {
    function SLOBulkDeleteError() {
    }
    SLOBulkDeleteError.getAttributeTypeMap = function () {
        return SLOBulkDeleteError.attributeTypeMap;
    };
    SLOBulkDeleteError.deserialize = function (data) {
        var res = new SLOBulkDeleteError();
        if (data.id === undefined) {
            throw new TypeError("missing required attribute 'id' on 'SLOBulkDeleteError' object");
        }
        res.id = ObjectSerializer_1.ObjectSerializer.deserialize(data.id, "string", "");
        if (data.message === undefined) {
            throw new TypeError("missing required attribute 'message' on 'SLOBulkDeleteError' object");
        }
        res.message = ObjectSerializer_1.ObjectSerializer.deserialize(data.message, "string", "");
        if (data.timeframe === undefined) {
            throw new TypeError("missing required attribute 'timeframe' on 'SLOBulkDeleteError' object");
        }
        if (['7d', '30d', '90d', 'all', undefined].includes(data.timeframe)) {
            res.timeframe = data.timeframe;
        }
        else {
            throw TypeError("invalid enum value " + data.timeframe + " for timeframe");
        }
        return res;
    };
    SLOBulkDeleteError.serialize = function (data) {
        var attributeTypes = SLOBulkDeleteError.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        if (data.id === undefined) {
            throw new TypeError("missing required attribute 'id' on 'SLOBulkDeleteError' object");
        }
        res.id = ObjectSerializer_1.ObjectSerializer.serialize(data.id, "string", "");
        if (data.message === undefined) {
            throw new TypeError("missing required attribute 'message' on 'SLOBulkDeleteError' object");
        }
        res.message = ObjectSerializer_1.ObjectSerializer.serialize(data.message, "string", "");
        if (data.timeframe === undefined) {
            throw new TypeError("missing required attribute 'timeframe' on 'SLOBulkDeleteError' object");
        }
        if (['7d', '30d', '90d', 'all', undefined].includes(data.timeframe)) {
            res.timeframe = data.timeframe;
        }
        else {
            throw TypeError("invalid enum value " + data.timeframe + " for timeframe");
        }
        return res;
    };
    SLOBulkDeleteError.discriminator = undefined;
    SLOBulkDeleteError.attributeTypeMap = {
        "id": {
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        "message": {
            "baseName": "message",
            "type": "string",
            "format": ""
        },
        "timeframe": {
            "baseName": "timeframe",
            "type": "SLOErrorTimeframe",
            "format": ""
        }
    };
    return SLOBulkDeleteError;
}());
exports.SLOBulkDeleteError = SLOBulkDeleteError;
//# sourceMappingURL=SLOBulkDeleteError.js.map