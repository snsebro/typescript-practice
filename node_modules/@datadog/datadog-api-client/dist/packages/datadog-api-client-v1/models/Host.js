"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Host = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Object representing a host.
*/
var Host = /** @class */ (function () {
    function Host() {
    }
    Host.getAttributeTypeMap = function () {
        return Host.attributeTypeMap;
    };
    Host.deserialize = function (data) {
        var res = new Host();
        res.aliases = ObjectSerializer_1.ObjectSerializer.deserialize(data.aliases, "Array<string>", "");
        res.apps = ObjectSerializer_1.ObjectSerializer.deserialize(data.apps, "Array<string>", "");
        res.awsName = ObjectSerializer_1.ObjectSerializer.deserialize(data.aws_name, "string", "");
        res.hostName = ObjectSerializer_1.ObjectSerializer.deserialize(data.host_name, "string", "");
        res.id = ObjectSerializer_1.ObjectSerializer.deserialize(data.id, "number", "int64");
        res.isMuted = ObjectSerializer_1.ObjectSerializer.deserialize(data.is_muted, "boolean", "");
        res.lastReportedTime = ObjectSerializer_1.ObjectSerializer.deserialize(data.last_reported_time, "number", "int64");
        res.meta = ObjectSerializer_1.ObjectSerializer.deserialize(data.meta, "HostMeta", "");
        res.metrics = ObjectSerializer_1.ObjectSerializer.deserialize(data.metrics, "HostMetrics", "");
        res.muteTimeout = ObjectSerializer_1.ObjectSerializer.deserialize(data.mute_timeout, "number", "int64");
        res.name = ObjectSerializer_1.ObjectSerializer.deserialize(data.name, "string", "");
        res.sources = ObjectSerializer_1.ObjectSerializer.deserialize(data.sources, "Array<string>", "");
        res.tagsBySource = ObjectSerializer_1.ObjectSerializer.deserialize(data.tags_by_source, "{ [key: string]: Array<string>; }", "");
        res.up = ObjectSerializer_1.ObjectSerializer.deserialize(data.up, "boolean", "");
        return res;
    };
    Host.serialize = function (data) {
        var attributeTypes = Host.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.aliases = ObjectSerializer_1.ObjectSerializer.serialize(data.aliases, "Array<string>", "");
        res.apps = ObjectSerializer_1.ObjectSerializer.serialize(data.apps, "Array<string>", "");
        res.aws_name = ObjectSerializer_1.ObjectSerializer.serialize(data.awsName, "string", "");
        res.host_name = ObjectSerializer_1.ObjectSerializer.serialize(data.hostName, "string", "");
        res.id = ObjectSerializer_1.ObjectSerializer.serialize(data.id, "number", "int64");
        res.is_muted = ObjectSerializer_1.ObjectSerializer.serialize(data.isMuted, "boolean", "");
        res.last_reported_time = ObjectSerializer_1.ObjectSerializer.serialize(data.lastReportedTime, "number", "int64");
        res.meta = ObjectSerializer_1.ObjectSerializer.serialize(data.meta, "HostMeta", "");
        res.metrics = ObjectSerializer_1.ObjectSerializer.serialize(data.metrics, "HostMetrics", "");
        res.mute_timeout = ObjectSerializer_1.ObjectSerializer.serialize(data.muteTimeout, "number", "int64");
        res.name = ObjectSerializer_1.ObjectSerializer.serialize(data.name, "string", "");
        res.sources = ObjectSerializer_1.ObjectSerializer.serialize(data.sources, "Array<string>", "");
        res.tags_by_source = ObjectSerializer_1.ObjectSerializer.serialize(data.tagsBySource, "{ [key: string]: Array<string>; }", "");
        res.up = ObjectSerializer_1.ObjectSerializer.serialize(data.up, "boolean", "");
        return res;
    };
    Host.discriminator = undefined;
    Host.attributeTypeMap = {
        "aliases": {
            "baseName": "aliases",
            "type": "Array<string>",
            "format": ""
        },
        "apps": {
            "baseName": "apps",
            "type": "Array<string>",
            "format": ""
        },
        "awsName": {
            "baseName": "aws_name",
            "type": "string",
            "format": ""
        },
        "hostName": {
            "baseName": "host_name",
            "type": "string",
            "format": ""
        },
        "id": {
            "baseName": "id",
            "type": "number",
            "format": "int64"
        },
        "isMuted": {
            "baseName": "is_muted",
            "type": "boolean",
            "format": ""
        },
        "lastReportedTime": {
            "baseName": "last_reported_time",
            "type": "number",
            "format": "int64"
        },
        "meta": {
            "baseName": "meta",
            "type": "HostMeta",
            "format": ""
        },
        "metrics": {
            "baseName": "metrics",
            "type": "HostMetrics",
            "format": ""
        },
        "muteTimeout": {
            "baseName": "mute_timeout",
            "type": "number",
            "format": "int64"
        },
        "name": {
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        "sources": {
            "baseName": "sources",
            "type": "Array<string>",
            "format": ""
        },
        "tagsBySource": {
            "baseName": "tags_by_source",
            "type": "{ [key: string]: Array<string>; }",
            "format": ""
        },
        "up": {
            "baseName": "up",
            "type": "boolean",
            "format": ""
        }
    };
    return Host;
}());
exports.Host = Host;
//# sourceMappingURL=Host.js.map