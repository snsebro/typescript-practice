"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.GraphSnapshot = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Object representing a graph snapshot.
*/
var GraphSnapshot = /** @class */ (function () {
    function GraphSnapshot() {
    }
    GraphSnapshot.getAttributeTypeMap = function () {
        return GraphSnapshot.attributeTypeMap;
    };
    GraphSnapshot.deserialize = function (data) {
        var res = new GraphSnapshot();
        res.graphDef = ObjectSerializer_1.ObjectSerializer.deserialize(data.graph_def, "string", "");
        res.metricQuery = ObjectSerializer_1.ObjectSerializer.deserialize(data.metric_query, "string", "");
        res.snapshotUrl = ObjectSerializer_1.ObjectSerializer.deserialize(data.snapshot_url, "string", "");
        return res;
    };
    GraphSnapshot.serialize = function (data) {
        var attributeTypes = GraphSnapshot.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.graph_def = ObjectSerializer_1.ObjectSerializer.serialize(data.graphDef, "string", "");
        res.metric_query = ObjectSerializer_1.ObjectSerializer.serialize(data.metricQuery, "string", "");
        res.snapshot_url = ObjectSerializer_1.ObjectSerializer.serialize(data.snapshotUrl, "string", "");
        return res;
    };
    GraphSnapshot.discriminator = undefined;
    GraphSnapshot.attributeTypeMap = {
        "graphDef": {
            "baseName": "graph_def",
            "type": "string",
            "format": ""
        },
        "metricQuery": {
            "baseName": "metric_query",
            "type": "string",
            "format": ""
        },
        "snapshotUrl": {
            "baseName": "snapshot_url",
            "type": "string",
            "format": ""
        }
    };
    return GraphSnapshot;
}());
exports.GraphSnapshot = GraphSnapshot;
//# sourceMappingURL=GraphSnapshot.js.map