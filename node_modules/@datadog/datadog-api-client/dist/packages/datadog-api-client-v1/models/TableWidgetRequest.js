"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TableWidgetRequest = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Updated table widget.
*/
var TableWidgetRequest = /** @class */ (function () {
    function TableWidgetRequest() {
    }
    TableWidgetRequest.getAttributeTypeMap = function () {
        return TableWidgetRequest.attributeTypeMap;
    };
    TableWidgetRequest.deserialize = function (data) {
        var res = new TableWidgetRequest();
        if (['avg', 'last', 'max', 'min', 'sum', undefined].includes(data.aggregator)) {
            res.aggregator = data.aggregator;
        }
        else {
            throw TypeError("invalid enum value " + data.aggregator + " for aggregator");
        }
        res.alias = ObjectSerializer_1.ObjectSerializer.deserialize(data.alias, "string", "");
        res.apmQuery = ObjectSerializer_1.ObjectSerializer.deserialize(data.apm_query, "LogQueryDefinition", "");
        res.apmStatsQuery = ObjectSerializer_1.ObjectSerializer.deserialize(data.apm_stats_query, "ApmStatsQueryDefinition", "");
        res.cellDisplayMode = ObjectSerializer_1.ObjectSerializer.deserialize(data.cell_display_mode, "Array<TableWidgetCellDisplayMode>", "");
        res.conditionalFormats = ObjectSerializer_1.ObjectSerializer.deserialize(data.conditional_formats, "Array<WidgetConditionalFormat>", "");
        res.eventQuery = ObjectSerializer_1.ObjectSerializer.deserialize(data.event_query, "LogQueryDefinition", "");
        res.limit = ObjectSerializer_1.ObjectSerializer.deserialize(data.limit, "number", "int64");
        res.logQuery = ObjectSerializer_1.ObjectSerializer.deserialize(data.log_query, "LogQueryDefinition", "");
        res.networkQuery = ObjectSerializer_1.ObjectSerializer.deserialize(data.network_query, "LogQueryDefinition", "");
        if (['asc', 'desc', undefined].includes(data.order)) {
            res.order = data.order;
        }
        else {
            throw TypeError("invalid enum value " + data.order + " for order");
        }
        res.processQuery = ObjectSerializer_1.ObjectSerializer.deserialize(data.process_query, "ProcessQueryDefinition", "");
        res.profileMetricsQuery = ObjectSerializer_1.ObjectSerializer.deserialize(data.profile_metrics_query, "LogQueryDefinition", "");
        res.q = ObjectSerializer_1.ObjectSerializer.deserialize(data.q, "string", "");
        res.rumQuery = ObjectSerializer_1.ObjectSerializer.deserialize(data.rum_query, "LogQueryDefinition", "");
        res.securityQuery = ObjectSerializer_1.ObjectSerializer.deserialize(data.security_query, "LogQueryDefinition", "");
        return res;
    };
    TableWidgetRequest.serialize = function (data) {
        var attributeTypes = TableWidgetRequest.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        if (['avg', 'last', 'max', 'min', 'sum', undefined].includes(data.aggregator)) {
            res.aggregator = data.aggregator;
        }
        else {
            throw TypeError("invalid enum value " + data.aggregator + " for aggregator");
        }
        res.alias = ObjectSerializer_1.ObjectSerializer.serialize(data.alias, "string", "");
        res.apm_query = ObjectSerializer_1.ObjectSerializer.serialize(data.apmQuery, "LogQueryDefinition", "");
        res.apm_stats_query = ObjectSerializer_1.ObjectSerializer.serialize(data.apmStatsQuery, "ApmStatsQueryDefinition", "");
        res.cell_display_mode = ObjectSerializer_1.ObjectSerializer.serialize(data.cellDisplayMode, "Array<TableWidgetCellDisplayMode>", "");
        res.conditional_formats = ObjectSerializer_1.ObjectSerializer.serialize(data.conditionalFormats, "Array<WidgetConditionalFormat>", "");
        res.event_query = ObjectSerializer_1.ObjectSerializer.serialize(data.eventQuery, "LogQueryDefinition", "");
        res.limit = ObjectSerializer_1.ObjectSerializer.serialize(data.limit, "number", "int64");
        res.log_query = ObjectSerializer_1.ObjectSerializer.serialize(data.logQuery, "LogQueryDefinition", "");
        res.network_query = ObjectSerializer_1.ObjectSerializer.serialize(data.networkQuery, "LogQueryDefinition", "");
        if (['asc', 'desc', undefined].includes(data.order)) {
            res.order = data.order;
        }
        else {
            throw TypeError("invalid enum value " + data.order + " for order");
        }
        res.process_query = ObjectSerializer_1.ObjectSerializer.serialize(data.processQuery, "ProcessQueryDefinition", "");
        res.profile_metrics_query = ObjectSerializer_1.ObjectSerializer.serialize(data.profileMetricsQuery, "LogQueryDefinition", "");
        res.q = ObjectSerializer_1.ObjectSerializer.serialize(data.q, "string", "");
        res.rum_query = ObjectSerializer_1.ObjectSerializer.serialize(data.rumQuery, "LogQueryDefinition", "");
        res.security_query = ObjectSerializer_1.ObjectSerializer.serialize(data.securityQuery, "LogQueryDefinition", "");
        return res;
    };
    TableWidgetRequest.discriminator = undefined;
    TableWidgetRequest.attributeTypeMap = {
        "aggregator": {
            "baseName": "aggregator",
            "type": "WidgetAggregator",
            "format": ""
        },
        "alias": {
            "baseName": "alias",
            "type": "string",
            "format": ""
        },
        "apmQuery": {
            "baseName": "apm_query",
            "type": "LogQueryDefinition",
            "format": ""
        },
        "apmStatsQuery": {
            "baseName": "apm_stats_query",
            "type": "ApmStatsQueryDefinition",
            "format": ""
        },
        "cellDisplayMode": {
            "baseName": "cell_display_mode",
            "type": "Array<TableWidgetCellDisplayMode>",
            "format": ""
        },
        "conditionalFormats": {
            "baseName": "conditional_formats",
            "type": "Array<WidgetConditionalFormat>",
            "format": ""
        },
        "eventQuery": {
            "baseName": "event_query",
            "type": "LogQueryDefinition",
            "format": ""
        },
        "limit": {
            "baseName": "limit",
            "type": "number",
            "format": "int64"
        },
        "logQuery": {
            "baseName": "log_query",
            "type": "LogQueryDefinition",
            "format": ""
        },
        "networkQuery": {
            "baseName": "network_query",
            "type": "LogQueryDefinition",
            "format": ""
        },
        "order": {
            "baseName": "order",
            "type": "WidgetSort",
            "format": ""
        },
        "processQuery": {
            "baseName": "process_query",
            "type": "ProcessQueryDefinition",
            "format": ""
        },
        "profileMetricsQuery": {
            "baseName": "profile_metrics_query",
            "type": "LogQueryDefinition",
            "format": ""
        },
        "q": {
            "baseName": "q",
            "type": "string",
            "format": ""
        },
        "rumQuery": {
            "baseName": "rum_query",
            "type": "LogQueryDefinition",
            "format": ""
        },
        "securityQuery": {
            "baseName": "security_query",
            "type": "LogQueryDefinition",
            "format": ""
        }
    };
    return TableWidgetRequest;
}());
exports.TableWidgetRequest = TableWidgetRequest;
//# sourceMappingURL=TableWidgetRequest.js.map