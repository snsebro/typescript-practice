"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyntheticsStepDetailWarning = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Object collecting warnings for a given step.
*/
var SyntheticsStepDetailWarning = /** @class */ (function () {
    function SyntheticsStepDetailWarning() {
    }
    SyntheticsStepDetailWarning.getAttributeTypeMap = function () {
        return SyntheticsStepDetailWarning.attributeTypeMap;
    };
    SyntheticsStepDetailWarning.deserialize = function (data) {
        var res = new SyntheticsStepDetailWarning();
        if (data.message === undefined) {
            throw new TypeError("missing required attribute 'message' on 'SyntheticsStepDetailWarning' object");
        }
        res.message = ObjectSerializer_1.ObjectSerializer.deserialize(data.message, "string", "");
        if (data.type === undefined) {
            throw new TypeError("missing required attribute 'type' on 'SyntheticsStepDetailWarning' object");
        }
        if (['user_locator', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        return res;
    };
    SyntheticsStepDetailWarning.serialize = function (data) {
        var attributeTypes = SyntheticsStepDetailWarning.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        if (data.message === undefined) {
            throw new TypeError("missing required attribute 'message' on 'SyntheticsStepDetailWarning' object");
        }
        res.message = ObjectSerializer_1.ObjectSerializer.serialize(data.message, "string", "");
        if (data.type === undefined) {
            throw new TypeError("missing required attribute 'type' on 'SyntheticsStepDetailWarning' object");
        }
        if (['user_locator', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        return res;
    };
    SyntheticsStepDetailWarning.discriminator = undefined;
    SyntheticsStepDetailWarning.attributeTypeMap = {
        "message": {
            "baseName": "message",
            "type": "string",
            "format": ""
        },
        "type": {
            "baseName": "type",
            "type": "SyntheticsWarningType",
            "format": ""
        }
    };
    return SyntheticsStepDetailWarning;
}());
exports.SyntheticsStepDetailWarning = SyntheticsStepDetailWarning;
//# sourceMappingURL=SyntheticsStepDetailWarning.js.map