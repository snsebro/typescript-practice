"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyntheticsAPITestResultData = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Object containing results for your Synthetic API test.
*/
var SyntheticsAPITestResultData = /** @class */ (function () {
    function SyntheticsAPITestResultData() {
    }
    SyntheticsAPITestResultData.getAttributeTypeMap = function () {
        return SyntheticsAPITestResultData.attributeTypeMap;
    };
    SyntheticsAPITestResultData.deserialize = function (data) {
        var res = new SyntheticsAPITestResultData();
        res.cert = ObjectSerializer_1.ObjectSerializer.deserialize(data.cert, "SyntheticsSSLCertificate", "");
        if (['NO_ERROR', 'UNKNOWN', 'DNS', 'SSL', 'TIMEOUT', 'DENIED', 'INCORRECT_ASSERTION', undefined].includes(data.errorCode)) {
            res.errorCode = data.errorCode;
        }
        else {
            throw TypeError("invalid enum value " + data.errorCode + " for errorCode");
        }
        res.errorMessage = ObjectSerializer_1.ObjectSerializer.deserialize(data.errorMessage, "string", "");
        if (['not_scheduled', 'scheduled', 'started', 'finished', 'finished_with_error', undefined].includes(data.eventType)) {
            res.eventType = data.eventType;
        }
        else {
            throw TypeError("invalid enum value " + data.eventType + " for eventType");
        }
        res.httpStatusCode = ObjectSerializer_1.ObjectSerializer.deserialize(data.httpStatusCode, "number", "int64");
        res.requestHeaders = ObjectSerializer_1.ObjectSerializer.deserialize(data.requestHeaders, "{ [key: string]: any; }", "");
        res.responseBody = ObjectSerializer_1.ObjectSerializer.deserialize(data.responseBody, "string", "");
        res.responseHeaders = ObjectSerializer_1.ObjectSerializer.deserialize(data.responseHeaders, "{ [key: string]: any; }", "");
        res.responseSize = ObjectSerializer_1.ObjectSerializer.deserialize(data.responseSize, "number", "int64");
        res.timings = ObjectSerializer_1.ObjectSerializer.deserialize(data.timings, "SyntheticsTiming", "");
        return res;
    };
    SyntheticsAPITestResultData.serialize = function (data) {
        var attributeTypes = SyntheticsAPITestResultData.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.cert = ObjectSerializer_1.ObjectSerializer.serialize(data.cert, "SyntheticsSSLCertificate", "");
        if (['NO_ERROR', 'UNKNOWN', 'DNS', 'SSL', 'TIMEOUT', 'DENIED', 'INCORRECT_ASSERTION', undefined].includes(data.errorCode)) {
            res.errorCode = data.errorCode;
        }
        else {
            throw TypeError("invalid enum value " + data.errorCode + " for errorCode");
        }
        res.errorMessage = ObjectSerializer_1.ObjectSerializer.serialize(data.errorMessage, "string", "");
        if (['not_scheduled', 'scheduled', 'started', 'finished', 'finished_with_error', undefined].includes(data.eventType)) {
            res.eventType = data.eventType;
        }
        else {
            throw TypeError("invalid enum value " + data.eventType + " for eventType");
        }
        res.httpStatusCode = ObjectSerializer_1.ObjectSerializer.serialize(data.httpStatusCode, "number", "int64");
        res.requestHeaders = ObjectSerializer_1.ObjectSerializer.serialize(data.requestHeaders, "{ [key: string]: any; }", "");
        res.responseBody = ObjectSerializer_1.ObjectSerializer.serialize(data.responseBody, "string", "");
        res.responseHeaders = ObjectSerializer_1.ObjectSerializer.serialize(data.responseHeaders, "{ [key: string]: any; }", "");
        res.responseSize = ObjectSerializer_1.ObjectSerializer.serialize(data.responseSize, "number", "int64");
        res.timings = ObjectSerializer_1.ObjectSerializer.serialize(data.timings, "SyntheticsTiming", "");
        return res;
    };
    SyntheticsAPITestResultData.discriminator = undefined;
    SyntheticsAPITestResultData.attributeTypeMap = {
        "cert": {
            "baseName": "cert",
            "type": "SyntheticsSSLCertificate",
            "format": ""
        },
        "errorCode": {
            "baseName": "errorCode",
            "type": "SyntheticsErrorCode",
            "format": ""
        },
        "errorMessage": {
            "baseName": "errorMessage",
            "type": "string",
            "format": ""
        },
        "eventType": {
            "baseName": "eventType",
            "type": "SyntheticsTestProcessStatus",
            "format": ""
        },
        "httpStatusCode": {
            "baseName": "httpStatusCode",
            "type": "number",
            "format": "int64"
        },
        "requestHeaders": {
            "baseName": "requestHeaders",
            "type": "{ [key: string]: any; }",
            "format": ""
        },
        "responseBody": {
            "baseName": "responseBody",
            "type": "string",
            "format": ""
        },
        "responseHeaders": {
            "baseName": "responseHeaders",
            "type": "{ [key: string]: any; }",
            "format": ""
        },
        "responseSize": {
            "baseName": "responseSize",
            "type": "number",
            "format": "int64"
        },
        "timings": {
            "baseName": "timings",
            "type": "SyntheticsTiming",
            "format": ""
        }
    };
    return SyntheticsAPITestResultData;
}());
exports.SyntheticsAPITestResultData = SyntheticsAPITestResultData;
//# sourceMappingURL=SyntheticsAPITestResultData.js.map