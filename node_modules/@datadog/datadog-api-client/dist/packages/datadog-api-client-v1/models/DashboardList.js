"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DashboardList = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Your Datadog Dashboards.
*/
var DashboardList = /** @class */ (function () {
    function DashboardList() {
    }
    DashboardList.getAttributeTypeMap = function () {
        return DashboardList.attributeTypeMap;
    };
    DashboardList.deserialize = function (data) {
        var res = new DashboardList();
        res.author = ObjectSerializer_1.ObjectSerializer.deserialize(data.author, "Creator", "");
        res.created = ObjectSerializer_1.ObjectSerializer.deserialize(data.created, "Date", "date-time");
        res.dashboardCount = ObjectSerializer_1.ObjectSerializer.deserialize(data.dashboard_count, "number", "int64");
        res.id = ObjectSerializer_1.ObjectSerializer.deserialize(data.id, "number", "int64");
        res.isFavorite = ObjectSerializer_1.ObjectSerializer.deserialize(data.is_favorite, "boolean", "");
        res.modified = ObjectSerializer_1.ObjectSerializer.deserialize(data.modified, "Date", "date-time");
        if (data.name === undefined) {
            throw new TypeError("missing required attribute 'name' on 'DashboardList' object");
        }
        res.name = ObjectSerializer_1.ObjectSerializer.deserialize(data.name, "string", "");
        res.type = ObjectSerializer_1.ObjectSerializer.deserialize(data.type, "string", "");
        return res;
    };
    DashboardList.serialize = function (data) {
        var attributeTypes = DashboardList.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.author = ObjectSerializer_1.ObjectSerializer.serialize(data.author, "Creator", "");
        res.created = ObjectSerializer_1.ObjectSerializer.serialize(data.created, "Date", "date-time");
        res.dashboard_count = ObjectSerializer_1.ObjectSerializer.serialize(data.dashboardCount, "number", "int64");
        res.id = ObjectSerializer_1.ObjectSerializer.serialize(data.id, "number", "int64");
        res.is_favorite = ObjectSerializer_1.ObjectSerializer.serialize(data.isFavorite, "boolean", "");
        res.modified = ObjectSerializer_1.ObjectSerializer.serialize(data.modified, "Date", "date-time");
        if (data.name === undefined) {
            throw new TypeError("missing required attribute 'name' on 'DashboardList' object");
        }
        res.name = ObjectSerializer_1.ObjectSerializer.serialize(data.name, "string", "");
        res.type = ObjectSerializer_1.ObjectSerializer.serialize(data.type, "string", "");
        return res;
    };
    DashboardList.discriminator = undefined;
    DashboardList.attributeTypeMap = {
        "author": {
            "baseName": "author",
            "type": "Creator",
            "format": ""
        },
        "created": {
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        "dashboardCount": {
            "baseName": "dashboard_count",
            "type": "number",
            "format": "int64"
        },
        "id": {
            "baseName": "id",
            "type": "number",
            "format": "int64"
        },
        "isFavorite": {
            "baseName": "is_favorite",
            "type": "boolean",
            "format": ""
        },
        "modified": {
            "baseName": "modified",
            "type": "Date",
            "format": "date-time"
        },
        "name": {
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        "type": {
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    };
    return DashboardList;
}());
exports.DashboardList = DashboardList;
//# sourceMappingURL=DashboardList.js.map