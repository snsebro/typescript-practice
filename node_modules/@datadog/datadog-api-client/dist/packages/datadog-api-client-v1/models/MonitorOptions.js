"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MonitorOptions = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* List of options associated with your monitor.
*/
var MonitorOptions = /** @class */ (function () {
    function MonitorOptions() {
    }
    MonitorOptions.getAttributeTypeMap = function () {
        return MonitorOptions.attributeTypeMap;
    };
    MonitorOptions.deserialize = function (data) {
        var res = new MonitorOptions();
        res.aggregation = ObjectSerializer_1.ObjectSerializer.deserialize(data.aggregation, "MonitorOptionsAggregation", "");
        res.deviceIds = ObjectSerializer_1.ObjectSerializer.deserialize(data.device_ids, "Array<MonitorDeviceID>", "");
        res.enableLogsSample = ObjectSerializer_1.ObjectSerializer.deserialize(data.enable_logs_sample, "boolean", "");
        res.escalationMessage = ObjectSerializer_1.ObjectSerializer.deserialize(data.escalation_message, "string", "");
        res.evaluationDelay = ObjectSerializer_1.ObjectSerializer.deserialize(data.evaluation_delay, "number", "int64");
        res.groupbySimpleMonitor = ObjectSerializer_1.ObjectSerializer.deserialize(data.groupby_simple_monitor, "boolean", "");
        res.includeTags = ObjectSerializer_1.ObjectSerializer.deserialize(data.include_tags, "boolean", "");
        res.locked = ObjectSerializer_1.ObjectSerializer.deserialize(data.locked, "boolean", "");
        res.minFailureDuration = ObjectSerializer_1.ObjectSerializer.deserialize(data.min_failure_duration, "number", "int64");
        res.minLocationFailed = ObjectSerializer_1.ObjectSerializer.deserialize(data.min_location_failed, "number", "int64");
        res.newHostDelay = ObjectSerializer_1.ObjectSerializer.deserialize(data.new_host_delay, "number", "int64");
        res.noDataTimeframe = ObjectSerializer_1.ObjectSerializer.deserialize(data.no_data_timeframe, "number", "int64");
        res.notifyAudit = ObjectSerializer_1.ObjectSerializer.deserialize(data.notify_audit, "boolean", "");
        res.notifyNoData = ObjectSerializer_1.ObjectSerializer.deserialize(data.notify_no_data, "boolean", "");
        res.renotifyInterval = ObjectSerializer_1.ObjectSerializer.deserialize(data.renotify_interval, "number", "int64");
        res.requireFullWindow = ObjectSerializer_1.ObjectSerializer.deserialize(data.require_full_window, "boolean", "");
        res.silenced = ObjectSerializer_1.ObjectSerializer.deserialize(data.silenced, "{ [key: string]: number; }", "int64");
        res.syntheticsCheckId = ObjectSerializer_1.ObjectSerializer.deserialize(data.synthetics_check_id, "string", "");
        res.thresholdWindows = ObjectSerializer_1.ObjectSerializer.deserialize(data.threshold_windows, "MonitorThresholdWindowOptions", "");
        res.thresholds = ObjectSerializer_1.ObjectSerializer.deserialize(data.thresholds, "MonitorThresholds", "");
        res.timeoutH = ObjectSerializer_1.ObjectSerializer.deserialize(data.timeout_h, "number", "int64");
        return res;
    };
    MonitorOptions.serialize = function (data) {
        var attributeTypes = MonitorOptions.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.aggregation = ObjectSerializer_1.ObjectSerializer.serialize(data.aggregation, "MonitorOptionsAggregation", "");
        res.device_ids = ObjectSerializer_1.ObjectSerializer.serialize(data.deviceIds, "Array<MonitorDeviceID>", "");
        res.enable_logs_sample = ObjectSerializer_1.ObjectSerializer.serialize(data.enableLogsSample, "boolean", "");
        res.escalation_message = ObjectSerializer_1.ObjectSerializer.serialize(data.escalationMessage, "string", "");
        res.evaluation_delay = ObjectSerializer_1.ObjectSerializer.serialize(data.evaluationDelay, "number", "int64");
        res.groupby_simple_monitor = ObjectSerializer_1.ObjectSerializer.serialize(data.groupbySimpleMonitor, "boolean", "");
        res.include_tags = ObjectSerializer_1.ObjectSerializer.serialize(data.includeTags, "boolean", "");
        res.locked = ObjectSerializer_1.ObjectSerializer.serialize(data.locked, "boolean", "");
        res.min_failure_duration = ObjectSerializer_1.ObjectSerializer.serialize(data.minFailureDuration, "number", "int64");
        res.min_location_failed = ObjectSerializer_1.ObjectSerializer.serialize(data.minLocationFailed, "number", "int64");
        res.new_host_delay = ObjectSerializer_1.ObjectSerializer.serialize(data.newHostDelay, "number", "int64");
        res.no_data_timeframe = ObjectSerializer_1.ObjectSerializer.serialize(data.noDataTimeframe, "number", "int64");
        res.notify_audit = ObjectSerializer_1.ObjectSerializer.serialize(data.notifyAudit, "boolean", "");
        res.notify_no_data = ObjectSerializer_1.ObjectSerializer.serialize(data.notifyNoData, "boolean", "");
        res.renotify_interval = ObjectSerializer_1.ObjectSerializer.serialize(data.renotifyInterval, "number", "int64");
        res.require_full_window = ObjectSerializer_1.ObjectSerializer.serialize(data.requireFullWindow, "boolean", "");
        res.silenced = ObjectSerializer_1.ObjectSerializer.serialize(data.silenced, "{ [key: string]: number; }", "int64");
        res.synthetics_check_id = ObjectSerializer_1.ObjectSerializer.serialize(data.syntheticsCheckId, "string", "");
        res.threshold_windows = ObjectSerializer_1.ObjectSerializer.serialize(data.thresholdWindows, "MonitorThresholdWindowOptions", "");
        res.thresholds = ObjectSerializer_1.ObjectSerializer.serialize(data.thresholds, "MonitorThresholds", "");
        res.timeout_h = ObjectSerializer_1.ObjectSerializer.serialize(data.timeoutH, "number", "int64");
        return res;
    };
    MonitorOptions.discriminator = undefined;
    MonitorOptions.attributeTypeMap = {
        "aggregation": {
            "baseName": "aggregation",
            "type": "MonitorOptionsAggregation",
            "format": ""
        },
        "deviceIds": {
            "baseName": "device_ids",
            "type": "Array<MonitorDeviceID>",
            "format": ""
        },
        "enableLogsSample": {
            "baseName": "enable_logs_sample",
            "type": "boolean",
            "format": ""
        },
        "escalationMessage": {
            "baseName": "escalation_message",
            "type": "string",
            "format": ""
        },
        "evaluationDelay": {
            "baseName": "evaluation_delay",
            "type": "number",
            "format": "int64"
        },
        "groupbySimpleMonitor": {
            "baseName": "groupby_simple_monitor",
            "type": "boolean",
            "format": ""
        },
        "includeTags": {
            "baseName": "include_tags",
            "type": "boolean",
            "format": ""
        },
        "locked": {
            "baseName": "locked",
            "type": "boolean",
            "format": ""
        },
        "minFailureDuration": {
            "baseName": "min_failure_duration",
            "type": "number",
            "format": "int64"
        },
        "minLocationFailed": {
            "baseName": "min_location_failed",
            "type": "number",
            "format": "int64"
        },
        "newHostDelay": {
            "baseName": "new_host_delay",
            "type": "number",
            "format": "int64"
        },
        "noDataTimeframe": {
            "baseName": "no_data_timeframe",
            "type": "number",
            "format": "int64"
        },
        "notifyAudit": {
            "baseName": "notify_audit",
            "type": "boolean",
            "format": ""
        },
        "notifyNoData": {
            "baseName": "notify_no_data",
            "type": "boolean",
            "format": ""
        },
        "renotifyInterval": {
            "baseName": "renotify_interval",
            "type": "number",
            "format": "int64"
        },
        "requireFullWindow": {
            "baseName": "require_full_window",
            "type": "boolean",
            "format": ""
        },
        "silenced": {
            "baseName": "silenced",
            "type": "{ [key: string]: number; }",
            "format": "int64"
        },
        "syntheticsCheckId": {
            "baseName": "synthetics_check_id",
            "type": "string",
            "format": ""
        },
        "thresholdWindows": {
            "baseName": "threshold_windows",
            "type": "MonitorThresholdWindowOptions",
            "format": ""
        },
        "thresholds": {
            "baseName": "thresholds",
            "type": "MonitorThresholds",
            "format": ""
        },
        "timeoutH": {
            "baseName": "timeout_h",
            "type": "number",
            "format": "int64"
        }
    };
    return MonitorOptions;
}());
exports.MonitorOptions = MonitorOptions;
//# sourceMappingURL=MonitorOptions.js.map