"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormulaAndFunctionEventQueryDefinition = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* A formula and functions events query.
*/
var FormulaAndFunctionEventQueryDefinition = /** @class */ (function () {
    function FormulaAndFunctionEventQueryDefinition() {
    }
    FormulaAndFunctionEventQueryDefinition.getAttributeTypeMap = function () {
        return FormulaAndFunctionEventQueryDefinition.attributeTypeMap;
    };
    FormulaAndFunctionEventQueryDefinition.deserialize = function (data) {
        var res = new FormulaAndFunctionEventQueryDefinition();
        if (data.compute === undefined) {
            throw new TypeError("missing required attribute 'compute' on 'FormulaAndFunctionEventQueryDefinition' object");
        }
        res.compute = ObjectSerializer_1.ObjectSerializer.deserialize(data.compute, "FormulaAndFunctionEventQueryDefinitionCompute", "");
        if (data.data_source === undefined) {
            throw new TypeError("missing required attribute 'data_source' on 'FormulaAndFunctionEventQueryDefinition' object");
        }
        if (['logs', 'spans', 'network', 'rum', 'security_signals', 'profiles', undefined].includes(data.data_source)) {
            res.dataSource = data.data_source;
        }
        else {
            throw TypeError("invalid enum value " + data.data_source + " for data_source");
        }
        res.groupBy = ObjectSerializer_1.ObjectSerializer.deserialize(data.group_by, "Array<FormulaAndFunctionEventQueryGroupBy>", "");
        res.indexes = ObjectSerializer_1.ObjectSerializer.deserialize(data.indexes, "Array<string>", "");
        if (data.name === undefined) {
            throw new TypeError("missing required attribute 'name' on 'FormulaAndFunctionEventQueryDefinition' object");
        }
        res.name = ObjectSerializer_1.ObjectSerializer.deserialize(data.name, "string", "");
        res.search = ObjectSerializer_1.ObjectSerializer.deserialize(data.search, "FormulaAndFunctionEventQueryDefinitionSearch", "");
        return res;
    };
    FormulaAndFunctionEventQueryDefinition.serialize = function (data) {
        var attributeTypes = FormulaAndFunctionEventQueryDefinition.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        if (data.compute === undefined) {
            throw new TypeError("missing required attribute 'compute' on 'FormulaAndFunctionEventQueryDefinition' object");
        }
        res.compute = ObjectSerializer_1.ObjectSerializer.serialize(data.compute, "FormulaAndFunctionEventQueryDefinitionCompute", "");
        if (data.dataSource === undefined) {
            throw new TypeError("missing required attribute 'data_source' on 'FormulaAndFunctionEventQueryDefinition' object");
        }
        if (['logs', 'spans', 'network', 'rum', 'security_signals', 'profiles', undefined].includes(data.dataSource)) {
            res.data_source = data.dataSource;
        }
        else {
            throw TypeError("invalid enum value " + data.dataSource + " for dataSource");
        }
        res.group_by = ObjectSerializer_1.ObjectSerializer.serialize(data.groupBy, "Array<FormulaAndFunctionEventQueryGroupBy>", "");
        res.indexes = ObjectSerializer_1.ObjectSerializer.serialize(data.indexes, "Array<string>", "");
        if (data.name === undefined) {
            throw new TypeError("missing required attribute 'name' on 'FormulaAndFunctionEventQueryDefinition' object");
        }
        res.name = ObjectSerializer_1.ObjectSerializer.serialize(data.name, "string", "");
        res.search = ObjectSerializer_1.ObjectSerializer.serialize(data.search, "FormulaAndFunctionEventQueryDefinitionSearch", "");
        return res;
    };
    FormulaAndFunctionEventQueryDefinition.discriminator = undefined;
    FormulaAndFunctionEventQueryDefinition.attributeTypeMap = {
        "compute": {
            "baseName": "compute",
            "type": "FormulaAndFunctionEventQueryDefinitionCompute",
            "format": ""
        },
        "dataSource": {
            "baseName": "data_source",
            "type": "FormulaAndFunctionEventsDataSource",
            "format": ""
        },
        "groupBy": {
            "baseName": "group_by",
            "type": "Array<FormulaAndFunctionEventQueryGroupBy>",
            "format": ""
        },
        "indexes": {
            "baseName": "indexes",
            "type": "Array<string>",
            "format": ""
        },
        "name": {
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        "search": {
            "baseName": "search",
            "type": "FormulaAndFunctionEventQueryDefinitionSearch",
            "format": ""
        }
    };
    return FormulaAndFunctionEventQueryDefinition;
}());
exports.FormulaAndFunctionEventQueryDefinition = FormulaAndFunctionEventQueryDefinition;
//# sourceMappingURL=FormulaAndFunctionEventQueryDefinition.js.map