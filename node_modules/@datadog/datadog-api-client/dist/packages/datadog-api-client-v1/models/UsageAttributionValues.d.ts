/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
* Fields in Usage Summary by tag(s).
*/
export declare class UsageAttributionValues {
    /**
    * The percentage of synthetic API test usage by tag(s).
    */
    'apiPercentage'?: number;
    /**
    * The synthetic API test usage by tag(s).
    */
    'apiUsage'?: number;
    /**
    * The percentage of APM host usage by tag(s).
    */
    'apmHostPercentage'?: number;
    /**
    * The APM host usage by tag(s).
    */
    'apmHostUsage'?: number;
    /**
    * The percentage of synthetic browser test usage by tag(s).
    */
    'browserPercentage'?: number;
    /**
    * The synthetic browser test usage by tag(s).
    */
    'browserUsage'?: number;
    /**
    * The percentage of container usage by tag(s).
    */
    'containerPercentage'?: number;
    /**
    * The container usage by tag(s).
    */
    'containerUsage'?: number;
    /**
    * The percentage of custom metrics usage by tag(s).
    */
    'customTimeseriesPercentage'?: number;
    /**
    * The custom metrics usage by tag(s).
    */
    'customTimeseriesUsage'?: number;
    /**
    * The percentage of Cloud Workload Security container usage by tag(s)
    */
    'cwsContainerPercentage'?: number;
    /**
    * The Cloud Workload Security container usage by tag(s)
    */
    'cwsContainerUsage'?: number;
    /**
    * The percentage of Cloud Workload Security host usage by tag(s)
    */
    'cwsHostPercentage'?: number;
    /**
    * The Cloud Workload Security host usage by tag(s)
    */
    'cwsHostUsage'?: number;
    /**
    * The percentage of infrastructure host usage by tag(s).
    */
    'infraHostPercentage'?: number;
    /**
    * The infrastructure host usage by tag(s).
    */
    'infraHostUsage'?: number;
    /**
    * The percentage of Lambda function usage by tag(s).
    */
    'lambdaFunctionsPercentage'?: number;
    /**
    * The Lambda function usage by tag(s).
    */
    'lambdaFunctionsUsage'?: number;
    /**
    * The percentage of Lambda invocation usage by tag(s).
    */
    'lambdaInvocationsPercentage'?: number;
    /**
    * The Lambda invocation usage by tag(s).
    */
    'lambdaInvocationsUsage'?: number;
    /**
    * The percentage of Lambda function usage by tag(s).  **Note** this field is deprecated. Use lambda_functions_percentage instead.
    */
    'lambdaPercentage'?: number;
    /**
    * The Lambda function usage by tag(s).  **Note** this field is deprecated. Use lambda_functions_usage instead.
    */
    'lambdaUsage'?: number;
    /**
    * The percentage of network host usage by tag(s).
    */
    'npmHostPercentage'?: number;
    /**
    * The network host usage by tag(s).
    */
    'npmHostUsage'?: number;
    /**
    * The percentage of profiled containers usage by tag(s).
    */
    'profiledContainersPercentage'?: number;
    /**
    * The profiled container usage by tag(s).
    */
    'profiledContainersUsage'?: number;
    /**
    * The percentage of profiled hosts usage by tag(s).
    */
    'profiledHostsPercentage'?: number;
    /**
    * The profiled host usage by tag(s).
    */
    'profiledHostsUsage'?: number;
    /**
    * The percentage of network device usage by tag(s).
    */
    'snmpPercentage'?: number;
    /**
    * The network device usage by tag(s).
    */
    'snmpUsage'?: number;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: {
        [key: string]: {
            baseName: string;
            type: string;
            format: string;
        };
    };
    static getAttributeTypeMap(): {
        [key: string]: {
            baseName: string;
            type: string;
            format: string;
        };
    };
    static deserialize(data: {
        [key: string]: any;
    }): UsageAttributionValues;
    static serialize(data: UsageAttributionValues): {
        [key: string]: any;
    };
    constructor();
}
