"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SLOHistorySLIData = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* An object that holds an SLI value and its associated data. It can represent an SLO's overall SLI value. This can also represent the SLI value for a specific monitor in multi-monitor SLOs, or a group in grouped SLOs.
*/
var SLOHistorySLIData = /** @class */ (function () {
    function SLOHistorySLIData() {
    }
    SLOHistorySLIData.getAttributeTypeMap = function () {
        return SLOHistorySLIData.attributeTypeMap;
    };
    SLOHistorySLIData.deserialize = function (data) {
        var res = new SLOHistorySLIData();
        res.errorBudgetRemaining = ObjectSerializer_1.ObjectSerializer.deserialize(data.error_budget_remaining, "{ [key: string]: number; }", "double");
        res.errors = ObjectSerializer_1.ObjectSerializer.deserialize(data.errors, "Array<SLOHistoryResponseError>", "");
        res.group = ObjectSerializer_1.ObjectSerializer.deserialize(data.group, "string", "");
        res.history = ObjectSerializer_1.ObjectSerializer.deserialize(data.history, "Array<Array<number>>", "double");
        res.monitorModified = ObjectSerializer_1.ObjectSerializer.deserialize(data.monitor_modified, "number", "int64");
        res.monitorType = ObjectSerializer_1.ObjectSerializer.deserialize(data.monitor_type, "string", "");
        res.name = ObjectSerializer_1.ObjectSerializer.deserialize(data.name, "string", "");
        res.precision = ObjectSerializer_1.ObjectSerializer.deserialize(data.precision, "{ [key: string]: number; }", "double");
        res.preview = ObjectSerializer_1.ObjectSerializer.deserialize(data.preview, "boolean", "");
        res.sliValue = ObjectSerializer_1.ObjectSerializer.deserialize(data.sli_value, "number", "double");
        res.spanPrecision = ObjectSerializer_1.ObjectSerializer.deserialize(data.span_precision, "number", "double");
        res.uptime = ObjectSerializer_1.ObjectSerializer.deserialize(data.uptime, "number", "double");
        return res;
    };
    SLOHistorySLIData.serialize = function (data) {
        var attributeTypes = SLOHistorySLIData.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.error_budget_remaining = ObjectSerializer_1.ObjectSerializer.serialize(data.errorBudgetRemaining, "{ [key: string]: number; }", "double");
        res.errors = ObjectSerializer_1.ObjectSerializer.serialize(data.errors, "Array<SLOHistoryResponseError>", "");
        res.group = ObjectSerializer_1.ObjectSerializer.serialize(data.group, "string", "");
        res.history = ObjectSerializer_1.ObjectSerializer.serialize(data.history, "Array<Array<number>>", "double");
        res.monitor_modified = ObjectSerializer_1.ObjectSerializer.serialize(data.monitorModified, "number", "int64");
        res.monitor_type = ObjectSerializer_1.ObjectSerializer.serialize(data.monitorType, "string", "");
        res.name = ObjectSerializer_1.ObjectSerializer.serialize(data.name, "string", "");
        res.precision = ObjectSerializer_1.ObjectSerializer.serialize(data.precision, "{ [key: string]: number; }", "double");
        res.preview = ObjectSerializer_1.ObjectSerializer.serialize(data.preview, "boolean", "");
        res.sli_value = ObjectSerializer_1.ObjectSerializer.serialize(data.sliValue, "number", "double");
        res.span_precision = ObjectSerializer_1.ObjectSerializer.serialize(data.spanPrecision, "number", "double");
        res.uptime = ObjectSerializer_1.ObjectSerializer.serialize(data.uptime, "number", "double");
        return res;
    };
    SLOHistorySLIData.discriminator = undefined;
    SLOHistorySLIData.attributeTypeMap = {
        "errorBudgetRemaining": {
            "baseName": "error_budget_remaining",
            "type": "{ [key: string]: number; }",
            "format": "double"
        },
        "errors": {
            "baseName": "errors",
            "type": "Array<SLOHistoryResponseError>",
            "format": ""
        },
        "group": {
            "baseName": "group",
            "type": "string",
            "format": ""
        },
        "history": {
            "baseName": "history",
            "type": "Array<Array<number>>",
            "format": "double"
        },
        "monitorModified": {
            "baseName": "monitor_modified",
            "type": "number",
            "format": "int64"
        },
        "monitorType": {
            "baseName": "monitor_type",
            "type": "string",
            "format": ""
        },
        "name": {
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        "precision": {
            "baseName": "precision",
            "type": "{ [key: string]: number; }",
            "format": "double"
        },
        "preview": {
            "baseName": "preview",
            "type": "boolean",
            "format": ""
        },
        "sliValue": {
            "baseName": "sli_value",
            "type": "number",
            "format": "double"
        },
        "spanPrecision": {
            "baseName": "span_precision",
            "type": "number",
            "format": "double"
        },
        "uptime": {
            "baseName": "uptime",
            "type": "number",
            "format": "double"
        }
    };
    return SLOHistorySLIData;
}());
exports.SLOHistorySLIData = SLOHistorySLIData;
//# sourceMappingURL=SLOHistorySLIData.js.map