"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NoteWidgetDefinition = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* The notes and links widget is similar to free text widget, but allows for more formatting options.
*/
var NoteWidgetDefinition = /** @class */ (function () {
    function NoteWidgetDefinition() {
    }
    NoteWidgetDefinition.getAttributeTypeMap = function () {
        return NoteWidgetDefinition.attributeTypeMap;
    };
    NoteWidgetDefinition.deserialize = function (data) {
        var res = new NoteWidgetDefinition();
        res.backgroundColor = ObjectSerializer_1.ObjectSerializer.deserialize(data.background_color, "string", "");
        if (data.content === undefined) {
            throw new TypeError("missing required attribute 'content' on 'NoteWidgetDefinition' object");
        }
        res.content = ObjectSerializer_1.ObjectSerializer.deserialize(data.content, "string", "");
        res.fontSize = ObjectSerializer_1.ObjectSerializer.deserialize(data.font_size, "string", "");
        res.hasPadding = ObjectSerializer_1.ObjectSerializer.deserialize(data.has_padding, "boolean", "");
        res.showTick = ObjectSerializer_1.ObjectSerializer.deserialize(data.show_tick, "boolean", "");
        if (['center', 'left', 'right', undefined].includes(data.text_align)) {
            res.textAlign = data.text_align;
        }
        else {
            throw TypeError("invalid enum value " + data.text_align + " for text_align");
        }
        if (['bottom', 'left', 'right', 'top', undefined].includes(data.tick_edge)) {
            res.tickEdge = data.tick_edge;
        }
        else {
            throw TypeError("invalid enum value " + data.tick_edge + " for tick_edge");
        }
        res.tickPos = ObjectSerializer_1.ObjectSerializer.deserialize(data.tick_pos, "string", "");
        if (data.type === undefined) {
            throw new TypeError("missing required attribute 'type' on 'NoteWidgetDefinition' object");
        }
        if (['note', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        if (['center', 'top', 'bottom', undefined].includes(data.vertical_align)) {
            res.verticalAlign = data.vertical_align;
        }
        else {
            throw TypeError("invalid enum value " + data.vertical_align + " for vertical_align");
        }
        return res;
    };
    NoteWidgetDefinition.serialize = function (data) {
        var attributeTypes = NoteWidgetDefinition.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.background_color = ObjectSerializer_1.ObjectSerializer.serialize(data.backgroundColor, "string", "");
        if (data.content === undefined) {
            throw new TypeError("missing required attribute 'content' on 'NoteWidgetDefinition' object");
        }
        res.content = ObjectSerializer_1.ObjectSerializer.serialize(data.content, "string", "");
        res.font_size = ObjectSerializer_1.ObjectSerializer.serialize(data.fontSize, "string", "");
        res.has_padding = ObjectSerializer_1.ObjectSerializer.serialize(data.hasPadding, "boolean", "");
        res.show_tick = ObjectSerializer_1.ObjectSerializer.serialize(data.showTick, "boolean", "");
        if (['center', 'left', 'right', undefined].includes(data.textAlign)) {
            res.text_align = data.textAlign;
        }
        else {
            throw TypeError("invalid enum value " + data.textAlign + " for textAlign");
        }
        if (['bottom', 'left', 'right', 'top', undefined].includes(data.tickEdge)) {
            res.tick_edge = data.tickEdge;
        }
        else {
            throw TypeError("invalid enum value " + data.tickEdge + " for tickEdge");
        }
        res.tick_pos = ObjectSerializer_1.ObjectSerializer.serialize(data.tickPos, "string", "");
        if (data.type === undefined) {
            throw new TypeError("missing required attribute 'type' on 'NoteWidgetDefinition' object");
        }
        if (['note', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        if (['center', 'top', 'bottom', undefined].includes(data.verticalAlign)) {
            res.vertical_align = data.verticalAlign;
        }
        else {
            throw TypeError("invalid enum value " + data.verticalAlign + " for verticalAlign");
        }
        return res;
    };
    NoteWidgetDefinition.discriminator = undefined;
    NoteWidgetDefinition.attributeTypeMap = {
        "backgroundColor": {
            "baseName": "background_color",
            "type": "string",
            "format": ""
        },
        "content": {
            "baseName": "content",
            "type": "string",
            "format": ""
        },
        "fontSize": {
            "baseName": "font_size",
            "type": "string",
            "format": ""
        },
        "hasPadding": {
            "baseName": "has_padding",
            "type": "boolean",
            "format": ""
        },
        "showTick": {
            "baseName": "show_tick",
            "type": "boolean",
            "format": ""
        },
        "textAlign": {
            "baseName": "text_align",
            "type": "WidgetTextAlign",
            "format": ""
        },
        "tickEdge": {
            "baseName": "tick_edge",
            "type": "WidgetTickEdge",
            "format": ""
        },
        "tickPos": {
            "baseName": "tick_pos",
            "type": "string",
            "format": ""
        },
        "type": {
            "baseName": "type",
            "type": "NoteWidgetDefinitionType",
            "format": ""
        },
        "verticalAlign": {
            "baseName": "vertical_align",
            "type": "WidgetVerticalAlign",
            "format": ""
        }
    };
    return NoteWidgetDefinition;
}());
exports.NoteWidgetDefinition = NoteWidgetDefinition;
//# sourceMappingURL=NoteWidgetDefinition.js.map