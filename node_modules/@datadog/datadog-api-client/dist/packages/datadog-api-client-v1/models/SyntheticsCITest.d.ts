/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { SyntheticsBasicAuth } from './SyntheticsBasicAuth';
import { SyntheticsCITestMetadata } from './SyntheticsCITestMetadata';
import { SyntheticsDeviceID } from './SyntheticsDeviceID';
import { SyntheticsTestOptionsRetry } from './SyntheticsTestOptionsRetry';
/**
* Test configuration for Synthetics CI
*/
export declare class SyntheticsCITest {
    /**
    * Disable certificate checks in API tests.
    */
    'allowInsecureCertificates'?: boolean;
    'basicAuth'?: SyntheticsBasicAuth;
    /**
    * Body to include in the test.
    */
    'body'?: string;
    /**
    * Type of the data sent in a synthetics API test.
    */
    'bodyType'?: string;
    /**
    * Cookies for the request.
    */
    'cookies'?: string;
    /**
    * For browser test, array with the different device IDs used to run the test.
    */
    'deviceIds'?: Array<SyntheticsDeviceID>;
    /**
    * For API HTTP test, whether or not the test should follow redirects.
    */
    'followRedirects'?: boolean;
    /**
    * Headers to include when performing the test.
    */
    'headers'?: {
        [key: string]: string;
    };
    /**
    * Array of locations used to run the test.
    */
    'locations'?: Array<string>;
    'metadata'?: SyntheticsCITestMetadata;
    /**
    * The public ID of the Synthetics test to trigger.
    */
    'publicId': string;
    'retry'?: SyntheticsTestOptionsRetry;
    /**
    * Starting URL for the browser test.
    */
    'startUrl'?: string;
    /**
    * Variables to replace in the test.
    */
    'variables'?: {
        [key: string]: string;
    };
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: {
        [key: string]: {
            baseName: string;
            type: string;
            format: string;
        };
    };
    static getAttributeTypeMap(): {
        [key: string]: {
            baseName: string;
            type: string;
            format: string;
        };
    };
    static deserialize(data: {
        [key: string]: any;
    }): SyntheticsCITest;
    static serialize(data: SyntheticsCITest): {
        [key: string]: any;
    };
    constructor();
}
