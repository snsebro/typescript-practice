/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { SyntheticsDeviceID } from './SyntheticsDeviceID';
import { SyntheticsTestOptionsMonitorOptions } from './SyntheticsTestOptionsMonitorOptions';
import { SyntheticsTestOptionsRetry } from './SyntheticsTestOptionsRetry';
import { SyntheticsTickInterval } from './SyntheticsTickInterval';
/**
* Object describing the extra options for a Synthetic test.
*/
export declare class SyntheticsTestOptions {
    /**
    * For SSL test, whether or not the test should allow self signed certificates.
    */
    'acceptSelfSigned'?: boolean;
    /**
    * Allows loading insecure content for an HTTP request.
    */
    'allowInsecure'?: boolean;
    /**
    * For browser test, array with the different device IDs used to run the test.
    */
    'deviceIds'?: Array<SyntheticsDeviceID>;
    /**
    * Whether or not to disable CORS mechanism.
    */
    'disableCors'?: boolean;
    /**
    * For API HTTP test, whether or not the test should follow redirects.
    */
    'followRedirects'?: boolean;
    /**
    * Minimum amount of time in failure required to trigger an alert.
    */
    'minFailureDuration'?: number;
    /**
    * Minimum number of locations in failure required to trigger an alert.
    */
    'minLocationFailed'?: number;
    /**
    * The monitor name is used for the alert title as well as for all monitor dashboard widgets and SLOs.
    */
    'monitorName'?: string;
    'monitorOptions'?: SyntheticsTestOptionsMonitorOptions;
    /**
    * Integer from 1 (high) to 5 (low) indicating alert severity.
    */
    'monitorPriority'?: number;
    /**
    * Prevents saving screenshots of the steps.
    */
    'noScreenshot'?: boolean;
    'retry'?: SyntheticsTestOptionsRetry;
    'tickEvery'?: SyntheticsTickInterval;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: {
        [key: string]: {
            baseName: string;
            type: string;
            format: string;
        };
    };
    static getAttributeTypeMap(): {
        [key: string]: {
            baseName: string;
            type: string;
            format: string;
        };
    };
    static deserialize(data: {
        [key: string]: any;
    }): SyntheticsTestOptions;
    static serialize(data: SyntheticsTestOptions): {
        [key: string]: any;
    };
    constructor();
}
