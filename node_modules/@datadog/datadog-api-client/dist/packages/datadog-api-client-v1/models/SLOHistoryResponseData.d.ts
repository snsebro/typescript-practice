/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { SLOHistoryMetrics } from './SLOHistoryMetrics';
import { SLOHistorySLIData } from './SLOHistorySLIData';
import { SLOThreshold } from './SLOThreshold';
import { SLOType } from './SLOType';
import { SLOTypeNumeric } from './SLOTypeNumeric';
/**
* An array of service level objective objects.
*/
export declare class SLOHistoryResponseData {
    /**
    * The `from` timestamp in epoch seconds.
    */
    'fromTs'?: number;
    /**
    * For `metric` based SLOs where the query includes a group-by clause, this represents the list of grouping parameters.  This is not included in responses for `monitor` based SLOs.
    */
    'groupBy'?: Array<string>;
    /**
    * For grouped SLOs, this represents SLI data for specific groups.  This is not included in the responses for `metric` based SLOs.
    */
    'groups'?: Array<SLOHistorySLIData>;
    /**
    * For multi-monitor SLOs, this represents SLI data for specific monitors.  This is not included in the responses for `metric` based SLOs.
    */
    'monitors'?: Array<SLOHistorySLIData>;
    'overall'?: SLOHistorySLIData;
    'series'?: SLOHistoryMetrics;
    /**
    * mapping of string timeframe to the SLO threshold.
    */
    'thresholds'?: {
        [key: string]: SLOThreshold;
    };
    /**
    * The `to` timestamp in epoch seconds.
    */
    'toTs'?: number;
    'type'?: SLOType;
    'typeId'?: SLOTypeNumeric;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: {
        [key: string]: {
            baseName: string;
            type: string;
            format: string;
        };
    };
    static getAttributeTypeMap(): {
        [key: string]: {
            baseName: string;
            type: string;
            format: string;
        };
    };
    static deserialize(data: {
        [key: string]: any;
    }): SLOHistoryResponseData;
    static serialize(data: SLOHistoryResponseData): {
        [key: string]: any;
    };
    constructor();
}
