"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SLOCorrectionResponseAttributes = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* The attribute object associated with the SLO correction
*/
var SLOCorrectionResponseAttributes = /** @class */ (function () {
    function SLOCorrectionResponseAttributes() {
    }
    SLOCorrectionResponseAttributes.getAttributeTypeMap = function () {
        return SLOCorrectionResponseAttributes.attributeTypeMap;
    };
    SLOCorrectionResponseAttributes.deserialize = function (data) {
        var res = new SLOCorrectionResponseAttributes();
        if (['Scheduled Maintenance', 'Outside Business Hours', 'Deployment', 'Other', undefined].includes(data.category)) {
            res.category = data.category;
        }
        else {
            throw TypeError("invalid enum value " + data.category + " for category");
        }
        res.creator = ObjectSerializer_1.ObjectSerializer.deserialize(data.creator, "Creator", "");
        res.description = ObjectSerializer_1.ObjectSerializer.deserialize(data.description, "string", "");
        res.end = ObjectSerializer_1.ObjectSerializer.deserialize(data.end, "number", "int64");
        res.sloId = ObjectSerializer_1.ObjectSerializer.deserialize(data.slo_id, "string", "");
        res.start = ObjectSerializer_1.ObjectSerializer.deserialize(data.start, "number", "int64");
        res.timezone = ObjectSerializer_1.ObjectSerializer.deserialize(data.timezone, "string", "");
        return res;
    };
    SLOCorrectionResponseAttributes.serialize = function (data) {
        var attributeTypes = SLOCorrectionResponseAttributes.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        if (['Scheduled Maintenance', 'Outside Business Hours', 'Deployment', 'Other', undefined].includes(data.category)) {
            res.category = data.category;
        }
        else {
            throw TypeError("invalid enum value " + data.category + " for category");
        }
        res.creator = ObjectSerializer_1.ObjectSerializer.serialize(data.creator, "Creator", "");
        res.description = ObjectSerializer_1.ObjectSerializer.serialize(data.description, "string", "");
        res.end = ObjectSerializer_1.ObjectSerializer.serialize(data.end, "number", "int64");
        res.slo_id = ObjectSerializer_1.ObjectSerializer.serialize(data.sloId, "string", "");
        res.start = ObjectSerializer_1.ObjectSerializer.serialize(data.start, "number", "int64");
        res.timezone = ObjectSerializer_1.ObjectSerializer.serialize(data.timezone, "string", "");
        return res;
    };
    SLOCorrectionResponseAttributes.discriminator = undefined;
    SLOCorrectionResponseAttributes.attributeTypeMap = {
        "category": {
            "baseName": "category",
            "type": "SLOCorrectionCategory",
            "format": ""
        },
        "creator": {
            "baseName": "creator",
            "type": "Creator",
            "format": ""
        },
        "description": {
            "baseName": "description",
            "type": "string",
            "format": ""
        },
        "end": {
            "baseName": "end",
            "type": "number",
            "format": "int64"
        },
        "sloId": {
            "baseName": "slo_id",
            "type": "string",
            "format": ""
        },
        "start": {
            "baseName": "start",
            "type": "number",
            "format": "int64"
        },
        "timezone": {
            "baseName": "timezone",
            "type": "string",
            "format": ""
        }
    };
    return SLOCorrectionResponseAttributes;
}());
exports.SLOCorrectionResponseAttributes = SLOCorrectionResponseAttributes;
//# sourceMappingURL=SLOCorrectionResponseAttributes.js.map