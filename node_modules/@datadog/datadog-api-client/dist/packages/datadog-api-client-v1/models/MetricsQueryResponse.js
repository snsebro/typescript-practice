"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetricsQueryResponse = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Response Object that includes your query and the list of metrics retrieved.
*/
var MetricsQueryResponse = /** @class */ (function () {
    function MetricsQueryResponse() {
    }
    MetricsQueryResponse.getAttributeTypeMap = function () {
        return MetricsQueryResponse.attributeTypeMap;
    };
    MetricsQueryResponse.deserialize = function (data) {
        var res = new MetricsQueryResponse();
        res.error = ObjectSerializer_1.ObjectSerializer.deserialize(data.error, "string", "");
        res.fromDate = ObjectSerializer_1.ObjectSerializer.deserialize(data.from_date, "number", "int64");
        res.groupBy = ObjectSerializer_1.ObjectSerializer.deserialize(data.group_by, "Array<string>", "");
        res.message = ObjectSerializer_1.ObjectSerializer.deserialize(data.message, "string", "");
        res.query = ObjectSerializer_1.ObjectSerializer.deserialize(data.query, "string", "");
        res.resType = ObjectSerializer_1.ObjectSerializer.deserialize(data.res_type, "string", "");
        res.series = ObjectSerializer_1.ObjectSerializer.deserialize(data.series, "Array<MetricsQueryMetadata>", "");
        res.status = ObjectSerializer_1.ObjectSerializer.deserialize(data.status, "string", "");
        res.toDate = ObjectSerializer_1.ObjectSerializer.deserialize(data.to_date, "number", "int64");
        return res;
    };
    MetricsQueryResponse.serialize = function (data) {
        var attributeTypes = MetricsQueryResponse.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.error = ObjectSerializer_1.ObjectSerializer.serialize(data.error, "string", "");
        res.from_date = ObjectSerializer_1.ObjectSerializer.serialize(data.fromDate, "number", "int64");
        res.group_by = ObjectSerializer_1.ObjectSerializer.serialize(data.groupBy, "Array<string>", "");
        res.message = ObjectSerializer_1.ObjectSerializer.serialize(data.message, "string", "");
        res.query = ObjectSerializer_1.ObjectSerializer.serialize(data.query, "string", "");
        res.res_type = ObjectSerializer_1.ObjectSerializer.serialize(data.resType, "string", "");
        res.series = ObjectSerializer_1.ObjectSerializer.serialize(data.series, "Array<MetricsQueryMetadata>", "");
        res.status = ObjectSerializer_1.ObjectSerializer.serialize(data.status, "string", "");
        res.to_date = ObjectSerializer_1.ObjectSerializer.serialize(data.toDate, "number", "int64");
        return res;
    };
    MetricsQueryResponse.discriminator = undefined;
    MetricsQueryResponse.attributeTypeMap = {
        "error": {
            "baseName": "error",
            "type": "string",
            "format": ""
        },
        "fromDate": {
            "baseName": "from_date",
            "type": "number",
            "format": "int64"
        },
        "groupBy": {
            "baseName": "group_by",
            "type": "Array<string>",
            "format": ""
        },
        "message": {
            "baseName": "message",
            "type": "string",
            "format": ""
        },
        "query": {
            "baseName": "query",
            "type": "string",
            "format": ""
        },
        "resType": {
            "baseName": "res_type",
            "type": "string",
            "format": ""
        },
        "series": {
            "baseName": "series",
            "type": "Array<MetricsQueryMetadata>",
            "format": ""
        },
        "status": {
            "baseName": "status",
            "type": "string",
            "format": ""
        },
        "toDate": {
            "baseName": "to_date",
            "type": "number",
            "format": "int64"
        }
    };
    return MetricsQueryResponse;
}());
exports.MetricsQueryResponse = MetricsQueryResponse;
//# sourceMappingURL=MetricsQueryResponse.js.map