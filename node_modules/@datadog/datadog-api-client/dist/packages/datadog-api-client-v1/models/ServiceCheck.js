"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceCheck = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* An object containing service check and status.
*/
var ServiceCheck = /** @class */ (function () {
    function ServiceCheck() {
    }
    ServiceCheck.getAttributeTypeMap = function () {
        return ServiceCheck.attributeTypeMap;
    };
    ServiceCheck.deserialize = function (data) {
        var res = new ServiceCheck();
        if (data.check === undefined) {
            throw new TypeError("missing required attribute 'check' on 'ServiceCheck' object");
        }
        res.check = ObjectSerializer_1.ObjectSerializer.deserialize(data.check, "string", "");
        if (data.host_name === undefined) {
            throw new TypeError("missing required attribute 'host_name' on 'ServiceCheck' object");
        }
        res.hostName = ObjectSerializer_1.ObjectSerializer.deserialize(data.host_name, "string", "");
        res.message = ObjectSerializer_1.ObjectSerializer.deserialize(data.message, "string", "");
        if (data.status === undefined) {
            throw new TypeError("missing required attribute 'status' on 'ServiceCheck' object");
        }
        if ([0, 1, 2, 3, undefined].includes(data.status)) {
            res.status = data.status;
        }
        else {
            throw TypeError("invalid enum value " + data.status + " for status");
        }
        if (data.tags === undefined) {
            throw new TypeError("missing required attribute 'tags' on 'ServiceCheck' object");
        }
        res.tags = ObjectSerializer_1.ObjectSerializer.deserialize(data.tags, "Array<string>", "");
        res.timestamp = ObjectSerializer_1.ObjectSerializer.deserialize(data.timestamp, "number", "int64");
        return res;
    };
    ServiceCheck.serialize = function (data) {
        var attributeTypes = ServiceCheck.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        if (data.check === undefined) {
            throw new TypeError("missing required attribute 'check' on 'ServiceCheck' object");
        }
        res.check = ObjectSerializer_1.ObjectSerializer.serialize(data.check, "string", "");
        if (data.hostName === undefined) {
            throw new TypeError("missing required attribute 'host_name' on 'ServiceCheck' object");
        }
        res.host_name = ObjectSerializer_1.ObjectSerializer.serialize(data.hostName, "string", "");
        res.message = ObjectSerializer_1.ObjectSerializer.serialize(data.message, "string", "");
        if (data.status === undefined) {
            throw new TypeError("missing required attribute 'status' on 'ServiceCheck' object");
        }
        if ([0, 1, 2, 3, undefined].includes(data.status)) {
            res.status = data.status;
        }
        else {
            throw TypeError("invalid enum value " + data.status + " for status");
        }
        if (data.tags === undefined) {
            throw new TypeError("missing required attribute 'tags' on 'ServiceCheck' object");
        }
        res.tags = ObjectSerializer_1.ObjectSerializer.serialize(data.tags, "Array<string>", "");
        res.timestamp = ObjectSerializer_1.ObjectSerializer.serialize(data.timestamp, "number", "int64");
        return res;
    };
    ServiceCheck.discriminator = undefined;
    ServiceCheck.attributeTypeMap = {
        "check": {
            "baseName": "check",
            "type": "string",
            "format": ""
        },
        "hostName": {
            "baseName": "host_name",
            "type": "string",
            "format": ""
        },
        "message": {
            "baseName": "message",
            "type": "string",
            "format": ""
        },
        "status": {
            "baseName": "status",
            "type": "ServiceCheckStatus",
            "format": ""
        },
        "tags": {
            "baseName": "tags",
            "type": "Array<string>",
            "format": ""
        },
        "timestamp": {
            "baseName": "timestamp",
            "type": "number",
            "format": "int64"
        }
    };
    return ServiceCheck;
}());
exports.ServiceCheck = ServiceCheck;
//# sourceMappingURL=ServiceCheck.js.map