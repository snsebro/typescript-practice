"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogsStringBuilderProcessor = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Use the string builder processor to add a new attribute (without spaces or special characters) to a log with the result of the provided template. This enables aggregation of different attributes or raw strings into a single attribute.  The template is defined by both raw text and blocks with the syntax `%{attribute_path}`.  **Notes**:  - The processor only accepts attributes with values or an array of values in the blocks. - If an attribute cannot be used (object or array of object),   it is replaced by an empty string or the entire operation is skipped depending on your selection. - If the target attribute already exists, it is overwritten by the result of the template. - Results of the template cannot exceed 256 characters.
*/
var LogsStringBuilderProcessor = /** @class */ (function () {
    function LogsStringBuilderProcessor() {
    }
    LogsStringBuilderProcessor.getAttributeTypeMap = function () {
        return LogsStringBuilderProcessor.attributeTypeMap;
    };
    LogsStringBuilderProcessor.deserialize = function (data) {
        var res = new LogsStringBuilderProcessor();
        res.isEnabled = ObjectSerializer_1.ObjectSerializer.deserialize(data.is_enabled, "boolean", "");
        res.isReplaceMissing = ObjectSerializer_1.ObjectSerializer.deserialize(data.is_replace_missing, "boolean", "");
        res.name = ObjectSerializer_1.ObjectSerializer.deserialize(data.name, "string", "");
        if (data.target === undefined) {
            throw new TypeError("missing required attribute 'target' on 'LogsStringBuilderProcessor' object");
        }
        res.target = ObjectSerializer_1.ObjectSerializer.deserialize(data.target, "string", "");
        if (data.template === undefined) {
            throw new TypeError("missing required attribute 'template' on 'LogsStringBuilderProcessor' object");
        }
        res.template = ObjectSerializer_1.ObjectSerializer.deserialize(data.template, "string", "");
        if (data.type === undefined) {
            throw new TypeError("missing required attribute 'type' on 'LogsStringBuilderProcessor' object");
        }
        if (['string-builder-processor', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        return res;
    };
    LogsStringBuilderProcessor.serialize = function (data) {
        var attributeTypes = LogsStringBuilderProcessor.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.is_enabled = ObjectSerializer_1.ObjectSerializer.serialize(data.isEnabled, "boolean", "");
        res.is_replace_missing = ObjectSerializer_1.ObjectSerializer.serialize(data.isReplaceMissing, "boolean", "");
        res.name = ObjectSerializer_1.ObjectSerializer.serialize(data.name, "string", "");
        if (data.target === undefined) {
            throw new TypeError("missing required attribute 'target' on 'LogsStringBuilderProcessor' object");
        }
        res.target = ObjectSerializer_1.ObjectSerializer.serialize(data.target, "string", "");
        if (data.template === undefined) {
            throw new TypeError("missing required attribute 'template' on 'LogsStringBuilderProcessor' object");
        }
        res.template = ObjectSerializer_1.ObjectSerializer.serialize(data.template, "string", "");
        if (data.type === undefined) {
            throw new TypeError("missing required attribute 'type' on 'LogsStringBuilderProcessor' object");
        }
        if (['string-builder-processor', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        return res;
    };
    LogsStringBuilderProcessor.discriminator = undefined;
    LogsStringBuilderProcessor.attributeTypeMap = {
        "isEnabled": {
            "baseName": "is_enabled",
            "type": "boolean",
            "format": ""
        },
        "isReplaceMissing": {
            "baseName": "is_replace_missing",
            "type": "boolean",
            "format": ""
        },
        "name": {
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        "target": {
            "baseName": "target",
            "type": "string",
            "format": ""
        },
        "template": {
            "baseName": "template",
            "type": "string",
            "format": ""
        },
        "type": {
            "baseName": "type",
            "type": "LogsStringBuilderProcessorType",
            "format": ""
        }
    };
    return LogsStringBuilderProcessor;
}());
exports.LogsStringBuilderProcessor = LogsStringBuilderProcessor;
//# sourceMappingURL=LogsStringBuilderProcessor.js.map