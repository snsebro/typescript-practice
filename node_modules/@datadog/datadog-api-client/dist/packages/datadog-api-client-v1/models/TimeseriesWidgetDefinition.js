"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeseriesWidgetDefinition = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* The timeseries visualization allows you to display the evolution of one or more metrics, log events, or Indexed Spans over time.
*/
var TimeseriesWidgetDefinition = /** @class */ (function () {
    function TimeseriesWidgetDefinition() {
    }
    TimeseriesWidgetDefinition.getAttributeTypeMap = function () {
        return TimeseriesWidgetDefinition.attributeTypeMap;
    };
    TimeseriesWidgetDefinition.deserialize = function (data) {
        var res = new TimeseriesWidgetDefinition();
        res.customLinks = ObjectSerializer_1.ObjectSerializer.deserialize(data.custom_links, "Array<WidgetCustomLink>", "");
        res.events = ObjectSerializer_1.ObjectSerializer.deserialize(data.events, "Array<WidgetEvent>", "");
        res.legendColumns = ObjectSerializer_1.ObjectSerializer.deserialize(data.legend_columns, "Array<TimeseriesWidgetLegendColumn>", "");
        if (['auto', 'horizontal', 'vertical', undefined].includes(data.legend_layout)) {
            res.legendLayout = data.legend_layout;
        }
        else {
            throw TypeError("invalid enum value " + data.legend_layout + " for legend_layout");
        }
        res.legendSize = ObjectSerializer_1.ObjectSerializer.deserialize(data.legend_size, "string", "");
        res.markers = ObjectSerializer_1.ObjectSerializer.deserialize(data.markers, "Array<WidgetMarker>", "");
        if (data.requests === undefined) {
            throw new TypeError("missing required attribute 'requests' on 'TimeseriesWidgetDefinition' object");
        }
        res.requests = ObjectSerializer_1.ObjectSerializer.deserialize(data.requests, "Array<TimeseriesWidgetRequest>", "");
        res.rightYaxis = ObjectSerializer_1.ObjectSerializer.deserialize(data.right_yaxis, "WidgetAxis", "");
        res.showLegend = ObjectSerializer_1.ObjectSerializer.deserialize(data.show_legend, "boolean", "");
        res.time = ObjectSerializer_1.ObjectSerializer.deserialize(data.time, "WidgetTime", "");
        res.title = ObjectSerializer_1.ObjectSerializer.deserialize(data.title, "string", "");
        if (['center', 'left', 'right', undefined].includes(data.title_align)) {
            res.titleAlign = data.title_align;
        }
        else {
            throw TypeError("invalid enum value " + data.title_align + " for title_align");
        }
        res.titleSize = ObjectSerializer_1.ObjectSerializer.deserialize(data.title_size, "string", "");
        if (data.type === undefined) {
            throw new TypeError("missing required attribute 'type' on 'TimeseriesWidgetDefinition' object");
        }
        if (['timeseries', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        res.yaxis = ObjectSerializer_1.ObjectSerializer.deserialize(data.yaxis, "WidgetAxis", "");
        return res;
    };
    TimeseriesWidgetDefinition.serialize = function (data) {
        var attributeTypes = TimeseriesWidgetDefinition.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.custom_links = ObjectSerializer_1.ObjectSerializer.serialize(data.customLinks, "Array<WidgetCustomLink>", "");
        res.events = ObjectSerializer_1.ObjectSerializer.serialize(data.events, "Array<WidgetEvent>", "");
        res.legend_columns = ObjectSerializer_1.ObjectSerializer.serialize(data.legendColumns, "Array<TimeseriesWidgetLegendColumn>", "");
        if (['auto', 'horizontal', 'vertical', undefined].includes(data.legendLayout)) {
            res.legend_layout = data.legendLayout;
        }
        else {
            throw TypeError("invalid enum value " + data.legendLayout + " for legendLayout");
        }
        res.legend_size = ObjectSerializer_1.ObjectSerializer.serialize(data.legendSize, "string", "");
        res.markers = ObjectSerializer_1.ObjectSerializer.serialize(data.markers, "Array<WidgetMarker>", "");
        if (data.requests === undefined) {
            throw new TypeError("missing required attribute 'requests' on 'TimeseriesWidgetDefinition' object");
        }
        res.requests = ObjectSerializer_1.ObjectSerializer.serialize(data.requests, "Array<TimeseriesWidgetRequest>", "");
        res.right_yaxis = ObjectSerializer_1.ObjectSerializer.serialize(data.rightYaxis, "WidgetAxis", "");
        res.show_legend = ObjectSerializer_1.ObjectSerializer.serialize(data.showLegend, "boolean", "");
        res.time = ObjectSerializer_1.ObjectSerializer.serialize(data.time, "WidgetTime", "");
        res.title = ObjectSerializer_1.ObjectSerializer.serialize(data.title, "string", "");
        if (['center', 'left', 'right', undefined].includes(data.titleAlign)) {
            res.title_align = data.titleAlign;
        }
        else {
            throw TypeError("invalid enum value " + data.titleAlign + " for titleAlign");
        }
        res.title_size = ObjectSerializer_1.ObjectSerializer.serialize(data.titleSize, "string", "");
        if (data.type === undefined) {
            throw new TypeError("missing required attribute 'type' on 'TimeseriesWidgetDefinition' object");
        }
        if (['timeseries', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        res.yaxis = ObjectSerializer_1.ObjectSerializer.serialize(data.yaxis, "WidgetAxis", "");
        return res;
    };
    TimeseriesWidgetDefinition.discriminator = undefined;
    TimeseriesWidgetDefinition.attributeTypeMap = {
        "customLinks": {
            "baseName": "custom_links",
            "type": "Array<WidgetCustomLink>",
            "format": ""
        },
        "events": {
            "baseName": "events",
            "type": "Array<WidgetEvent>",
            "format": ""
        },
        "legendColumns": {
            "baseName": "legend_columns",
            "type": "Array<TimeseriesWidgetLegendColumn>",
            "format": ""
        },
        "legendLayout": {
            "baseName": "legend_layout",
            "type": "TimeseriesWidgetLegendLayout",
            "format": ""
        },
        "legendSize": {
            "baseName": "legend_size",
            "type": "string",
            "format": ""
        },
        "markers": {
            "baseName": "markers",
            "type": "Array<WidgetMarker>",
            "format": ""
        },
        "requests": {
            "baseName": "requests",
            "type": "Array<TimeseriesWidgetRequest>",
            "format": ""
        },
        "rightYaxis": {
            "baseName": "right_yaxis",
            "type": "WidgetAxis",
            "format": ""
        },
        "showLegend": {
            "baseName": "show_legend",
            "type": "boolean",
            "format": ""
        },
        "time": {
            "baseName": "time",
            "type": "WidgetTime",
            "format": ""
        },
        "title": {
            "baseName": "title",
            "type": "string",
            "format": ""
        },
        "titleAlign": {
            "baseName": "title_align",
            "type": "WidgetTextAlign",
            "format": ""
        },
        "titleSize": {
            "baseName": "title_size",
            "type": "string",
            "format": ""
        },
        "type": {
            "baseName": "type",
            "type": "TimeseriesWidgetDefinitionType",
            "format": ""
        },
        "yaxis": {
            "baseName": "yaxis",
            "type": "WidgetAxis",
            "format": ""
        }
    };
    return TimeseriesWidgetDefinition;
}());
exports.TimeseriesWidgetDefinition = TimeseriesWidgetDefinition;
//# sourceMappingURL=TimeseriesWidgetDefinition.js.map