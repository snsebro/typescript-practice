"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MonitorSearchResponse = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* The response form a monitor search.
*/
var MonitorSearchResponse = /** @class */ (function () {
    function MonitorSearchResponse() {
    }
    MonitorSearchResponse.getAttributeTypeMap = function () {
        return MonitorSearchResponse.attributeTypeMap;
    };
    MonitorSearchResponse.deserialize = function (data) {
        var res = new MonitorSearchResponse();
        res.counts = ObjectSerializer_1.ObjectSerializer.deserialize(data.counts, "MonitorSearchResponseCounts", "");
        res.metadata = ObjectSerializer_1.ObjectSerializer.deserialize(data.metadata, "MonitorSearchResponseMetadata", "");
        res.monitors = ObjectSerializer_1.ObjectSerializer.deserialize(data.monitors, "Array<MonitorSearchResult>", "");
        return res;
    };
    MonitorSearchResponse.serialize = function (data) {
        var attributeTypes = MonitorSearchResponse.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.counts = ObjectSerializer_1.ObjectSerializer.serialize(data.counts, "MonitorSearchResponseCounts", "");
        res.metadata = ObjectSerializer_1.ObjectSerializer.serialize(data.metadata, "MonitorSearchResponseMetadata", "");
        res.monitors = ObjectSerializer_1.ObjectSerializer.serialize(data.monitors, "Array<MonitorSearchResult>", "");
        return res;
    };
    MonitorSearchResponse.discriminator = undefined;
    MonitorSearchResponse.attributeTypeMap = {
        "counts": {
            "baseName": "counts",
            "type": "MonitorSearchResponseCounts",
            "format": ""
        },
        "metadata": {
            "baseName": "metadata",
            "type": "MonitorSearchResponseMetadata",
            "format": ""
        },
        "monitors": {
            "baseName": "monitors",
            "type": "Array<MonitorSearchResult>",
            "format": ""
        }
    };
    return MonitorSearchResponse;
}());
exports.MonitorSearchResponse = MonitorSearchResponse;
//# sourceMappingURL=MonitorSearchResponse.js.map