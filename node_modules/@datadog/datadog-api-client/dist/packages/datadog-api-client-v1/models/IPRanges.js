"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IPRanges = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* IP ranges.
*/
var IPRanges = /** @class */ (function () {
    function IPRanges() {
    }
    IPRanges.getAttributeTypeMap = function () {
        return IPRanges.attributeTypeMap;
    };
    IPRanges.deserialize = function (data) {
        var res = new IPRanges();
        res.agents = ObjectSerializer_1.ObjectSerializer.deserialize(data.agents, "IPPrefixesAgents", "");
        res.api = ObjectSerializer_1.ObjectSerializer.deserialize(data.api, "IPPrefixesAPI", "");
        res.apm = ObjectSerializer_1.ObjectSerializer.deserialize(data.apm, "IPPrefixesAPM", "");
        res.logs = ObjectSerializer_1.ObjectSerializer.deserialize(data.logs, "IPPrefixesLogs", "");
        res.modified = ObjectSerializer_1.ObjectSerializer.deserialize(data.modified, "string", "");
        res.process = ObjectSerializer_1.ObjectSerializer.deserialize(data.process, "IPPrefixesProcess", "");
        res.synthetics = ObjectSerializer_1.ObjectSerializer.deserialize(data.synthetics, "IPPrefixesSynthetics", "");
        res.version = ObjectSerializer_1.ObjectSerializer.deserialize(data.version, "number", "int64");
        res.webhooks = ObjectSerializer_1.ObjectSerializer.deserialize(data.webhooks, "IPPrefixesWebhooks", "");
        return res;
    };
    IPRanges.serialize = function (data) {
        var attributeTypes = IPRanges.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.agents = ObjectSerializer_1.ObjectSerializer.serialize(data.agents, "IPPrefixesAgents", "");
        res.api = ObjectSerializer_1.ObjectSerializer.serialize(data.api, "IPPrefixesAPI", "");
        res.apm = ObjectSerializer_1.ObjectSerializer.serialize(data.apm, "IPPrefixesAPM", "");
        res.logs = ObjectSerializer_1.ObjectSerializer.serialize(data.logs, "IPPrefixesLogs", "");
        res.modified = ObjectSerializer_1.ObjectSerializer.serialize(data.modified, "string", "");
        res.process = ObjectSerializer_1.ObjectSerializer.serialize(data.process, "IPPrefixesProcess", "");
        res.synthetics = ObjectSerializer_1.ObjectSerializer.serialize(data.synthetics, "IPPrefixesSynthetics", "");
        res.version = ObjectSerializer_1.ObjectSerializer.serialize(data.version, "number", "int64");
        res.webhooks = ObjectSerializer_1.ObjectSerializer.serialize(data.webhooks, "IPPrefixesWebhooks", "");
        return res;
    };
    IPRanges.discriminator = undefined;
    IPRanges.attributeTypeMap = {
        "agents": {
            "baseName": "agents",
            "type": "IPPrefixesAgents",
            "format": ""
        },
        "api": {
            "baseName": "api",
            "type": "IPPrefixesAPI",
            "format": ""
        },
        "apm": {
            "baseName": "apm",
            "type": "IPPrefixesAPM",
            "format": ""
        },
        "logs": {
            "baseName": "logs",
            "type": "IPPrefixesLogs",
            "format": ""
        },
        "modified": {
            "baseName": "modified",
            "type": "string",
            "format": ""
        },
        "process": {
            "baseName": "process",
            "type": "IPPrefixesProcess",
            "format": ""
        },
        "synthetics": {
            "baseName": "synthetics",
            "type": "IPPrefixesSynthetics",
            "format": ""
        },
        "version": {
            "baseName": "version",
            "type": "number",
            "format": "int64"
        },
        "webhooks": {
            "baseName": "webhooks",
            "type": "IPPrefixesWebhooks",
            "format": ""
        }
    };
    return IPRanges;
}());
exports.IPRanges = IPRanges;
//# sourceMappingURL=IPRanges.js.map