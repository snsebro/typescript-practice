"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MonitorGroupSearchResult = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* A single monitor group search result.
*/
var MonitorGroupSearchResult = /** @class */ (function () {
    function MonitorGroupSearchResult() {
    }
    MonitorGroupSearchResult.getAttributeTypeMap = function () {
        return MonitorGroupSearchResult.attributeTypeMap;
    };
    MonitorGroupSearchResult.deserialize = function (data) {
        var res = new MonitorGroupSearchResult();
        res.group = ObjectSerializer_1.ObjectSerializer.deserialize(data.group, "string", "");
        res.groupTags = ObjectSerializer_1.ObjectSerializer.deserialize(data.group_tags, "Array<string>", "");
        res.lastNodataTs = ObjectSerializer_1.ObjectSerializer.deserialize(data.last_nodata_ts, "number", "int64");
        res.lastTriggeredTs = ObjectSerializer_1.ObjectSerializer.deserialize(data.last_triggered_ts, "number", "int64");
        res.monitorId = ObjectSerializer_1.ObjectSerializer.deserialize(data.monitor_id, "number", "int64");
        res.monitorName = ObjectSerializer_1.ObjectSerializer.deserialize(data.monitor_name, "string", "");
        if (['Alert', 'Ignored', 'No Data', 'OK', 'Skipped', 'Unknown', 'Warn', undefined].includes(data.status)) {
            res.status = data.status;
        }
        else {
            throw TypeError("invalid enum value " + data.status + " for status");
        }
        return res;
    };
    MonitorGroupSearchResult.serialize = function (data) {
        var attributeTypes = MonitorGroupSearchResult.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.group = ObjectSerializer_1.ObjectSerializer.serialize(data.group, "string", "");
        res.group_tags = ObjectSerializer_1.ObjectSerializer.serialize(data.groupTags, "Array<string>", "");
        res.last_nodata_ts = ObjectSerializer_1.ObjectSerializer.serialize(data.lastNodataTs, "number", "int64");
        res.last_triggered_ts = ObjectSerializer_1.ObjectSerializer.serialize(data.lastTriggeredTs, "number", "int64");
        res.monitor_id = ObjectSerializer_1.ObjectSerializer.serialize(data.monitorId, "number", "int64");
        res.monitor_name = ObjectSerializer_1.ObjectSerializer.serialize(data.monitorName, "string", "");
        if (['Alert', 'Ignored', 'No Data', 'OK', 'Skipped', 'Unknown', 'Warn', undefined].includes(data.status)) {
            res.status = data.status;
        }
        else {
            throw TypeError("invalid enum value " + data.status + " for status");
        }
        return res;
    };
    MonitorGroupSearchResult.discriminator = undefined;
    MonitorGroupSearchResult.attributeTypeMap = {
        "group": {
            "baseName": "group",
            "type": "string",
            "format": ""
        },
        "groupTags": {
            "baseName": "group_tags",
            "type": "Array<string>",
            "format": ""
        },
        "lastNodataTs": {
            "baseName": "last_nodata_ts",
            "type": "number",
            "format": "int64"
        },
        "lastTriggeredTs": {
            "baseName": "last_triggered_ts",
            "type": "number",
            "format": "int64"
        },
        "monitorId": {
            "baseName": "monitor_id",
            "type": "number",
            "format": "int64"
        },
        "monitorName": {
            "baseName": "monitor_name",
            "type": "string",
            "format": ""
        },
        "status": {
            "baseName": "status",
            "type": "MonitorOverallStates",
            "format": ""
        }
    };
    return MonitorGroupSearchResult;
}());
exports.MonitorGroupSearchResult = MonitorGroupSearchResult;
//# sourceMappingURL=MonitorGroupSearchResult.js.map