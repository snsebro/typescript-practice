"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MonitorSearchResult = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Holds search results.
*/
var MonitorSearchResult = /** @class */ (function () {
    function MonitorSearchResult() {
    }
    MonitorSearchResult.getAttributeTypeMap = function () {
        return MonitorSearchResult.attributeTypeMap;
    };
    MonitorSearchResult.deserialize = function (data) {
        var res = new MonitorSearchResult();
        res.classification = ObjectSerializer_1.ObjectSerializer.deserialize(data.classification, "string", "");
        res.creator = ObjectSerializer_1.ObjectSerializer.deserialize(data.creator, "Creator", "");
        res.id = ObjectSerializer_1.ObjectSerializer.deserialize(data.id, "number", "int64");
        res.lastTriggeredTs = ObjectSerializer_1.ObjectSerializer.deserialize(data.last_triggered_ts, "number", "int64");
        res.metrics = ObjectSerializer_1.ObjectSerializer.deserialize(data.metrics, "Array<string>", "");
        res.name = ObjectSerializer_1.ObjectSerializer.deserialize(data.name, "string", "");
        res.notifications = ObjectSerializer_1.ObjectSerializer.deserialize(data.notifications, "Array<MonitorSearchResultNotification>", "");
        res.orgId = ObjectSerializer_1.ObjectSerializer.deserialize(data.org_id, "number", "int64");
        res.scopes = ObjectSerializer_1.ObjectSerializer.deserialize(data.scopes, "Array<string>", "");
        if (['Alert', 'Ignored', 'No Data', 'OK', 'Skipped', 'Unknown', 'Warn', undefined].includes(data.status)) {
            res.status = data.status;
        }
        else {
            throw TypeError("invalid enum value " + data.status + " for status");
        }
        res.tags = ObjectSerializer_1.ObjectSerializer.deserialize(data.tags, "Array<string>", "");
        if (['composite', 'event alert', 'log alert', 'metric alert', 'process alert', 'query alert', 'rum alert', 'service check', 'synthetics alert', 'trace-analytics alert', 'slo alert', 'event-v2 alert', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        return res;
    };
    MonitorSearchResult.serialize = function (data) {
        var attributeTypes = MonitorSearchResult.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.classification = ObjectSerializer_1.ObjectSerializer.serialize(data.classification, "string", "");
        res.creator = ObjectSerializer_1.ObjectSerializer.serialize(data.creator, "Creator", "");
        res.id = ObjectSerializer_1.ObjectSerializer.serialize(data.id, "number", "int64");
        res.last_triggered_ts = ObjectSerializer_1.ObjectSerializer.serialize(data.lastTriggeredTs, "number", "int64");
        res.metrics = ObjectSerializer_1.ObjectSerializer.serialize(data.metrics, "Array<string>", "");
        res.name = ObjectSerializer_1.ObjectSerializer.serialize(data.name, "string", "");
        res.notifications = ObjectSerializer_1.ObjectSerializer.serialize(data.notifications, "Array<MonitorSearchResultNotification>", "");
        res.org_id = ObjectSerializer_1.ObjectSerializer.serialize(data.orgId, "number", "int64");
        res.scopes = ObjectSerializer_1.ObjectSerializer.serialize(data.scopes, "Array<string>", "");
        if (['Alert', 'Ignored', 'No Data', 'OK', 'Skipped', 'Unknown', 'Warn', undefined].includes(data.status)) {
            res.status = data.status;
        }
        else {
            throw TypeError("invalid enum value " + data.status + " for status");
        }
        res.tags = ObjectSerializer_1.ObjectSerializer.serialize(data.tags, "Array<string>", "");
        if (['composite', 'event alert', 'log alert', 'metric alert', 'process alert', 'query alert', 'rum alert', 'service check', 'synthetics alert', 'trace-analytics alert', 'slo alert', 'event-v2 alert', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        return res;
    };
    MonitorSearchResult.discriminator = undefined;
    MonitorSearchResult.attributeTypeMap = {
        "classification": {
            "baseName": "classification",
            "type": "string",
            "format": ""
        },
        "creator": {
            "baseName": "creator",
            "type": "Creator",
            "format": ""
        },
        "id": {
            "baseName": "id",
            "type": "number",
            "format": "int64"
        },
        "lastTriggeredTs": {
            "baseName": "last_triggered_ts",
            "type": "number",
            "format": "int64"
        },
        "metrics": {
            "baseName": "metrics",
            "type": "Array<string>",
            "format": ""
        },
        "name": {
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        "notifications": {
            "baseName": "notifications",
            "type": "Array<MonitorSearchResultNotification>",
            "format": ""
        },
        "orgId": {
            "baseName": "org_id",
            "type": "number",
            "format": "int64"
        },
        "scopes": {
            "baseName": "scopes",
            "type": "Array<string>",
            "format": ""
        },
        "status": {
            "baseName": "status",
            "type": "MonitorOverallStates",
            "format": ""
        },
        "tags": {
            "baseName": "tags",
            "type": "Array<string>",
            "format": ""
        },
        "type": {
            "baseName": "type",
            "type": "MonitorType",
            "format": ""
        }
    };
    return MonitorSearchResult;
}());
exports.MonitorSearchResult = MonitorSearchResult;
//# sourceMappingURL=MonitorSearchResult.js.map