"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SLOHistoryMetricsSeriesMetadata = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Query metadata.
*/
var SLOHistoryMetricsSeriesMetadata = /** @class */ (function () {
    function SLOHistoryMetricsSeriesMetadata() {
    }
    SLOHistoryMetricsSeriesMetadata.getAttributeTypeMap = function () {
        return SLOHistoryMetricsSeriesMetadata.attributeTypeMap;
    };
    SLOHistoryMetricsSeriesMetadata.deserialize = function (data) {
        var res = new SLOHistoryMetricsSeriesMetadata();
        res.aggr = ObjectSerializer_1.ObjectSerializer.deserialize(data.aggr, "string", "");
        res.expression = ObjectSerializer_1.ObjectSerializer.deserialize(data.expression, "string", "");
        res.metric = ObjectSerializer_1.ObjectSerializer.deserialize(data.metric, "string", "");
        res.queryIndex = ObjectSerializer_1.ObjectSerializer.deserialize(data.query_index, "number", "int64");
        res.scope = ObjectSerializer_1.ObjectSerializer.deserialize(data.scope, "string", "");
        res.unit = ObjectSerializer_1.ObjectSerializer.deserialize(data.unit, "Array<SLOHistoryMetricsSeriesMetadataUnit>", "");
        return res;
    };
    SLOHistoryMetricsSeriesMetadata.serialize = function (data) {
        var attributeTypes = SLOHistoryMetricsSeriesMetadata.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.aggr = ObjectSerializer_1.ObjectSerializer.serialize(data.aggr, "string", "");
        res.expression = ObjectSerializer_1.ObjectSerializer.serialize(data.expression, "string", "");
        res.metric = ObjectSerializer_1.ObjectSerializer.serialize(data.metric, "string", "");
        res.query_index = ObjectSerializer_1.ObjectSerializer.serialize(data.queryIndex, "number", "int64");
        res.scope = ObjectSerializer_1.ObjectSerializer.serialize(data.scope, "string", "");
        res.unit = ObjectSerializer_1.ObjectSerializer.serialize(data.unit, "Array<SLOHistoryMetricsSeriesMetadataUnit>", "");
        return res;
    };
    SLOHistoryMetricsSeriesMetadata.discriminator = undefined;
    SLOHistoryMetricsSeriesMetadata.attributeTypeMap = {
        "aggr": {
            "baseName": "aggr",
            "type": "string",
            "format": ""
        },
        "expression": {
            "baseName": "expression",
            "type": "string",
            "format": ""
        },
        "metric": {
            "baseName": "metric",
            "type": "string",
            "format": ""
        },
        "queryIndex": {
            "baseName": "query_index",
            "type": "number",
            "format": "int64"
        },
        "scope": {
            "baseName": "scope",
            "type": "string",
            "format": ""
        },
        "unit": {
            "baseName": "unit",
            "type": "Array<SLOHistoryMetricsSeriesMetadataUnit>",
            "format": ""
        }
    };
    return SLOHistoryMetricsSeriesMetadata;
}());
exports.SLOHistoryMetricsSeriesMetadata = SLOHistoryMetricsSeriesMetadata;
//# sourceMappingURL=SLOHistoryMetricsSeriesMetadata.js.map