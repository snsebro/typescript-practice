"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceSummaryWidgetDefinition = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* The service summary displays the graphs of a chosen service in your screenboard. Only available on FREE layout dashboards.
*/
var ServiceSummaryWidgetDefinition = /** @class */ (function () {
    function ServiceSummaryWidgetDefinition() {
    }
    ServiceSummaryWidgetDefinition.getAttributeTypeMap = function () {
        return ServiceSummaryWidgetDefinition.attributeTypeMap;
    };
    ServiceSummaryWidgetDefinition.deserialize = function (data) {
        var res = new ServiceSummaryWidgetDefinition();
        if (['one_column', 'two_column', 'three_column', undefined].includes(data.display_format)) {
            res.displayFormat = data.display_format;
        }
        else {
            throw TypeError("invalid enum value " + data.display_format + " for display_format");
        }
        if (data.env === undefined) {
            throw new TypeError("missing required attribute 'env' on 'ServiceSummaryWidgetDefinition' object");
        }
        res.env = ObjectSerializer_1.ObjectSerializer.deserialize(data.env, "string", "");
        if (data.service === undefined) {
            throw new TypeError("missing required attribute 'service' on 'ServiceSummaryWidgetDefinition' object");
        }
        res.service = ObjectSerializer_1.ObjectSerializer.deserialize(data.service, "string", "");
        res.showBreakdown = ObjectSerializer_1.ObjectSerializer.deserialize(data.show_breakdown, "boolean", "");
        res.showDistribution = ObjectSerializer_1.ObjectSerializer.deserialize(data.show_distribution, "boolean", "");
        res.showErrors = ObjectSerializer_1.ObjectSerializer.deserialize(data.show_errors, "boolean", "");
        res.showHits = ObjectSerializer_1.ObjectSerializer.deserialize(data.show_hits, "boolean", "");
        res.showLatency = ObjectSerializer_1.ObjectSerializer.deserialize(data.show_latency, "boolean", "");
        res.showResourceList = ObjectSerializer_1.ObjectSerializer.deserialize(data.show_resource_list, "boolean", "");
        if (['small', 'medium', 'large', undefined].includes(data.size_format)) {
            res.sizeFormat = data.size_format;
        }
        else {
            throw TypeError("invalid enum value " + data.size_format + " for size_format");
        }
        if (data.span_name === undefined) {
            throw new TypeError("missing required attribute 'span_name' on 'ServiceSummaryWidgetDefinition' object");
        }
        res.spanName = ObjectSerializer_1.ObjectSerializer.deserialize(data.span_name, "string", "");
        res.time = ObjectSerializer_1.ObjectSerializer.deserialize(data.time, "WidgetTime", "");
        res.title = ObjectSerializer_1.ObjectSerializer.deserialize(data.title, "string", "");
        if (['center', 'left', 'right', undefined].includes(data.title_align)) {
            res.titleAlign = data.title_align;
        }
        else {
            throw TypeError("invalid enum value " + data.title_align + " for title_align");
        }
        res.titleSize = ObjectSerializer_1.ObjectSerializer.deserialize(data.title_size, "string", "");
        if (data.type === undefined) {
            throw new TypeError("missing required attribute 'type' on 'ServiceSummaryWidgetDefinition' object");
        }
        if (['trace_service', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        return res;
    };
    ServiceSummaryWidgetDefinition.serialize = function (data) {
        var attributeTypes = ServiceSummaryWidgetDefinition.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        if (['one_column', 'two_column', 'three_column', undefined].includes(data.displayFormat)) {
            res.display_format = data.displayFormat;
        }
        else {
            throw TypeError("invalid enum value " + data.displayFormat + " for displayFormat");
        }
        if (data.env === undefined) {
            throw new TypeError("missing required attribute 'env' on 'ServiceSummaryWidgetDefinition' object");
        }
        res.env = ObjectSerializer_1.ObjectSerializer.serialize(data.env, "string", "");
        if (data.service === undefined) {
            throw new TypeError("missing required attribute 'service' on 'ServiceSummaryWidgetDefinition' object");
        }
        res.service = ObjectSerializer_1.ObjectSerializer.serialize(data.service, "string", "");
        res.show_breakdown = ObjectSerializer_1.ObjectSerializer.serialize(data.showBreakdown, "boolean", "");
        res.show_distribution = ObjectSerializer_1.ObjectSerializer.serialize(data.showDistribution, "boolean", "");
        res.show_errors = ObjectSerializer_1.ObjectSerializer.serialize(data.showErrors, "boolean", "");
        res.show_hits = ObjectSerializer_1.ObjectSerializer.serialize(data.showHits, "boolean", "");
        res.show_latency = ObjectSerializer_1.ObjectSerializer.serialize(data.showLatency, "boolean", "");
        res.show_resource_list = ObjectSerializer_1.ObjectSerializer.serialize(data.showResourceList, "boolean", "");
        if (['small', 'medium', 'large', undefined].includes(data.sizeFormat)) {
            res.size_format = data.sizeFormat;
        }
        else {
            throw TypeError("invalid enum value " + data.sizeFormat + " for sizeFormat");
        }
        if (data.spanName === undefined) {
            throw new TypeError("missing required attribute 'span_name' on 'ServiceSummaryWidgetDefinition' object");
        }
        res.span_name = ObjectSerializer_1.ObjectSerializer.serialize(data.spanName, "string", "");
        res.time = ObjectSerializer_1.ObjectSerializer.serialize(data.time, "WidgetTime", "");
        res.title = ObjectSerializer_1.ObjectSerializer.serialize(data.title, "string", "");
        if (['center', 'left', 'right', undefined].includes(data.titleAlign)) {
            res.title_align = data.titleAlign;
        }
        else {
            throw TypeError("invalid enum value " + data.titleAlign + " for titleAlign");
        }
        res.title_size = ObjectSerializer_1.ObjectSerializer.serialize(data.titleSize, "string", "");
        if (data.type === undefined) {
            throw new TypeError("missing required attribute 'type' on 'ServiceSummaryWidgetDefinition' object");
        }
        if (['trace_service', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        return res;
    };
    ServiceSummaryWidgetDefinition.discriminator = undefined;
    ServiceSummaryWidgetDefinition.attributeTypeMap = {
        "displayFormat": {
            "baseName": "display_format",
            "type": "WidgetServiceSummaryDisplayFormat",
            "format": ""
        },
        "env": {
            "baseName": "env",
            "type": "string",
            "format": ""
        },
        "service": {
            "baseName": "service",
            "type": "string",
            "format": ""
        },
        "showBreakdown": {
            "baseName": "show_breakdown",
            "type": "boolean",
            "format": ""
        },
        "showDistribution": {
            "baseName": "show_distribution",
            "type": "boolean",
            "format": ""
        },
        "showErrors": {
            "baseName": "show_errors",
            "type": "boolean",
            "format": ""
        },
        "showHits": {
            "baseName": "show_hits",
            "type": "boolean",
            "format": ""
        },
        "showLatency": {
            "baseName": "show_latency",
            "type": "boolean",
            "format": ""
        },
        "showResourceList": {
            "baseName": "show_resource_list",
            "type": "boolean",
            "format": ""
        },
        "sizeFormat": {
            "baseName": "size_format",
            "type": "WidgetSizeFormat",
            "format": ""
        },
        "spanName": {
            "baseName": "span_name",
            "type": "string",
            "format": ""
        },
        "time": {
            "baseName": "time",
            "type": "WidgetTime",
            "format": ""
        },
        "title": {
            "baseName": "title",
            "type": "string",
            "format": ""
        },
        "titleAlign": {
            "baseName": "title_align",
            "type": "WidgetTextAlign",
            "format": ""
        },
        "titleSize": {
            "baseName": "title_size",
            "type": "string",
            "format": ""
        },
        "type": {
            "baseName": "type",
            "type": "ServiceSummaryWidgetDefinitionType",
            "format": ""
        }
    };
    return ServiceSummaryWidgetDefinition;
}());
exports.ServiceSummaryWidgetDefinition = ServiceSummaryWidgetDefinition;
//# sourceMappingURL=ServiceSummaryWidgetDefinition.js.map