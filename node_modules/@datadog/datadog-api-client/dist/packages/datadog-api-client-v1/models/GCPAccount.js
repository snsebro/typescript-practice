"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.GCPAccount = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Your Google Cloud Platform Account.
*/
var GCPAccount = /** @class */ (function () {
    function GCPAccount() {
    }
    GCPAccount.getAttributeTypeMap = function () {
        return GCPAccount.attributeTypeMap;
    };
    GCPAccount.deserialize = function (data) {
        var res = new GCPAccount();
        res.authProviderX509CertUrl = ObjectSerializer_1.ObjectSerializer.deserialize(data.auth_provider_x509_cert_url, "string", "");
        res.authUri = ObjectSerializer_1.ObjectSerializer.deserialize(data.auth_uri, "string", "");
        res.automute = ObjectSerializer_1.ObjectSerializer.deserialize(data.automute, "boolean", "");
        res.clientEmail = ObjectSerializer_1.ObjectSerializer.deserialize(data.client_email, "string", "");
        res.clientId = ObjectSerializer_1.ObjectSerializer.deserialize(data.client_id, "string", "");
        res.clientX509CertUrl = ObjectSerializer_1.ObjectSerializer.deserialize(data.client_x509_cert_url, "string", "");
        res.errors = ObjectSerializer_1.ObjectSerializer.deserialize(data.errors, "Array<string>", "");
        res.hostFilters = ObjectSerializer_1.ObjectSerializer.deserialize(data.host_filters, "string", "");
        res.privateKey = ObjectSerializer_1.ObjectSerializer.deserialize(data.private_key, "string", "");
        res.privateKeyId = ObjectSerializer_1.ObjectSerializer.deserialize(data.private_key_id, "string", "");
        res.projectId = ObjectSerializer_1.ObjectSerializer.deserialize(data.project_id, "string", "");
        res.tokenUri = ObjectSerializer_1.ObjectSerializer.deserialize(data.token_uri, "string", "");
        res.type = ObjectSerializer_1.ObjectSerializer.deserialize(data.type, "string", "");
        return res;
    };
    GCPAccount.serialize = function (data) {
        var attributeTypes = GCPAccount.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.auth_provider_x509_cert_url = ObjectSerializer_1.ObjectSerializer.serialize(data.authProviderX509CertUrl, "string", "");
        res.auth_uri = ObjectSerializer_1.ObjectSerializer.serialize(data.authUri, "string", "");
        res.automute = ObjectSerializer_1.ObjectSerializer.serialize(data.automute, "boolean", "");
        res.client_email = ObjectSerializer_1.ObjectSerializer.serialize(data.clientEmail, "string", "");
        res.client_id = ObjectSerializer_1.ObjectSerializer.serialize(data.clientId, "string", "");
        res.client_x509_cert_url = ObjectSerializer_1.ObjectSerializer.serialize(data.clientX509CertUrl, "string", "");
        res.errors = ObjectSerializer_1.ObjectSerializer.serialize(data.errors, "Array<string>", "");
        res.host_filters = ObjectSerializer_1.ObjectSerializer.serialize(data.hostFilters, "string", "");
        res.private_key = ObjectSerializer_1.ObjectSerializer.serialize(data.privateKey, "string", "");
        res.private_key_id = ObjectSerializer_1.ObjectSerializer.serialize(data.privateKeyId, "string", "");
        res.project_id = ObjectSerializer_1.ObjectSerializer.serialize(data.projectId, "string", "");
        res.token_uri = ObjectSerializer_1.ObjectSerializer.serialize(data.tokenUri, "string", "");
        res.type = ObjectSerializer_1.ObjectSerializer.serialize(data.type, "string", "");
        return res;
    };
    GCPAccount.discriminator = undefined;
    GCPAccount.attributeTypeMap = {
        "authProviderX509CertUrl": {
            "baseName": "auth_provider_x509_cert_url",
            "type": "string",
            "format": ""
        },
        "authUri": {
            "baseName": "auth_uri",
            "type": "string",
            "format": ""
        },
        "automute": {
            "baseName": "automute",
            "type": "boolean",
            "format": ""
        },
        "clientEmail": {
            "baseName": "client_email",
            "type": "string",
            "format": ""
        },
        "clientId": {
            "baseName": "client_id",
            "type": "string",
            "format": ""
        },
        "clientX509CertUrl": {
            "baseName": "client_x509_cert_url",
            "type": "string",
            "format": ""
        },
        "errors": {
            "baseName": "errors",
            "type": "Array<string>",
            "format": ""
        },
        "hostFilters": {
            "baseName": "host_filters",
            "type": "string",
            "format": ""
        },
        "privateKey": {
            "baseName": "private_key",
            "type": "string",
            "format": ""
        },
        "privateKeyId": {
            "baseName": "private_key_id",
            "type": "string",
            "format": ""
        },
        "projectId": {
            "baseName": "project_id",
            "type": "string",
            "format": ""
        },
        "tokenUri": {
            "baseName": "token_uri",
            "type": "string",
            "format": ""
        },
        "type": {
            "baseName": "type",
            "type": "string",
            "format": ""
        }
    };
    return GCPAccount;
}());
exports.GCPAccount = GCPAccount;
//# sourceMappingURL=GCPAccount.js.map