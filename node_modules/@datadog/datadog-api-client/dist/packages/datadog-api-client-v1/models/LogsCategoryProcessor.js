"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogsCategoryProcessor = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Use the Category Processor to add a new attribute (without spaces or special characters in the new attribute name) to a log matching a provided search query. Use categories to create groups for an analytical view. For example, URL groups, machine groups, environments, and response time buckets.  **Notes**:  - The syntax of the query is the one of Logs Explorer search bar.   The query can be done on any log attribute or tag, whether it is a facet or not.   Wildcards can also be used inside your query. - Once the log has matched one of the Processor queries, it stops.   Make sure they are properly ordered in case a log could match several queries. - The names of the categories must be unique. - Once defined in the Category Processor, you can map categories to log status using the Log Status Remapper.
*/
var LogsCategoryProcessor = /** @class */ (function () {
    function LogsCategoryProcessor() {
    }
    LogsCategoryProcessor.getAttributeTypeMap = function () {
        return LogsCategoryProcessor.attributeTypeMap;
    };
    LogsCategoryProcessor.deserialize = function (data) {
        var res = new LogsCategoryProcessor();
        if (data.categories === undefined) {
            throw new TypeError("missing required attribute 'categories' on 'LogsCategoryProcessor' object");
        }
        res.categories = ObjectSerializer_1.ObjectSerializer.deserialize(data.categories, "Array<LogsCategoryProcessorCategory>", "");
        res.isEnabled = ObjectSerializer_1.ObjectSerializer.deserialize(data.is_enabled, "boolean", "");
        res.name = ObjectSerializer_1.ObjectSerializer.deserialize(data.name, "string", "");
        if (data.target === undefined) {
            throw new TypeError("missing required attribute 'target' on 'LogsCategoryProcessor' object");
        }
        res.target = ObjectSerializer_1.ObjectSerializer.deserialize(data.target, "string", "");
        if (data.type === undefined) {
            throw new TypeError("missing required attribute 'type' on 'LogsCategoryProcessor' object");
        }
        if (['category-processor', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        return res;
    };
    LogsCategoryProcessor.serialize = function (data) {
        var attributeTypes = LogsCategoryProcessor.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        if (data.categories === undefined) {
            throw new TypeError("missing required attribute 'categories' on 'LogsCategoryProcessor' object");
        }
        res.categories = ObjectSerializer_1.ObjectSerializer.serialize(data.categories, "Array<LogsCategoryProcessorCategory>", "");
        res.is_enabled = ObjectSerializer_1.ObjectSerializer.serialize(data.isEnabled, "boolean", "");
        res.name = ObjectSerializer_1.ObjectSerializer.serialize(data.name, "string", "");
        if (data.target === undefined) {
            throw new TypeError("missing required attribute 'target' on 'LogsCategoryProcessor' object");
        }
        res.target = ObjectSerializer_1.ObjectSerializer.serialize(data.target, "string", "");
        if (data.type === undefined) {
            throw new TypeError("missing required attribute 'type' on 'LogsCategoryProcessor' object");
        }
        if (['category-processor', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        return res;
    };
    LogsCategoryProcessor.discriminator = undefined;
    LogsCategoryProcessor.attributeTypeMap = {
        "categories": {
            "baseName": "categories",
            "type": "Array<LogsCategoryProcessorCategory>",
            "format": ""
        },
        "isEnabled": {
            "baseName": "is_enabled",
            "type": "boolean",
            "format": ""
        },
        "name": {
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        "target": {
            "baseName": "target",
            "type": "string",
            "format": ""
        },
        "type": {
            "baseName": "type",
            "type": "LogsCategoryProcessorType",
            "format": ""
        }
    };
    return LogsCategoryProcessor;
}());
exports.LogsCategoryProcessor = LogsCategoryProcessor;
//# sourceMappingURL=LogsCategoryProcessor.js.map