/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { ApmStatsQueryDefinition } from './ApmStatsQueryDefinition';
import { LogQueryDefinition } from './LogQueryDefinition';
import { ProcessQueryDefinition } from './ProcessQueryDefinition';
import { TableWidgetCellDisplayMode } from './TableWidgetCellDisplayMode';
import { WidgetAggregator } from './WidgetAggregator';
import { WidgetConditionalFormat } from './WidgetConditionalFormat';
import { WidgetSort } from './WidgetSort';
/**
* Updated table widget.
*/
export declare class TableWidgetRequest {
    'aggregator'?: WidgetAggregator;
    /**
    * The column name (defaults to the metric name).
    */
    'alias'?: string;
    'apmQuery'?: LogQueryDefinition;
    'apmStatsQuery'?: ApmStatsQueryDefinition;
    /**
    * A list of display modes for each table cell.
    */
    'cellDisplayMode'?: Array<TableWidgetCellDisplayMode>;
    /**
    * List of conditional formats.
    */
    'conditionalFormats'?: Array<WidgetConditionalFormat>;
    'eventQuery'?: LogQueryDefinition;
    /**
    * For metric queries, the number of lines to show in the table. Only one request should have this property.
    */
    'limit'?: number;
    'logQuery'?: LogQueryDefinition;
    'networkQuery'?: LogQueryDefinition;
    'order'?: WidgetSort;
    'processQuery'?: ProcessQueryDefinition;
    'profileMetricsQuery'?: LogQueryDefinition;
    /**
    * Query definition.
    */
    'q'?: string;
    'rumQuery'?: LogQueryDefinition;
    'securityQuery'?: LogQueryDefinition;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: {
        [key: string]: {
            baseName: string;
            type: string;
            format: string;
        };
    };
    static getAttributeTypeMap(): {
        [key: string]: {
            baseName: string;
            type: string;
            format: string;
        };
    };
    static deserialize(data: {
        [key: string]: any;
    }): TableWidgetRequest;
    static serialize(data: TableWidgetRequest): {
        [key: string]: any;
    };
    constructor();
}
