"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyntheticsAPIStep = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* The steps used in a Synthetics multistep API test.
*/
var SyntheticsAPIStep = /** @class */ (function () {
    function SyntheticsAPIStep() {
    }
    SyntheticsAPIStep.getAttributeTypeMap = function () {
        return SyntheticsAPIStep.attributeTypeMap;
    };
    SyntheticsAPIStep.deserialize = function (data) {
        var res = new SyntheticsAPIStep();
        res.allowFailure = ObjectSerializer_1.ObjectSerializer.deserialize(data.allowFailure, "boolean", "");
        res.assertions = ObjectSerializer_1.ObjectSerializer.deserialize(data.assertions, "Array<SyntheticsAssertion>", "");
        res.extractedValues = ObjectSerializer_1.ObjectSerializer.deserialize(data.extractedValues, "Array<SyntheticsParsingOptions>", "");
        res.isCritical = ObjectSerializer_1.ObjectSerializer.deserialize(data.isCritical, "boolean", "");
        res.name = ObjectSerializer_1.ObjectSerializer.deserialize(data.name, "string", "");
        res.request = ObjectSerializer_1.ObjectSerializer.deserialize(data.request, "SyntheticsTestRequest", "");
        if (['http', undefined].includes(data.subtype)) {
            res.subtype = data.subtype;
        }
        else {
            throw TypeError("invalid enum value " + data.subtype + " for subtype");
        }
        return res;
    };
    SyntheticsAPIStep.serialize = function (data) {
        var attributeTypes = SyntheticsAPIStep.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.allowFailure = ObjectSerializer_1.ObjectSerializer.serialize(data.allowFailure, "boolean", "");
        res.assertions = ObjectSerializer_1.ObjectSerializer.serialize(data.assertions, "Array<SyntheticsAssertion>", "");
        res.extractedValues = ObjectSerializer_1.ObjectSerializer.serialize(data.extractedValues, "Array<SyntheticsParsingOptions>", "");
        res.isCritical = ObjectSerializer_1.ObjectSerializer.serialize(data.isCritical, "boolean", "");
        res.name = ObjectSerializer_1.ObjectSerializer.serialize(data.name, "string", "");
        res.request = ObjectSerializer_1.ObjectSerializer.serialize(data.request, "SyntheticsTestRequest", "");
        if (['http', undefined].includes(data.subtype)) {
            res.subtype = data.subtype;
        }
        else {
            throw TypeError("invalid enum value " + data.subtype + " for subtype");
        }
        return res;
    };
    SyntheticsAPIStep.discriminator = undefined;
    SyntheticsAPIStep.attributeTypeMap = {
        "allowFailure": {
            "baseName": "allowFailure",
            "type": "boolean",
            "format": ""
        },
        "assertions": {
            "baseName": "assertions",
            "type": "Array<SyntheticsAssertion>",
            "format": ""
        },
        "extractedValues": {
            "baseName": "extractedValues",
            "type": "Array<SyntheticsParsingOptions>",
            "format": ""
        },
        "isCritical": {
            "baseName": "isCritical",
            "type": "boolean",
            "format": ""
        },
        "name": {
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        "request": {
            "baseName": "request",
            "type": "SyntheticsTestRequest",
            "format": ""
        },
        "subtype": {
            "baseName": "subtype",
            "type": "SyntheticsAPIStepSubtype",
            "format": ""
        }
    };
    return SyntheticsAPIStep;
}());
exports.SyntheticsAPIStep = SyntheticsAPIStep;
//# sourceMappingURL=SyntheticsAPIStep.js.map