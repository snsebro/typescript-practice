"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Monitor = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Object describing a monitor.
*/
var Monitor = /** @class */ (function () {
    function Monitor() {
    }
    Monitor.getAttributeTypeMap = function () {
        return Monitor.attributeTypeMap;
    };
    Monitor.deserialize = function (data) {
        var res = new Monitor();
        res.created = ObjectSerializer_1.ObjectSerializer.deserialize(data.created, "Date", "date-time");
        res.creator = ObjectSerializer_1.ObjectSerializer.deserialize(data.creator, "Creator", "");
        res.deleted = ObjectSerializer_1.ObjectSerializer.deserialize(data.deleted, "Date", "date-time");
        res.id = ObjectSerializer_1.ObjectSerializer.deserialize(data.id, "number", "int64");
        res.message = ObjectSerializer_1.ObjectSerializer.deserialize(data.message, "string", "");
        res.modified = ObjectSerializer_1.ObjectSerializer.deserialize(data.modified, "Date", "date-time");
        res.multi = ObjectSerializer_1.ObjectSerializer.deserialize(data.multi, "boolean", "");
        res.name = ObjectSerializer_1.ObjectSerializer.deserialize(data.name, "string", "");
        res.options = ObjectSerializer_1.ObjectSerializer.deserialize(data.options, "MonitorOptions", "");
        if (['Alert', 'Ignored', 'No Data', 'OK', 'Skipped', 'Unknown', 'Warn', undefined].includes(data.overall_state)) {
            res.overallState = data.overall_state;
        }
        else {
            throw TypeError("invalid enum value " + data.overall_state + " for overall_state");
        }
        res.priority = ObjectSerializer_1.ObjectSerializer.deserialize(data.priority, "number", "int64");
        if (data.query === undefined) {
            throw new TypeError("missing required attribute 'query' on 'Monitor' object");
        }
        res.query = ObjectSerializer_1.ObjectSerializer.deserialize(data.query, "string", "");
        res.restrictedRoles = ObjectSerializer_1.ObjectSerializer.deserialize(data.restricted_roles, "Array<string>", "");
        res.state = ObjectSerializer_1.ObjectSerializer.deserialize(data.state, "MonitorState", "");
        res.tags = ObjectSerializer_1.ObjectSerializer.deserialize(data.tags, "Array<string>", "");
        if (data.type === undefined) {
            throw new TypeError("missing required attribute 'type' on 'Monitor' object");
        }
        if (['composite', 'event alert', 'log alert', 'metric alert', 'process alert', 'query alert', 'rum alert', 'service check', 'synthetics alert', 'trace-analytics alert', 'slo alert', 'event-v2 alert', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        return res;
    };
    Monitor.serialize = function (data) {
        var attributeTypes = Monitor.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.created = ObjectSerializer_1.ObjectSerializer.serialize(data.created, "Date", "date-time");
        res.creator = ObjectSerializer_1.ObjectSerializer.serialize(data.creator, "Creator", "");
        res.deleted = ObjectSerializer_1.ObjectSerializer.serialize(data.deleted, "Date", "date-time");
        res.id = ObjectSerializer_1.ObjectSerializer.serialize(data.id, "number", "int64");
        res.message = ObjectSerializer_1.ObjectSerializer.serialize(data.message, "string", "");
        res.modified = ObjectSerializer_1.ObjectSerializer.serialize(data.modified, "Date", "date-time");
        res.multi = ObjectSerializer_1.ObjectSerializer.serialize(data.multi, "boolean", "");
        res.name = ObjectSerializer_1.ObjectSerializer.serialize(data.name, "string", "");
        res.options = ObjectSerializer_1.ObjectSerializer.serialize(data.options, "MonitorOptions", "");
        if (['Alert', 'Ignored', 'No Data', 'OK', 'Skipped', 'Unknown', 'Warn', undefined].includes(data.overallState)) {
            res.overall_state = data.overallState;
        }
        else {
            throw TypeError("invalid enum value " + data.overallState + " for overallState");
        }
        res.priority = ObjectSerializer_1.ObjectSerializer.serialize(data.priority, "number", "int64");
        if (data.query === undefined) {
            throw new TypeError("missing required attribute 'query' on 'Monitor' object");
        }
        res.query = ObjectSerializer_1.ObjectSerializer.serialize(data.query, "string", "");
        res.restricted_roles = ObjectSerializer_1.ObjectSerializer.serialize(data.restrictedRoles, "Array<string>", "");
        res.state = ObjectSerializer_1.ObjectSerializer.serialize(data.state, "MonitorState", "");
        res.tags = ObjectSerializer_1.ObjectSerializer.serialize(data.tags, "Array<string>", "");
        if (data.type === undefined) {
            throw new TypeError("missing required attribute 'type' on 'Monitor' object");
        }
        if (['composite', 'event alert', 'log alert', 'metric alert', 'process alert', 'query alert', 'rum alert', 'service check', 'synthetics alert', 'trace-analytics alert', 'slo alert', 'event-v2 alert', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        return res;
    };
    Monitor.discriminator = undefined;
    Monitor.attributeTypeMap = {
        "created": {
            "baseName": "created",
            "type": "Date",
            "format": "date-time"
        },
        "creator": {
            "baseName": "creator",
            "type": "Creator",
            "format": ""
        },
        "deleted": {
            "baseName": "deleted",
            "type": "Date",
            "format": "date-time"
        },
        "id": {
            "baseName": "id",
            "type": "number",
            "format": "int64"
        },
        "message": {
            "baseName": "message",
            "type": "string",
            "format": ""
        },
        "modified": {
            "baseName": "modified",
            "type": "Date",
            "format": "date-time"
        },
        "multi": {
            "baseName": "multi",
            "type": "boolean",
            "format": ""
        },
        "name": {
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        "options": {
            "baseName": "options",
            "type": "MonitorOptions",
            "format": ""
        },
        "overallState": {
            "baseName": "overall_state",
            "type": "MonitorOverallStates",
            "format": ""
        },
        "priority": {
            "baseName": "priority",
            "type": "number",
            "format": "int64"
        },
        "query": {
            "baseName": "query",
            "type": "string",
            "format": ""
        },
        "restrictedRoles": {
            "baseName": "restricted_roles",
            "type": "Array<string>",
            "format": ""
        },
        "state": {
            "baseName": "state",
            "type": "MonitorState",
            "format": ""
        },
        "tags": {
            "baseName": "tags",
            "type": "Array<string>",
            "format": ""
        },
        "type": {
            "baseName": "type",
            "type": "MonitorType",
            "format": ""
        }
    };
    return Monitor;
}());
exports.Monitor = Monitor;
//# sourceMappingURL=Monitor.js.map