"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlertGraphWidgetDefinition = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Alert graphs are timeseries graphs showing the current status of any monitor defined on your system.
*/
var AlertGraphWidgetDefinition = /** @class */ (function () {
    function AlertGraphWidgetDefinition() {
    }
    AlertGraphWidgetDefinition.getAttributeTypeMap = function () {
        return AlertGraphWidgetDefinition.attributeTypeMap;
    };
    AlertGraphWidgetDefinition.deserialize = function (data) {
        var res = new AlertGraphWidgetDefinition();
        if (data.alert_id === undefined) {
            throw new TypeError("missing required attribute 'alert_id' on 'AlertGraphWidgetDefinition' object");
        }
        res.alertId = ObjectSerializer_1.ObjectSerializer.deserialize(data.alert_id, "string", "");
        res.time = ObjectSerializer_1.ObjectSerializer.deserialize(data.time, "WidgetTime", "");
        res.title = ObjectSerializer_1.ObjectSerializer.deserialize(data.title, "string", "");
        if (['center', 'left', 'right', undefined].includes(data.title_align)) {
            res.titleAlign = data.title_align;
        }
        else {
            throw TypeError("invalid enum value " + data.title_align + " for title_align");
        }
        res.titleSize = ObjectSerializer_1.ObjectSerializer.deserialize(data.title_size, "string", "");
        if (data.type === undefined) {
            throw new TypeError("missing required attribute 'type' on 'AlertGraphWidgetDefinition' object");
        }
        if (['alert_graph', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        if (data.viz_type === undefined) {
            throw new TypeError("missing required attribute 'viz_type' on 'AlertGraphWidgetDefinition' object");
        }
        if (['timeseries', 'toplist', undefined].includes(data.viz_type)) {
            res.vizType = data.viz_type;
        }
        else {
            throw TypeError("invalid enum value " + data.viz_type + " for viz_type");
        }
        return res;
    };
    AlertGraphWidgetDefinition.serialize = function (data) {
        var attributeTypes = AlertGraphWidgetDefinition.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        if (data.alertId === undefined) {
            throw new TypeError("missing required attribute 'alert_id' on 'AlertGraphWidgetDefinition' object");
        }
        res.alert_id = ObjectSerializer_1.ObjectSerializer.serialize(data.alertId, "string", "");
        res.time = ObjectSerializer_1.ObjectSerializer.serialize(data.time, "WidgetTime", "");
        res.title = ObjectSerializer_1.ObjectSerializer.serialize(data.title, "string", "");
        if (['center', 'left', 'right', undefined].includes(data.titleAlign)) {
            res.title_align = data.titleAlign;
        }
        else {
            throw TypeError("invalid enum value " + data.titleAlign + " for titleAlign");
        }
        res.title_size = ObjectSerializer_1.ObjectSerializer.serialize(data.titleSize, "string", "");
        if (data.type === undefined) {
            throw new TypeError("missing required attribute 'type' on 'AlertGraphWidgetDefinition' object");
        }
        if (['alert_graph', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        if (data.vizType === undefined) {
            throw new TypeError("missing required attribute 'viz_type' on 'AlertGraphWidgetDefinition' object");
        }
        if (['timeseries', 'toplist', undefined].includes(data.vizType)) {
            res.viz_type = data.vizType;
        }
        else {
            throw TypeError("invalid enum value " + data.vizType + " for vizType");
        }
        return res;
    };
    AlertGraphWidgetDefinition.discriminator = undefined;
    AlertGraphWidgetDefinition.attributeTypeMap = {
        "alertId": {
            "baseName": "alert_id",
            "type": "string",
            "format": ""
        },
        "time": {
            "baseName": "time",
            "type": "WidgetTime",
            "format": ""
        },
        "title": {
            "baseName": "title",
            "type": "string",
            "format": ""
        },
        "titleAlign": {
            "baseName": "title_align",
            "type": "WidgetTextAlign",
            "format": ""
        },
        "titleSize": {
            "baseName": "title_size",
            "type": "string",
            "format": ""
        },
        "type": {
            "baseName": "type",
            "type": "AlertGraphWidgetDefinitionType",
            "format": ""
        },
        "vizType": {
            "baseName": "viz_type",
            "type": "WidgetVizType",
            "format": ""
        }
    };
    return AlertGraphWidgetDefinition;
}());
exports.AlertGraphWidgetDefinition = AlertGraphWidgetDefinition;
//# sourceMappingURL=AlertGraphWidgetDefinition.js.map