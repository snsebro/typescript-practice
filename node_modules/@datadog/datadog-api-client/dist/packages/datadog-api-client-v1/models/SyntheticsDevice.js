"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyntheticsDevice = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Object describing the device used to perform the Synthetic test.
*/
var SyntheticsDevice = /** @class */ (function () {
    function SyntheticsDevice() {
    }
    SyntheticsDevice.getAttributeTypeMap = function () {
        return SyntheticsDevice.attributeTypeMap;
    };
    SyntheticsDevice.deserialize = function (data) {
        var res = new SyntheticsDevice();
        if (data.height === undefined) {
            throw new TypeError("missing required attribute 'height' on 'SyntheticsDevice' object");
        }
        res.height = ObjectSerializer_1.ObjectSerializer.deserialize(data.height, "number", "int64");
        if (data.id === undefined) {
            throw new TypeError("missing required attribute 'id' on 'SyntheticsDevice' object");
        }
        if (['laptop_large', 'tablet', 'mobile_small', 'chrome.laptop_large', 'chrome.tablet', 'chrome.mobile_small', 'firefox.laptop_large', 'firefox.tablet', 'firefox.mobile_small', undefined].includes(data.id)) {
            res.id = data.id;
        }
        else {
            throw TypeError("invalid enum value " + data.id + " for id");
        }
        res.isMobile = ObjectSerializer_1.ObjectSerializer.deserialize(data.isMobile, "boolean", "");
        if (data.name === undefined) {
            throw new TypeError("missing required attribute 'name' on 'SyntheticsDevice' object");
        }
        res.name = ObjectSerializer_1.ObjectSerializer.deserialize(data.name, "string", "");
        if (data.width === undefined) {
            throw new TypeError("missing required attribute 'width' on 'SyntheticsDevice' object");
        }
        res.width = ObjectSerializer_1.ObjectSerializer.deserialize(data.width, "number", "int64");
        return res;
    };
    SyntheticsDevice.serialize = function (data) {
        var attributeTypes = SyntheticsDevice.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        if (data.height === undefined) {
            throw new TypeError("missing required attribute 'height' on 'SyntheticsDevice' object");
        }
        res.height = ObjectSerializer_1.ObjectSerializer.serialize(data.height, "number", "int64");
        if (data.id === undefined) {
            throw new TypeError("missing required attribute 'id' on 'SyntheticsDevice' object");
        }
        if (['laptop_large', 'tablet', 'mobile_small', 'chrome.laptop_large', 'chrome.tablet', 'chrome.mobile_small', 'firefox.laptop_large', 'firefox.tablet', 'firefox.mobile_small', undefined].includes(data.id)) {
            res.id = data.id;
        }
        else {
            throw TypeError("invalid enum value " + data.id + " for id");
        }
        res.isMobile = ObjectSerializer_1.ObjectSerializer.serialize(data.isMobile, "boolean", "");
        if (data.name === undefined) {
            throw new TypeError("missing required attribute 'name' on 'SyntheticsDevice' object");
        }
        res.name = ObjectSerializer_1.ObjectSerializer.serialize(data.name, "string", "");
        if (data.width === undefined) {
            throw new TypeError("missing required attribute 'width' on 'SyntheticsDevice' object");
        }
        res.width = ObjectSerializer_1.ObjectSerializer.serialize(data.width, "number", "int64");
        return res;
    };
    SyntheticsDevice.discriminator = undefined;
    SyntheticsDevice.attributeTypeMap = {
        "height": {
            "baseName": "height",
            "type": "number",
            "format": "int64"
        },
        "id": {
            "baseName": "id",
            "type": "SyntheticsDeviceID",
            "format": ""
        },
        "isMobile": {
            "baseName": "isMobile",
            "type": "boolean",
            "format": ""
        },
        "name": {
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        "width": {
            "baseName": "width",
            "type": "number",
            "format": "int64"
        }
    };
    return SyntheticsDevice;
}());
exports.SyntheticsDevice = SyntheticsDevice;
//# sourceMappingURL=SyntheticsDevice.js.map