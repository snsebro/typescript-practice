"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceLevelObjectiveQuery = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* A metric SLI query. **Required if type is `metric`**. Note that Datadog only allows the sum by aggregator to be used because this will sum up all request counts instead of averaging them, or taking the max or min of all of those requests.
*/
var ServiceLevelObjectiveQuery = /** @class */ (function () {
    function ServiceLevelObjectiveQuery() {
    }
    ServiceLevelObjectiveQuery.getAttributeTypeMap = function () {
        return ServiceLevelObjectiveQuery.attributeTypeMap;
    };
    ServiceLevelObjectiveQuery.deserialize = function (data) {
        var res = new ServiceLevelObjectiveQuery();
        if (data.denominator === undefined) {
            throw new TypeError("missing required attribute 'denominator' on 'ServiceLevelObjectiveQuery' object");
        }
        res.denominator = ObjectSerializer_1.ObjectSerializer.deserialize(data.denominator, "string", "");
        if (data.numerator === undefined) {
            throw new TypeError("missing required attribute 'numerator' on 'ServiceLevelObjectiveQuery' object");
        }
        res.numerator = ObjectSerializer_1.ObjectSerializer.deserialize(data.numerator, "string", "");
        return res;
    };
    ServiceLevelObjectiveQuery.serialize = function (data) {
        var attributeTypes = ServiceLevelObjectiveQuery.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        if (data.denominator === undefined) {
            throw new TypeError("missing required attribute 'denominator' on 'ServiceLevelObjectiveQuery' object");
        }
        res.denominator = ObjectSerializer_1.ObjectSerializer.serialize(data.denominator, "string", "");
        if (data.numerator === undefined) {
            throw new TypeError("missing required attribute 'numerator' on 'ServiceLevelObjectiveQuery' object");
        }
        res.numerator = ObjectSerializer_1.ObjectSerializer.serialize(data.numerator, "string", "");
        return res;
    };
    ServiceLevelObjectiveQuery.discriminator = undefined;
    ServiceLevelObjectiveQuery.attributeTypeMap = {
        "denominator": {
            "baseName": "denominator",
            "type": "string",
            "format": ""
        },
        "numerator": {
            "baseName": "numerator",
            "type": "string",
            "format": ""
        }
    };
    return ServiceLevelObjectiveQuery;
}());
exports.ServiceLevelObjectiveQuery = ServiceLevelObjectiveQuery;
//# sourceMappingURL=ServiceLevelObjectiveQuery.js.map