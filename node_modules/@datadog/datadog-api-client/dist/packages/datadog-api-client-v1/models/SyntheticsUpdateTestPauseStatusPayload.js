"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyntheticsUpdateTestPauseStatusPayload = void 0;
/**
* Object to start or pause an existing Synthetic test.
*/
var SyntheticsUpdateTestPauseStatusPayload = /** @class */ (function () {
    function SyntheticsUpdateTestPauseStatusPayload() {
    }
    SyntheticsUpdateTestPauseStatusPayload.getAttributeTypeMap = function () {
        return SyntheticsUpdateTestPauseStatusPayload.attributeTypeMap;
    };
    SyntheticsUpdateTestPauseStatusPayload.deserialize = function (data) {
        var res = new SyntheticsUpdateTestPauseStatusPayload();
        if (['live', 'paused', undefined].includes(data.new_status)) {
            res.newStatus = data.new_status;
        }
        else {
            throw TypeError("invalid enum value " + data.new_status + " for new_status");
        }
        return res;
    };
    SyntheticsUpdateTestPauseStatusPayload.serialize = function (data) {
        var attributeTypes = SyntheticsUpdateTestPauseStatusPayload.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        if (['live', 'paused', undefined].includes(data.newStatus)) {
            res.new_status = data.newStatus;
        }
        else {
            throw TypeError("invalid enum value " + data.newStatus + " for newStatus");
        }
        return res;
    };
    SyntheticsUpdateTestPauseStatusPayload.discriminator = undefined;
    SyntheticsUpdateTestPauseStatusPayload.attributeTypeMap = {
        "newStatus": {
            "baseName": "new_status",
            "type": "SyntheticsTestPauseStatus",
            "format": ""
        }
    };
    return SyntheticsUpdateTestPauseStatusPayload;
}());
exports.SyntheticsUpdateTestPauseStatusPayload = SyntheticsUpdateTestPauseStatusPayload;
//# sourceMappingURL=SyntheticsUpdateTestPauseStatusPayload.js.map