"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CheckStatusWidgetDefinition = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Check status shows the current status or number of results for any check performed.
*/
var CheckStatusWidgetDefinition = /** @class */ (function () {
    function CheckStatusWidgetDefinition() {
    }
    CheckStatusWidgetDefinition.getAttributeTypeMap = function () {
        return CheckStatusWidgetDefinition.attributeTypeMap;
    };
    CheckStatusWidgetDefinition.deserialize = function (data) {
        var res = new CheckStatusWidgetDefinition();
        if (data.check === undefined) {
            throw new TypeError("missing required attribute 'check' on 'CheckStatusWidgetDefinition' object");
        }
        res.check = ObjectSerializer_1.ObjectSerializer.deserialize(data.check, "string", "");
        res.group = ObjectSerializer_1.ObjectSerializer.deserialize(data.group, "string", "");
        res.groupBy = ObjectSerializer_1.ObjectSerializer.deserialize(data.group_by, "Array<string>", "");
        if (data.grouping === undefined) {
            throw new TypeError("missing required attribute 'grouping' on 'CheckStatusWidgetDefinition' object");
        }
        if (['check', 'cluster', undefined].includes(data.grouping)) {
            res.grouping = data.grouping;
        }
        else {
            throw TypeError("invalid enum value " + data.grouping + " for grouping");
        }
        res.tags = ObjectSerializer_1.ObjectSerializer.deserialize(data.tags, "Array<string>", "");
        res.time = ObjectSerializer_1.ObjectSerializer.deserialize(data.time, "WidgetTime", "");
        res.title = ObjectSerializer_1.ObjectSerializer.deserialize(data.title, "string", "");
        if (['center', 'left', 'right', undefined].includes(data.title_align)) {
            res.titleAlign = data.title_align;
        }
        else {
            throw TypeError("invalid enum value " + data.title_align + " for title_align");
        }
        res.titleSize = ObjectSerializer_1.ObjectSerializer.deserialize(data.title_size, "string", "");
        if (data.type === undefined) {
            throw new TypeError("missing required attribute 'type' on 'CheckStatusWidgetDefinition' object");
        }
        if (['check_status', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        return res;
    };
    CheckStatusWidgetDefinition.serialize = function (data) {
        var attributeTypes = CheckStatusWidgetDefinition.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        if (data.check === undefined) {
            throw new TypeError("missing required attribute 'check' on 'CheckStatusWidgetDefinition' object");
        }
        res.check = ObjectSerializer_1.ObjectSerializer.serialize(data.check, "string", "");
        res.group = ObjectSerializer_1.ObjectSerializer.serialize(data.group, "string", "");
        res.group_by = ObjectSerializer_1.ObjectSerializer.serialize(data.groupBy, "Array<string>", "");
        if (data.grouping === undefined) {
            throw new TypeError("missing required attribute 'grouping' on 'CheckStatusWidgetDefinition' object");
        }
        if (['check', 'cluster', undefined].includes(data.grouping)) {
            res.grouping = data.grouping;
        }
        else {
            throw TypeError("invalid enum value " + data.grouping + " for grouping");
        }
        res.tags = ObjectSerializer_1.ObjectSerializer.serialize(data.tags, "Array<string>", "");
        res.time = ObjectSerializer_1.ObjectSerializer.serialize(data.time, "WidgetTime", "");
        res.title = ObjectSerializer_1.ObjectSerializer.serialize(data.title, "string", "");
        if (['center', 'left', 'right', undefined].includes(data.titleAlign)) {
            res.title_align = data.titleAlign;
        }
        else {
            throw TypeError("invalid enum value " + data.titleAlign + " for titleAlign");
        }
        res.title_size = ObjectSerializer_1.ObjectSerializer.serialize(data.titleSize, "string", "");
        if (data.type === undefined) {
            throw new TypeError("missing required attribute 'type' on 'CheckStatusWidgetDefinition' object");
        }
        if (['check_status', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        return res;
    };
    CheckStatusWidgetDefinition.discriminator = undefined;
    CheckStatusWidgetDefinition.attributeTypeMap = {
        "check": {
            "baseName": "check",
            "type": "string",
            "format": ""
        },
        "group": {
            "baseName": "group",
            "type": "string",
            "format": ""
        },
        "groupBy": {
            "baseName": "group_by",
            "type": "Array<string>",
            "format": ""
        },
        "grouping": {
            "baseName": "grouping",
            "type": "WidgetGrouping",
            "format": ""
        },
        "tags": {
            "baseName": "tags",
            "type": "Array<string>",
            "format": ""
        },
        "time": {
            "baseName": "time",
            "type": "WidgetTime",
            "format": ""
        },
        "title": {
            "baseName": "title",
            "type": "string",
            "format": ""
        },
        "titleAlign": {
            "baseName": "title_align",
            "type": "WidgetTextAlign",
            "format": ""
        },
        "titleSize": {
            "baseName": "title_size",
            "type": "string",
            "format": ""
        },
        "type": {
            "baseName": "type",
            "type": "CheckStatusWidgetDefinitionType",
            "format": ""
        }
    };
    return CheckStatusWidgetDefinition;
}());
exports.CheckStatusWidgetDefinition = CheckStatusWidgetDefinition;
//# sourceMappingURL=CheckStatusWidgetDefinition.js.map