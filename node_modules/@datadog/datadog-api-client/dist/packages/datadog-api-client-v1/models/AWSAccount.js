"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AWSAccount = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Returns the AWS account associated with this integration.
*/
var AWSAccount = /** @class */ (function () {
    function AWSAccount() {
    }
    AWSAccount.getAttributeTypeMap = function () {
        return AWSAccount.attributeTypeMap;
    };
    AWSAccount.deserialize = function (data) {
        var res = new AWSAccount();
        res.accessKeyId = ObjectSerializer_1.ObjectSerializer.deserialize(data.access_key_id, "string", "");
        res.accountId = ObjectSerializer_1.ObjectSerializer.deserialize(data.account_id, "string", "");
        res.accountSpecificNamespaceRules = ObjectSerializer_1.ObjectSerializer.deserialize(data.account_specific_namespace_rules, "{ [key: string]: boolean; }", "");
        res.excludedRegions = ObjectSerializer_1.ObjectSerializer.deserialize(data.excluded_regions, "Array<string>", "");
        res.filterTags = ObjectSerializer_1.ObjectSerializer.deserialize(data.filter_tags, "Array<string>", "");
        res.hostTags = ObjectSerializer_1.ObjectSerializer.deserialize(data.host_tags, "Array<string>", "");
        res.roleName = ObjectSerializer_1.ObjectSerializer.deserialize(data.role_name, "string", "");
        res.secretAccessKey = ObjectSerializer_1.ObjectSerializer.deserialize(data.secret_access_key, "string", "");
        return res;
    };
    AWSAccount.serialize = function (data) {
        var attributeTypes = AWSAccount.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.access_key_id = ObjectSerializer_1.ObjectSerializer.serialize(data.accessKeyId, "string", "");
        res.account_id = ObjectSerializer_1.ObjectSerializer.serialize(data.accountId, "string", "");
        res.account_specific_namespace_rules = ObjectSerializer_1.ObjectSerializer.serialize(data.accountSpecificNamespaceRules, "{ [key: string]: boolean; }", "");
        res.excluded_regions = ObjectSerializer_1.ObjectSerializer.serialize(data.excludedRegions, "Array<string>", "");
        res.filter_tags = ObjectSerializer_1.ObjectSerializer.serialize(data.filterTags, "Array<string>", "");
        res.host_tags = ObjectSerializer_1.ObjectSerializer.serialize(data.hostTags, "Array<string>", "");
        res.role_name = ObjectSerializer_1.ObjectSerializer.serialize(data.roleName, "string", "");
        res.secret_access_key = ObjectSerializer_1.ObjectSerializer.serialize(data.secretAccessKey, "string", "");
        return res;
    };
    AWSAccount.discriminator = undefined;
    AWSAccount.attributeTypeMap = {
        "accessKeyId": {
            "baseName": "access_key_id",
            "type": "string",
            "format": ""
        },
        "accountId": {
            "baseName": "account_id",
            "type": "string",
            "format": ""
        },
        "accountSpecificNamespaceRules": {
            "baseName": "account_specific_namespace_rules",
            "type": "{ [key: string]: boolean; }",
            "format": ""
        },
        "excludedRegions": {
            "baseName": "excluded_regions",
            "type": "Array<string>",
            "format": ""
        },
        "filterTags": {
            "baseName": "filter_tags",
            "type": "Array<string>",
            "format": ""
        },
        "hostTags": {
            "baseName": "host_tags",
            "type": "Array<string>",
            "format": ""
        },
        "roleName": {
            "baseName": "role_name",
            "type": "string",
            "format": ""
        },
        "secretAccessKey": {
            "baseName": "secret_access_key",
            "type": "string",
            "format": ""
        }
    };
    return AWSAccount;
}());
exports.AWSAccount = AWSAccount;
//# sourceMappingURL=AWSAccount.js.map