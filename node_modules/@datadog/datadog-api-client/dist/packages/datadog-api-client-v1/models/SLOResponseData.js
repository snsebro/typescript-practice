"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SLOResponseData = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* A service level objective object includes a service level indicator, thresholds for one or more timeframes, and metadata (`name`, `description`, `tags`, etc.).
*/
var SLOResponseData = /** @class */ (function () {
    function SLOResponseData() {
    }
    SLOResponseData.getAttributeTypeMap = function () {
        return SLOResponseData.attributeTypeMap;
    };
    SLOResponseData.deserialize = function (data) {
        var res = new SLOResponseData();
        res.configuredAlertIds = ObjectSerializer_1.ObjectSerializer.deserialize(data.configured_alert_ids, "Array<number>", "int64");
        res.createdAt = ObjectSerializer_1.ObjectSerializer.deserialize(data.created_at, "number", "int64");
        res.creator = ObjectSerializer_1.ObjectSerializer.deserialize(data.creator, "Creator", "");
        res.description = ObjectSerializer_1.ObjectSerializer.deserialize(data.description, "string", "");
        res.groups = ObjectSerializer_1.ObjectSerializer.deserialize(data.groups, "Array<string>", "");
        res.id = ObjectSerializer_1.ObjectSerializer.deserialize(data.id, "string", "");
        res.modifiedAt = ObjectSerializer_1.ObjectSerializer.deserialize(data.modified_at, "number", "int64");
        res.monitorIds = ObjectSerializer_1.ObjectSerializer.deserialize(data.monitor_ids, "Array<number>", "int64");
        res.monitorTags = ObjectSerializer_1.ObjectSerializer.deserialize(data.monitor_tags, "Array<string>", "");
        res.name = ObjectSerializer_1.ObjectSerializer.deserialize(data.name, "string", "");
        res.query = ObjectSerializer_1.ObjectSerializer.deserialize(data.query, "ServiceLevelObjectiveQuery", "");
        res.tags = ObjectSerializer_1.ObjectSerializer.deserialize(data.tags, "Array<string>", "");
        res.thresholds = ObjectSerializer_1.ObjectSerializer.deserialize(data.thresholds, "Array<SLOThreshold>", "");
        if (['metric', 'monitor', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        return res;
    };
    SLOResponseData.serialize = function (data) {
        var attributeTypes = SLOResponseData.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.configured_alert_ids = ObjectSerializer_1.ObjectSerializer.serialize(data.configuredAlertIds, "Array<number>", "int64");
        res.created_at = ObjectSerializer_1.ObjectSerializer.serialize(data.createdAt, "number", "int64");
        res.creator = ObjectSerializer_1.ObjectSerializer.serialize(data.creator, "Creator", "");
        res.description = ObjectSerializer_1.ObjectSerializer.serialize(data.description, "string", "");
        res.groups = ObjectSerializer_1.ObjectSerializer.serialize(data.groups, "Array<string>", "");
        res.id = ObjectSerializer_1.ObjectSerializer.serialize(data.id, "string", "");
        res.modified_at = ObjectSerializer_1.ObjectSerializer.serialize(data.modifiedAt, "number", "int64");
        res.monitor_ids = ObjectSerializer_1.ObjectSerializer.serialize(data.monitorIds, "Array<number>", "int64");
        res.monitor_tags = ObjectSerializer_1.ObjectSerializer.serialize(data.monitorTags, "Array<string>", "");
        res.name = ObjectSerializer_1.ObjectSerializer.serialize(data.name, "string", "");
        res.query = ObjectSerializer_1.ObjectSerializer.serialize(data.query, "ServiceLevelObjectiveQuery", "");
        res.tags = ObjectSerializer_1.ObjectSerializer.serialize(data.tags, "Array<string>", "");
        res.thresholds = ObjectSerializer_1.ObjectSerializer.serialize(data.thresholds, "Array<SLOThreshold>", "");
        if (['metric', 'monitor', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        return res;
    };
    SLOResponseData.discriminator = undefined;
    SLOResponseData.attributeTypeMap = {
        "configuredAlertIds": {
            "baseName": "configured_alert_ids",
            "type": "Array<number>",
            "format": "int64"
        },
        "createdAt": {
            "baseName": "created_at",
            "type": "number",
            "format": "int64"
        },
        "creator": {
            "baseName": "creator",
            "type": "Creator",
            "format": ""
        },
        "description": {
            "baseName": "description",
            "type": "string",
            "format": ""
        },
        "groups": {
            "baseName": "groups",
            "type": "Array<string>",
            "format": ""
        },
        "id": {
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        "modifiedAt": {
            "baseName": "modified_at",
            "type": "number",
            "format": "int64"
        },
        "monitorIds": {
            "baseName": "monitor_ids",
            "type": "Array<number>",
            "format": "int64"
        },
        "monitorTags": {
            "baseName": "monitor_tags",
            "type": "Array<string>",
            "format": ""
        },
        "name": {
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        "query": {
            "baseName": "query",
            "type": "ServiceLevelObjectiveQuery",
            "format": ""
        },
        "tags": {
            "baseName": "tags",
            "type": "Array<string>",
            "format": ""
        },
        "thresholds": {
            "baseName": "thresholds",
            "type": "Array<SLOThreshold>",
            "format": ""
        },
        "type": {
            "baseName": "type",
            "type": "SLOType",
            "format": ""
        }
    };
    return SLOResponseData;
}());
exports.SLOResponseData = SLOResponseData;
//# sourceMappingURL=SLOResponseData.js.map