"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyntheticsAssertionTarget = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* An assertion which uses a simple target.
*/
var SyntheticsAssertionTarget = /** @class */ (function () {
    function SyntheticsAssertionTarget() {
    }
    SyntheticsAssertionTarget.getAttributeTypeMap = function () {
        return SyntheticsAssertionTarget.attributeTypeMap;
    };
    SyntheticsAssertionTarget.deserialize = function (data) {
        var res = new SyntheticsAssertionTarget();
        if (data.operator === undefined) {
            throw new TypeError("missing required attribute 'operator' on 'SyntheticsAssertionTarget' object");
        }
        if (['contains', 'doesNotContain', 'is', 'isNot', 'lessThan', 'lessThanOrEqual', 'moreThan', 'moreThanOrEqual', 'matches', 'doesNotMatch', 'validates', 'isInMoreThan', 'isInLessThan', undefined].includes(data.operator)) {
            res.operator = data.operator;
        }
        else {
            throw TypeError("invalid enum value " + data.operator + " for operator");
        }
        res.property = ObjectSerializer_1.ObjectSerializer.deserialize(data.property, "string", "");
        res.target = ObjectSerializer_1.ObjectSerializer.deserialize(data.target, "any", "");
        if (data.type === undefined) {
            throw new TypeError("missing required attribute 'type' on 'SyntheticsAssertionTarget' object");
        }
        if (['body', 'header', 'statusCode', 'certificate', 'responseTime', 'property', 'recordEvery', 'recordSome', 'tlsVersion', 'minTlsVersion', 'latency', 'packetLossPercentage', 'packetsReceived', 'networkHop', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        return res;
    };
    SyntheticsAssertionTarget.serialize = function (data) {
        var attributeTypes = SyntheticsAssertionTarget.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        if (data.operator === undefined) {
            throw new TypeError("missing required attribute 'operator' on 'SyntheticsAssertionTarget' object");
        }
        if (['contains', 'doesNotContain', 'is', 'isNot', 'lessThan', 'lessThanOrEqual', 'moreThan', 'moreThanOrEqual', 'matches', 'doesNotMatch', 'validates', 'isInMoreThan', 'isInLessThan', undefined].includes(data.operator)) {
            res.operator = data.operator;
        }
        else {
            throw TypeError("invalid enum value " + data.operator + " for operator");
        }
        res.property = ObjectSerializer_1.ObjectSerializer.serialize(data.property, "string", "");
        res.target = ObjectSerializer_1.ObjectSerializer.serialize(data.target, "any", "");
        if (data.type === undefined) {
            throw new TypeError("missing required attribute 'type' on 'SyntheticsAssertionTarget' object");
        }
        if (['body', 'header', 'statusCode', 'certificate', 'responseTime', 'property', 'recordEvery', 'recordSome', 'tlsVersion', 'minTlsVersion', 'latency', 'packetLossPercentage', 'packetsReceived', 'networkHop', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        return res;
    };
    SyntheticsAssertionTarget.discriminator = undefined;
    SyntheticsAssertionTarget.attributeTypeMap = {
        "operator": {
            "baseName": "operator",
            "type": "SyntheticsAssertionOperator",
            "format": ""
        },
        "property": {
            "baseName": "property",
            "type": "string",
            "format": ""
        },
        "target": {
            "baseName": "target",
            "type": "any",
            "format": ""
        },
        "type": {
            "baseName": "type",
            "type": "SyntheticsAssertionType",
            "format": ""
        }
    };
    return SyntheticsAssertionTarget;
}());
exports.SyntheticsAssertionTarget = SyntheticsAssertionTarget;
//# sourceMappingURL=SyntheticsAssertionTarget.js.map