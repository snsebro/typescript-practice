"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogsAttributeRemapper = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* The remapper processor remaps any source attribute(s) or tag to another target attribute or tag. Constraints on the tag/attribute name are explained in the [Tag Best Practice documentation](https://docs.datadoghq.com/logs/guide/log-parsing-best-practice). Some additional constraints are applied as `:` or `,` are not allowed in the target tag/attribute name.
*/
var LogsAttributeRemapper = /** @class */ (function () {
    function LogsAttributeRemapper() {
    }
    LogsAttributeRemapper.getAttributeTypeMap = function () {
        return LogsAttributeRemapper.attributeTypeMap;
    };
    LogsAttributeRemapper.deserialize = function (data) {
        var res = new LogsAttributeRemapper();
        res.isEnabled = ObjectSerializer_1.ObjectSerializer.deserialize(data.is_enabled, "boolean", "");
        res.name = ObjectSerializer_1.ObjectSerializer.deserialize(data.name, "string", "");
        res.overrideOnConflict = ObjectSerializer_1.ObjectSerializer.deserialize(data.override_on_conflict, "boolean", "");
        res.preserveSource = ObjectSerializer_1.ObjectSerializer.deserialize(data.preserve_source, "boolean", "");
        res.sourceType = ObjectSerializer_1.ObjectSerializer.deserialize(data.source_type, "string", "");
        if (data.sources === undefined) {
            throw new TypeError("missing required attribute 'sources' on 'LogsAttributeRemapper' object");
        }
        res.sources = ObjectSerializer_1.ObjectSerializer.deserialize(data.sources, "Array<string>", "");
        if (data.target === undefined) {
            throw new TypeError("missing required attribute 'target' on 'LogsAttributeRemapper' object");
        }
        res.target = ObjectSerializer_1.ObjectSerializer.deserialize(data.target, "string", "");
        if (['auto', 'string', 'integer', 'double', undefined].includes(data.target_format)) {
            res.targetFormat = data.target_format;
        }
        else {
            throw TypeError("invalid enum value " + data.target_format + " for target_format");
        }
        res.targetType = ObjectSerializer_1.ObjectSerializer.deserialize(data.target_type, "string", "");
        if (data.type === undefined) {
            throw new TypeError("missing required attribute 'type' on 'LogsAttributeRemapper' object");
        }
        if (['attribute-remapper', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        return res;
    };
    LogsAttributeRemapper.serialize = function (data) {
        var attributeTypes = LogsAttributeRemapper.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.is_enabled = ObjectSerializer_1.ObjectSerializer.serialize(data.isEnabled, "boolean", "");
        res.name = ObjectSerializer_1.ObjectSerializer.serialize(data.name, "string", "");
        res.override_on_conflict = ObjectSerializer_1.ObjectSerializer.serialize(data.overrideOnConflict, "boolean", "");
        res.preserve_source = ObjectSerializer_1.ObjectSerializer.serialize(data.preserveSource, "boolean", "");
        res.source_type = ObjectSerializer_1.ObjectSerializer.serialize(data.sourceType, "string", "");
        if (data.sources === undefined) {
            throw new TypeError("missing required attribute 'sources' on 'LogsAttributeRemapper' object");
        }
        res.sources = ObjectSerializer_1.ObjectSerializer.serialize(data.sources, "Array<string>", "");
        if (data.target === undefined) {
            throw new TypeError("missing required attribute 'target' on 'LogsAttributeRemapper' object");
        }
        res.target = ObjectSerializer_1.ObjectSerializer.serialize(data.target, "string", "");
        if (['auto', 'string', 'integer', 'double', undefined].includes(data.targetFormat)) {
            res.target_format = data.targetFormat;
        }
        else {
            throw TypeError("invalid enum value " + data.targetFormat + " for targetFormat");
        }
        res.target_type = ObjectSerializer_1.ObjectSerializer.serialize(data.targetType, "string", "");
        if (data.type === undefined) {
            throw new TypeError("missing required attribute 'type' on 'LogsAttributeRemapper' object");
        }
        if (['attribute-remapper', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        return res;
    };
    LogsAttributeRemapper.discriminator = undefined;
    LogsAttributeRemapper.attributeTypeMap = {
        "isEnabled": {
            "baseName": "is_enabled",
            "type": "boolean",
            "format": ""
        },
        "name": {
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        "overrideOnConflict": {
            "baseName": "override_on_conflict",
            "type": "boolean",
            "format": ""
        },
        "preserveSource": {
            "baseName": "preserve_source",
            "type": "boolean",
            "format": ""
        },
        "sourceType": {
            "baseName": "source_type",
            "type": "string",
            "format": ""
        },
        "sources": {
            "baseName": "sources",
            "type": "Array<string>",
            "format": ""
        },
        "target": {
            "baseName": "target",
            "type": "string",
            "format": ""
        },
        "targetFormat": {
            "baseName": "target_format",
            "type": "TargetFormatType",
            "format": ""
        },
        "targetType": {
            "baseName": "target_type",
            "type": "string",
            "format": ""
        },
        "type": {
            "baseName": "type",
            "type": "LogsAttributeRemapperType",
            "format": ""
        }
    };
    return LogsAttributeRemapper;
}());
exports.LogsAttributeRemapper = LogsAttributeRemapper;
//# sourceMappingURL=LogsAttributeRemapper.js.map