"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsageComplianceHour = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Compliance Monitoring usage for a given organization for a given hour.
*/
var UsageComplianceHour = /** @class */ (function () {
    function UsageComplianceHour() {
    }
    UsageComplianceHour.getAttributeTypeMap = function () {
        return UsageComplianceHour.attributeTypeMap;
    };
    UsageComplianceHour.deserialize = function (data) {
        var res = new UsageComplianceHour();
        res.complianceContainerCount = ObjectSerializer_1.ObjectSerializer.deserialize(data.compliance_container_count, "number", "int64");
        res.complianceHostCount = ObjectSerializer_1.ObjectSerializer.deserialize(data.compliance_host_count, "number", "int64");
        res.hour = ObjectSerializer_1.ObjectSerializer.deserialize(data.hour, "Date", "date-time");
        return res;
    };
    UsageComplianceHour.serialize = function (data) {
        var attributeTypes = UsageComplianceHour.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.compliance_container_count = ObjectSerializer_1.ObjectSerializer.serialize(data.complianceContainerCount, "number", "int64");
        res.compliance_host_count = ObjectSerializer_1.ObjectSerializer.serialize(data.complianceHostCount, "number", "int64");
        res.hour = ObjectSerializer_1.ObjectSerializer.serialize(data.hour, "Date", "date-time");
        return res;
    };
    UsageComplianceHour.discriminator = undefined;
    UsageComplianceHour.attributeTypeMap = {
        "complianceContainerCount": {
            "baseName": "compliance_container_count",
            "type": "number",
            "format": "int64"
        },
        "complianceHostCount": {
            "baseName": "compliance_host_count",
            "type": "number",
            "format": "int64"
        },
        "hour": {
            "baseName": "hour",
            "type": "Date",
            "format": "date-time"
        }
    };
    return UsageComplianceHour;
}());
exports.UsageComplianceHour = UsageComplianceHour;
//# sourceMappingURL=UsageComplianceHour.js.map