"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogsServiceRemapper = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Use this processor if you want to assign one or more attributes as the official service.  **Note:** If multiple service remapper processors can be applied to a given log, only the first one (according to the pipeline order) is taken into account.
*/
var LogsServiceRemapper = /** @class */ (function () {
    function LogsServiceRemapper() {
    }
    LogsServiceRemapper.getAttributeTypeMap = function () {
        return LogsServiceRemapper.attributeTypeMap;
    };
    LogsServiceRemapper.deserialize = function (data) {
        var res = new LogsServiceRemapper();
        res.isEnabled = ObjectSerializer_1.ObjectSerializer.deserialize(data.is_enabled, "boolean", "");
        res.name = ObjectSerializer_1.ObjectSerializer.deserialize(data.name, "string", "");
        if (data.sources === undefined) {
            throw new TypeError("missing required attribute 'sources' on 'LogsServiceRemapper' object");
        }
        res.sources = ObjectSerializer_1.ObjectSerializer.deserialize(data.sources, "Array<string>", "");
        if (data.type === undefined) {
            throw new TypeError("missing required attribute 'type' on 'LogsServiceRemapper' object");
        }
        if (['service-remapper', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        return res;
    };
    LogsServiceRemapper.serialize = function (data) {
        var attributeTypes = LogsServiceRemapper.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.is_enabled = ObjectSerializer_1.ObjectSerializer.serialize(data.isEnabled, "boolean", "");
        res.name = ObjectSerializer_1.ObjectSerializer.serialize(data.name, "string", "");
        if (data.sources === undefined) {
            throw new TypeError("missing required attribute 'sources' on 'LogsServiceRemapper' object");
        }
        res.sources = ObjectSerializer_1.ObjectSerializer.serialize(data.sources, "Array<string>", "");
        if (data.type === undefined) {
            throw new TypeError("missing required attribute 'type' on 'LogsServiceRemapper' object");
        }
        if (['service-remapper', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        return res;
    };
    LogsServiceRemapper.discriminator = undefined;
    LogsServiceRemapper.attributeTypeMap = {
        "isEnabled": {
            "baseName": "is_enabled",
            "type": "boolean",
            "format": ""
        },
        "name": {
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        "sources": {
            "baseName": "sources",
            "type": "Array<string>",
            "format": ""
        },
        "type": {
            "baseName": "type",
            "type": "LogsServiceRemapperType",
            "format": ""
        }
    };
    return LogsServiceRemapper;
}());
exports.LogsServiceRemapper = LogsServiceRemapper;
//# sourceMappingURL=LogsServiceRemapper.js.map