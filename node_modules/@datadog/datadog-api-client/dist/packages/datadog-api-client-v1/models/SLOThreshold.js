"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SLOThreshold = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* SLO thresholds (target and optionally warning) for a single time window.
*/
var SLOThreshold = /** @class */ (function () {
    function SLOThreshold() {
    }
    SLOThreshold.getAttributeTypeMap = function () {
        return SLOThreshold.attributeTypeMap;
    };
    SLOThreshold.deserialize = function (data) {
        var res = new SLOThreshold();
        if (data.target === undefined) {
            throw new TypeError("missing required attribute 'target' on 'SLOThreshold' object");
        }
        res.target = ObjectSerializer_1.ObjectSerializer.deserialize(data.target, "number", "double");
        res.targetDisplay = ObjectSerializer_1.ObjectSerializer.deserialize(data.target_display, "string", "");
        if (data.timeframe === undefined) {
            throw new TypeError("missing required attribute 'timeframe' on 'SLOThreshold' object");
        }
        if (['7d', '30d', '90d', undefined].includes(data.timeframe)) {
            res.timeframe = data.timeframe;
        }
        else {
            throw TypeError("invalid enum value " + data.timeframe + " for timeframe");
        }
        res.warning = ObjectSerializer_1.ObjectSerializer.deserialize(data.warning, "number", "double");
        res.warningDisplay = ObjectSerializer_1.ObjectSerializer.deserialize(data.warning_display, "string", "");
        return res;
    };
    SLOThreshold.serialize = function (data) {
        var attributeTypes = SLOThreshold.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        if (data.target === undefined) {
            throw new TypeError("missing required attribute 'target' on 'SLOThreshold' object");
        }
        res.target = ObjectSerializer_1.ObjectSerializer.serialize(data.target, "number", "double");
        res.target_display = ObjectSerializer_1.ObjectSerializer.serialize(data.targetDisplay, "string", "");
        if (data.timeframe === undefined) {
            throw new TypeError("missing required attribute 'timeframe' on 'SLOThreshold' object");
        }
        if (['7d', '30d', '90d', undefined].includes(data.timeframe)) {
            res.timeframe = data.timeframe;
        }
        else {
            throw TypeError("invalid enum value " + data.timeframe + " for timeframe");
        }
        res.warning = ObjectSerializer_1.ObjectSerializer.serialize(data.warning, "number", "double");
        res.warning_display = ObjectSerializer_1.ObjectSerializer.serialize(data.warningDisplay, "string", "");
        return res;
    };
    SLOThreshold.discriminator = undefined;
    SLOThreshold.attributeTypeMap = {
        "target": {
            "baseName": "target",
            "type": "number",
            "format": "double"
        },
        "targetDisplay": {
            "baseName": "target_display",
            "type": "string",
            "format": ""
        },
        "timeframe": {
            "baseName": "timeframe",
            "type": "SLOTimeframe",
            "format": ""
        },
        "warning": {
            "baseName": "warning",
            "type": "number",
            "format": "double"
        },
        "warningDisplay": {
            "baseName": "warning_display",
            "type": "string",
            "format": ""
        }
    };
    return SLOThreshold;
}());
exports.SLOThreshold = SLOThreshold;
//# sourceMappingURL=SLOThreshold.js.map