"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyntheticsCITest = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Test configuration for Synthetics CI
*/
var SyntheticsCITest = /** @class */ (function () {
    function SyntheticsCITest() {
    }
    SyntheticsCITest.getAttributeTypeMap = function () {
        return SyntheticsCITest.attributeTypeMap;
    };
    SyntheticsCITest.deserialize = function (data) {
        var res = new SyntheticsCITest();
        res.allowInsecureCertificates = ObjectSerializer_1.ObjectSerializer.deserialize(data.allowInsecureCertificates, "boolean", "");
        res.basicAuth = ObjectSerializer_1.ObjectSerializer.deserialize(data.basicAuth, "SyntheticsBasicAuth", "");
        res.body = ObjectSerializer_1.ObjectSerializer.deserialize(data.body, "string", "");
        res.bodyType = ObjectSerializer_1.ObjectSerializer.deserialize(data.bodyType, "string", "");
        res.cookies = ObjectSerializer_1.ObjectSerializer.deserialize(data.cookies, "string", "");
        res.deviceIds = ObjectSerializer_1.ObjectSerializer.deserialize(data.deviceIds, "Array<SyntheticsDeviceID>", "");
        res.followRedirects = ObjectSerializer_1.ObjectSerializer.deserialize(data.followRedirects, "boolean", "");
        res.headers = ObjectSerializer_1.ObjectSerializer.deserialize(data.headers, "{ [key: string]: string; }", "");
        res.locations = ObjectSerializer_1.ObjectSerializer.deserialize(data.locations, "Array<string>", "");
        res.metadata = ObjectSerializer_1.ObjectSerializer.deserialize(data.metadata, "SyntheticsCITestMetadata", "");
        if (data.public_id === undefined) {
            throw new TypeError("missing required attribute 'public_id' on 'SyntheticsCITest' object");
        }
        res.publicId = ObjectSerializer_1.ObjectSerializer.deserialize(data.public_id, "string", "");
        res.retry = ObjectSerializer_1.ObjectSerializer.deserialize(data.retry, "SyntheticsTestOptionsRetry", "");
        res.startUrl = ObjectSerializer_1.ObjectSerializer.deserialize(data.startUrl, "string", "");
        res.variables = ObjectSerializer_1.ObjectSerializer.deserialize(data.variables, "{ [key: string]: string; }", "");
        return res;
    };
    SyntheticsCITest.serialize = function (data) {
        var attributeTypes = SyntheticsCITest.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.allowInsecureCertificates = ObjectSerializer_1.ObjectSerializer.serialize(data.allowInsecureCertificates, "boolean", "");
        res.basicAuth = ObjectSerializer_1.ObjectSerializer.serialize(data.basicAuth, "SyntheticsBasicAuth", "");
        res.body = ObjectSerializer_1.ObjectSerializer.serialize(data.body, "string", "");
        res.bodyType = ObjectSerializer_1.ObjectSerializer.serialize(data.bodyType, "string", "");
        res.cookies = ObjectSerializer_1.ObjectSerializer.serialize(data.cookies, "string", "");
        res.deviceIds = ObjectSerializer_1.ObjectSerializer.serialize(data.deviceIds, "Array<SyntheticsDeviceID>", "");
        res.followRedirects = ObjectSerializer_1.ObjectSerializer.serialize(data.followRedirects, "boolean", "");
        res.headers = ObjectSerializer_1.ObjectSerializer.serialize(data.headers, "{ [key: string]: string; }", "");
        res.locations = ObjectSerializer_1.ObjectSerializer.serialize(data.locations, "Array<string>", "");
        res.metadata = ObjectSerializer_1.ObjectSerializer.serialize(data.metadata, "SyntheticsCITestMetadata", "");
        if (data.publicId === undefined) {
            throw new TypeError("missing required attribute 'public_id' on 'SyntheticsCITest' object");
        }
        res.public_id = ObjectSerializer_1.ObjectSerializer.serialize(data.publicId, "string", "");
        res.retry = ObjectSerializer_1.ObjectSerializer.serialize(data.retry, "SyntheticsTestOptionsRetry", "");
        res.startUrl = ObjectSerializer_1.ObjectSerializer.serialize(data.startUrl, "string", "");
        res.variables = ObjectSerializer_1.ObjectSerializer.serialize(data.variables, "{ [key: string]: string; }", "");
        return res;
    };
    SyntheticsCITest.discriminator = undefined;
    SyntheticsCITest.attributeTypeMap = {
        "allowInsecureCertificates": {
            "baseName": "allowInsecureCertificates",
            "type": "boolean",
            "format": ""
        },
        "basicAuth": {
            "baseName": "basicAuth",
            "type": "SyntheticsBasicAuth",
            "format": ""
        },
        "body": {
            "baseName": "body",
            "type": "string",
            "format": ""
        },
        "bodyType": {
            "baseName": "bodyType",
            "type": "string",
            "format": ""
        },
        "cookies": {
            "baseName": "cookies",
            "type": "string",
            "format": ""
        },
        "deviceIds": {
            "baseName": "deviceIds",
            "type": "Array<SyntheticsDeviceID>",
            "format": ""
        },
        "followRedirects": {
            "baseName": "followRedirects",
            "type": "boolean",
            "format": ""
        },
        "headers": {
            "baseName": "headers",
            "type": "{ [key: string]: string; }",
            "format": ""
        },
        "locations": {
            "baseName": "locations",
            "type": "Array<string>",
            "format": ""
        },
        "metadata": {
            "baseName": "metadata",
            "type": "SyntheticsCITestMetadata",
            "format": ""
        },
        "publicId": {
            "baseName": "public_id",
            "type": "string",
            "format": ""
        },
        "retry": {
            "baseName": "retry",
            "type": "SyntheticsTestOptionsRetry",
            "format": ""
        },
        "startUrl": {
            "baseName": "startUrl",
            "type": "string",
            "format": ""
        },
        "variables": {
            "baseName": "variables",
            "type": "{ [key: string]: string; }",
            "format": ""
        }
    };
    return SyntheticsCITest;
}());
exports.SyntheticsCITest = SyntheticsCITest;
//# sourceMappingURL=SyntheticsCITest.js.map