/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { MetricsQueryUnit } from './MetricsQueryUnit';
/**
* Object containing all metric names returned and their associated metadata.
*/
export declare class MetricsQueryMetadata {
    /**
    * Aggregation type.
    */
    'aggr'?: string;
    /**
    * Display name of the metric.
    */
    'displayName'?: string;
    /**
    * End of the time window, milliseconds since Unix epoch.
    */
    'end'?: number;
    /**
    * Metric expression.
    */
    'expression'?: string;
    /**
    * Number of seconds between data samples.
    */
    'interval'?: number;
    /**
    * Number of data samples.
    */
    'length'?: number;
    /**
    * Metric name.
    */
    'metric'?: string;
    /**
    * List of points of the time series.
    */
    'pointlist'?: Array<Array<number>>;
    /**
    * Metric scope, comma separated list of tags.
    */
    'scope'?: string;
    /**
    * Start of the time window, milliseconds since Unix epoch.
    */
    'start'?: number;
    /**
    * Detailed information about the metric unit. First element describes the \"primary unit\" (for example, `bytes` in `bytes per second`), second describes the \"per unit\" (for example, `second` in `bytes per second`).
    */
    'unit'?: Array<MetricsQueryUnit>;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: {
        [key: string]: {
            baseName: string;
            type: string;
            format: string;
        };
    };
    static getAttributeTypeMap(): {
        [key: string]: {
            baseName: string;
            type: string;
            format: string;
        };
    };
    static deserialize(data: {
        [key: string]: any;
    }): MetricsQueryMetadata;
    static serialize(data: MetricsQueryMetadata): {
        [key: string]: any;
    };
    constructor();
}
