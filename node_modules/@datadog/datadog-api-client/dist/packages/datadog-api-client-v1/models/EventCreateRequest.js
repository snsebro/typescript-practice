"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventCreateRequest = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Object representing an event.
*/
var EventCreateRequest = /** @class */ (function () {
    function EventCreateRequest() {
    }
    EventCreateRequest.getAttributeTypeMap = function () {
        return EventCreateRequest.attributeTypeMap;
    };
    EventCreateRequest.deserialize = function (data) {
        var res = new EventCreateRequest();
        res.aggregationKey = ObjectSerializer_1.ObjectSerializer.deserialize(data.aggregation_key, "string", "");
        if (['error', 'warning', 'info', 'success', 'user_update', 'recommendation', 'snapshot', undefined].includes(data.alert_type)) {
            res.alertType = data.alert_type;
        }
        else {
            throw TypeError("invalid enum value " + data.alert_type + " for alert_type");
        }
        res.dateHappened = ObjectSerializer_1.ObjectSerializer.deserialize(data.date_happened, "number", "int64");
        res.deviceName = ObjectSerializer_1.ObjectSerializer.deserialize(data.device_name, "string", "");
        res.host = ObjectSerializer_1.ObjectSerializer.deserialize(data.host, "string", "");
        res.id = ObjectSerializer_1.ObjectSerializer.deserialize(data.id, "number", "int64");
        res.payload = ObjectSerializer_1.ObjectSerializer.deserialize(data.payload, "string", "");
        if (['normal', 'low', undefined].includes(data.priority)) {
            res.priority = data.priority;
        }
        else {
            throw TypeError("invalid enum value " + data.priority + " for priority");
        }
        res.relatedEventId = ObjectSerializer_1.ObjectSerializer.deserialize(data.related_event_id, "number", "int64");
        res.sourceTypeName = ObjectSerializer_1.ObjectSerializer.deserialize(data.source_type_name, "string", "");
        res.tags = ObjectSerializer_1.ObjectSerializer.deserialize(data.tags, "Array<string>", "");
        if (data.text === undefined) {
            throw new TypeError("missing required attribute 'text' on 'EventCreateRequest' object");
        }
        res.text = ObjectSerializer_1.ObjectSerializer.deserialize(data.text, "string", "");
        if (data.title === undefined) {
            throw new TypeError("missing required attribute 'title' on 'EventCreateRequest' object");
        }
        res.title = ObjectSerializer_1.ObjectSerializer.deserialize(data.title, "string", "");
        res.url = ObjectSerializer_1.ObjectSerializer.deserialize(data.url, "string", "");
        return res;
    };
    EventCreateRequest.serialize = function (data) {
        var attributeTypes = EventCreateRequest.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.aggregation_key = ObjectSerializer_1.ObjectSerializer.serialize(data.aggregationKey, "string", "");
        if (['error', 'warning', 'info', 'success', 'user_update', 'recommendation', 'snapshot', undefined].includes(data.alertType)) {
            res.alert_type = data.alertType;
        }
        else {
            throw TypeError("invalid enum value " + data.alertType + " for alertType");
        }
        res.date_happened = ObjectSerializer_1.ObjectSerializer.serialize(data.dateHappened, "number", "int64");
        res.device_name = ObjectSerializer_1.ObjectSerializer.serialize(data.deviceName, "string", "");
        res.host = ObjectSerializer_1.ObjectSerializer.serialize(data.host, "string", "");
        res.id = ObjectSerializer_1.ObjectSerializer.serialize(data.id, "number", "int64");
        res.payload = ObjectSerializer_1.ObjectSerializer.serialize(data.payload, "string", "");
        if (['normal', 'low', undefined].includes(data.priority)) {
            res.priority = data.priority;
        }
        else {
            throw TypeError("invalid enum value " + data.priority + " for priority");
        }
        res.related_event_id = ObjectSerializer_1.ObjectSerializer.serialize(data.relatedEventId, "number", "int64");
        res.source_type_name = ObjectSerializer_1.ObjectSerializer.serialize(data.sourceTypeName, "string", "");
        res.tags = ObjectSerializer_1.ObjectSerializer.serialize(data.tags, "Array<string>", "");
        if (data.text === undefined) {
            throw new TypeError("missing required attribute 'text' on 'EventCreateRequest' object");
        }
        res.text = ObjectSerializer_1.ObjectSerializer.serialize(data.text, "string", "");
        if (data.title === undefined) {
            throw new TypeError("missing required attribute 'title' on 'EventCreateRequest' object");
        }
        res.title = ObjectSerializer_1.ObjectSerializer.serialize(data.title, "string", "");
        res.url = ObjectSerializer_1.ObjectSerializer.serialize(data.url, "string", "");
        return res;
    };
    EventCreateRequest.discriminator = undefined;
    EventCreateRequest.attributeTypeMap = {
        "aggregationKey": {
            "baseName": "aggregation_key",
            "type": "string",
            "format": ""
        },
        "alertType": {
            "baseName": "alert_type",
            "type": "EventAlertType",
            "format": ""
        },
        "dateHappened": {
            "baseName": "date_happened",
            "type": "number",
            "format": "int64"
        },
        "deviceName": {
            "baseName": "device_name",
            "type": "string",
            "format": ""
        },
        "host": {
            "baseName": "host",
            "type": "string",
            "format": ""
        },
        "id": {
            "baseName": "id",
            "type": "number",
            "format": "int64"
        },
        "payload": {
            "baseName": "payload",
            "type": "string",
            "format": ""
        },
        "priority": {
            "baseName": "priority",
            "type": "EventPriority",
            "format": ""
        },
        "relatedEventId": {
            "baseName": "related_event_id",
            "type": "number",
            "format": "int64"
        },
        "sourceTypeName": {
            "baseName": "source_type_name",
            "type": "string",
            "format": ""
        },
        "tags": {
            "baseName": "tags",
            "type": "Array<string>",
            "format": ""
        },
        "text": {
            "baseName": "text",
            "type": "string",
            "format": ""
        },
        "title": {
            "baseName": "title",
            "type": "string",
            "format": ""
        },
        "url": {
            "baseName": "url",
            "type": "string",
            "format": ""
        }
    };
    return EventCreateRequest;
}());
exports.EventCreateRequest = EventCreateRequest;
//# sourceMappingURL=EventCreateRequest.js.map