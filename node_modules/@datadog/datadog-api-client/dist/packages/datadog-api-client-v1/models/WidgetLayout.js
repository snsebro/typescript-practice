"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.WidgetLayout = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* The layout for a widget on a `free` or **new dashboard layout** dashboard.
*/
var WidgetLayout = /** @class */ (function () {
    function WidgetLayout() {
    }
    WidgetLayout.getAttributeTypeMap = function () {
        return WidgetLayout.attributeTypeMap;
    };
    WidgetLayout.deserialize = function (data) {
        var res = new WidgetLayout();
        if (data.height === undefined) {
            throw new TypeError("missing required attribute 'height' on 'WidgetLayout' object");
        }
        res.height = ObjectSerializer_1.ObjectSerializer.deserialize(data.height, "number", "int64");
        res.isColumnBreak = ObjectSerializer_1.ObjectSerializer.deserialize(data.is_column_break, "boolean", "");
        if (data.width === undefined) {
            throw new TypeError("missing required attribute 'width' on 'WidgetLayout' object");
        }
        res.width = ObjectSerializer_1.ObjectSerializer.deserialize(data.width, "number", "int64");
        if (data.x === undefined) {
            throw new TypeError("missing required attribute 'x' on 'WidgetLayout' object");
        }
        res.x = ObjectSerializer_1.ObjectSerializer.deserialize(data.x, "number", "int64");
        if (data.y === undefined) {
            throw new TypeError("missing required attribute 'y' on 'WidgetLayout' object");
        }
        res.y = ObjectSerializer_1.ObjectSerializer.deserialize(data.y, "number", "int64");
        return res;
    };
    WidgetLayout.serialize = function (data) {
        var attributeTypes = WidgetLayout.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        if (data.height === undefined) {
            throw new TypeError("missing required attribute 'height' on 'WidgetLayout' object");
        }
        res.height = ObjectSerializer_1.ObjectSerializer.serialize(data.height, "number", "int64");
        res.is_column_break = ObjectSerializer_1.ObjectSerializer.serialize(data.isColumnBreak, "boolean", "");
        if (data.width === undefined) {
            throw new TypeError("missing required attribute 'width' on 'WidgetLayout' object");
        }
        res.width = ObjectSerializer_1.ObjectSerializer.serialize(data.width, "number", "int64");
        if (data.x === undefined) {
            throw new TypeError("missing required attribute 'x' on 'WidgetLayout' object");
        }
        res.x = ObjectSerializer_1.ObjectSerializer.serialize(data.x, "number", "int64");
        if (data.y === undefined) {
            throw new TypeError("missing required attribute 'y' on 'WidgetLayout' object");
        }
        res.y = ObjectSerializer_1.ObjectSerializer.serialize(data.y, "number", "int64");
        return res;
    };
    WidgetLayout.discriminator = undefined;
    WidgetLayout.attributeTypeMap = {
        "height": {
            "baseName": "height",
            "type": "number",
            "format": "int64"
        },
        "isColumnBreak": {
            "baseName": "is_column_break",
            "type": "boolean",
            "format": ""
        },
        "width": {
            "baseName": "width",
            "type": "number",
            "format": "int64"
        },
        "x": {
            "baseName": "x",
            "type": "number",
            "format": "int64"
        },
        "y": {
            "baseName": "y",
            "type": "number",
            "format": "int64"
        }
    };
    return WidgetLayout;
}());
exports.WidgetLayout = WidgetLayout;
//# sourceMappingURL=WidgetLayout.js.map