"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Downtime = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Downtiming gives you greater control over monitor notifications by allowing you to globally exclude scopes from alerting. Downtime settings, which can be scheduled with start and end times, prevent all alerting related to specified Datadog tags.
*/
var Downtime = /** @class */ (function () {
    function Downtime() {
    }
    Downtime.getAttributeTypeMap = function () {
        return Downtime.attributeTypeMap;
    };
    Downtime.deserialize = function (data) {
        var res = new Downtime();
        res.active = ObjectSerializer_1.ObjectSerializer.deserialize(data.active, "boolean", "");
        res.activeChild = ObjectSerializer_1.ObjectSerializer.deserialize(data.active_child, "DowntimeChild", "");
        res.canceled = ObjectSerializer_1.ObjectSerializer.deserialize(data.canceled, "number", "int64");
        res.creatorId = ObjectSerializer_1.ObjectSerializer.deserialize(data.creator_id, "number", "int32");
        res.disabled = ObjectSerializer_1.ObjectSerializer.deserialize(data.disabled, "boolean", "");
        res.downtimeType = ObjectSerializer_1.ObjectSerializer.deserialize(data.downtime_type, "number", "int32");
        res.end = ObjectSerializer_1.ObjectSerializer.deserialize(data.end, "number", "int64");
        res.id = ObjectSerializer_1.ObjectSerializer.deserialize(data.id, "number", "int64");
        res.message = ObjectSerializer_1.ObjectSerializer.deserialize(data.message, "string", "");
        res.monitorId = ObjectSerializer_1.ObjectSerializer.deserialize(data.monitor_id, "number", "int64");
        res.monitorTags = ObjectSerializer_1.ObjectSerializer.deserialize(data.monitor_tags, "Array<string>", "");
        res.parentId = ObjectSerializer_1.ObjectSerializer.deserialize(data.parent_id, "number", "int64");
        res.recurrence = ObjectSerializer_1.ObjectSerializer.deserialize(data.recurrence, "DowntimeRecurrence", "");
        res.scope = ObjectSerializer_1.ObjectSerializer.deserialize(data.scope, "Array<string>", "");
        res.start = ObjectSerializer_1.ObjectSerializer.deserialize(data.start, "number", "int64");
        res.timezone = ObjectSerializer_1.ObjectSerializer.deserialize(data.timezone, "string", "");
        res.updaterId = ObjectSerializer_1.ObjectSerializer.deserialize(data.updater_id, "number", "int32");
        return res;
    };
    Downtime.serialize = function (data) {
        var attributeTypes = Downtime.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.active = ObjectSerializer_1.ObjectSerializer.serialize(data.active, "boolean", "");
        res.active_child = ObjectSerializer_1.ObjectSerializer.serialize(data.activeChild, "DowntimeChild", "");
        res.canceled = ObjectSerializer_1.ObjectSerializer.serialize(data.canceled, "number", "int64");
        res.creator_id = ObjectSerializer_1.ObjectSerializer.serialize(data.creatorId, "number", "int32");
        res.disabled = ObjectSerializer_1.ObjectSerializer.serialize(data.disabled, "boolean", "");
        res.downtime_type = ObjectSerializer_1.ObjectSerializer.serialize(data.downtimeType, "number", "int32");
        res.end = ObjectSerializer_1.ObjectSerializer.serialize(data.end, "number", "int64");
        res.id = ObjectSerializer_1.ObjectSerializer.serialize(data.id, "number", "int64");
        res.message = ObjectSerializer_1.ObjectSerializer.serialize(data.message, "string", "");
        res.monitor_id = ObjectSerializer_1.ObjectSerializer.serialize(data.monitorId, "number", "int64");
        res.monitor_tags = ObjectSerializer_1.ObjectSerializer.serialize(data.monitorTags, "Array<string>", "");
        res.parent_id = ObjectSerializer_1.ObjectSerializer.serialize(data.parentId, "number", "int64");
        res.recurrence = ObjectSerializer_1.ObjectSerializer.serialize(data.recurrence, "DowntimeRecurrence", "");
        res.scope = ObjectSerializer_1.ObjectSerializer.serialize(data.scope, "Array<string>", "");
        res.start = ObjectSerializer_1.ObjectSerializer.serialize(data.start, "number", "int64");
        res.timezone = ObjectSerializer_1.ObjectSerializer.serialize(data.timezone, "string", "");
        res.updater_id = ObjectSerializer_1.ObjectSerializer.serialize(data.updaterId, "number", "int32");
        return res;
    };
    Downtime.discriminator = undefined;
    Downtime.attributeTypeMap = {
        "active": {
            "baseName": "active",
            "type": "boolean",
            "format": ""
        },
        "activeChild": {
            "baseName": "active_child",
            "type": "DowntimeChild",
            "format": ""
        },
        "canceled": {
            "baseName": "canceled",
            "type": "number",
            "format": "int64"
        },
        "creatorId": {
            "baseName": "creator_id",
            "type": "number",
            "format": "int32"
        },
        "disabled": {
            "baseName": "disabled",
            "type": "boolean",
            "format": ""
        },
        "downtimeType": {
            "baseName": "downtime_type",
            "type": "number",
            "format": "int32"
        },
        "end": {
            "baseName": "end",
            "type": "number",
            "format": "int64"
        },
        "id": {
            "baseName": "id",
            "type": "number",
            "format": "int64"
        },
        "message": {
            "baseName": "message",
            "type": "string",
            "format": ""
        },
        "monitorId": {
            "baseName": "monitor_id",
            "type": "number",
            "format": "int64"
        },
        "monitorTags": {
            "baseName": "monitor_tags",
            "type": "Array<string>",
            "format": ""
        },
        "parentId": {
            "baseName": "parent_id",
            "type": "number",
            "format": "int64"
        },
        "recurrence": {
            "baseName": "recurrence",
            "type": "DowntimeRecurrence",
            "format": ""
        },
        "scope": {
            "baseName": "scope",
            "type": "Array<string>",
            "format": ""
        },
        "start": {
            "baseName": "start",
            "type": "number",
            "format": "int64"
        },
        "timezone": {
            "baseName": "timezone",
            "type": "string",
            "format": ""
        },
        "updaterId": {
            "baseName": "updater_id",
            "type": "number",
            "format": "int32"
        }
    };
    return Downtime;
}());
exports.Downtime = Downtime;
//# sourceMappingURL=Downtime.js.map