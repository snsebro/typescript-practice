"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.WidgetFieldSort = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Which column and order to sort by
*/
var WidgetFieldSort = /** @class */ (function () {
    function WidgetFieldSort() {
    }
    WidgetFieldSort.getAttributeTypeMap = function () {
        return WidgetFieldSort.attributeTypeMap;
    };
    WidgetFieldSort.deserialize = function (data) {
        var res = new WidgetFieldSort();
        if (data.column === undefined) {
            throw new TypeError("missing required attribute 'column' on 'WidgetFieldSort' object");
        }
        res.column = ObjectSerializer_1.ObjectSerializer.deserialize(data.column, "string", "");
        if (data.order === undefined) {
            throw new TypeError("missing required attribute 'order' on 'WidgetFieldSort' object");
        }
        if (['asc', 'desc', undefined].includes(data.order)) {
            res.order = data.order;
        }
        else {
            throw TypeError("invalid enum value " + data.order + " for order");
        }
        return res;
    };
    WidgetFieldSort.serialize = function (data) {
        var attributeTypes = WidgetFieldSort.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        if (data.column === undefined) {
            throw new TypeError("missing required attribute 'column' on 'WidgetFieldSort' object");
        }
        res.column = ObjectSerializer_1.ObjectSerializer.serialize(data.column, "string", "");
        if (data.order === undefined) {
            throw new TypeError("missing required attribute 'order' on 'WidgetFieldSort' object");
        }
        if (['asc', 'desc', undefined].includes(data.order)) {
            res.order = data.order;
        }
        else {
            throw TypeError("invalid enum value " + data.order + " for order");
        }
        return res;
    };
    WidgetFieldSort.discriminator = undefined;
    WidgetFieldSort.attributeTypeMap = {
        "column": {
            "baseName": "column",
            "type": "string",
            "format": ""
        },
        "order": {
            "baseName": "order",
            "type": "WidgetSort",
            "format": ""
        }
    };
    return WidgetFieldSort;
}());
exports.WidgetFieldSort = WidgetFieldSort;
//# sourceMappingURL=WidgetFieldSort.js.map