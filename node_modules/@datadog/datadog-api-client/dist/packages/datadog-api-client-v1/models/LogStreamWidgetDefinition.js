"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogStreamWidgetDefinition = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* The Log Stream displays a log flow matching the defined query. Only available on FREE layout dashboards.
*/
var LogStreamWidgetDefinition = /** @class */ (function () {
    function LogStreamWidgetDefinition() {
    }
    LogStreamWidgetDefinition.getAttributeTypeMap = function () {
        return LogStreamWidgetDefinition.attributeTypeMap;
    };
    LogStreamWidgetDefinition.deserialize = function (data) {
        var res = new LogStreamWidgetDefinition();
        res.columns = ObjectSerializer_1.ObjectSerializer.deserialize(data.columns, "Array<string>", "");
        res.indexes = ObjectSerializer_1.ObjectSerializer.deserialize(data.indexes, "Array<string>", "");
        res.logset = ObjectSerializer_1.ObjectSerializer.deserialize(data.logset, "string", "");
        if (['inline', 'expanded-md', 'expanded-lg', undefined].includes(data.message_display)) {
            res.messageDisplay = data.message_display;
        }
        else {
            throw TypeError("invalid enum value " + data.message_display + " for message_display");
        }
        res.query = ObjectSerializer_1.ObjectSerializer.deserialize(data.query, "string", "");
        res.showDateColumn = ObjectSerializer_1.ObjectSerializer.deserialize(data.show_date_column, "boolean", "");
        res.showMessageColumn = ObjectSerializer_1.ObjectSerializer.deserialize(data.show_message_column, "boolean", "");
        res.sort = ObjectSerializer_1.ObjectSerializer.deserialize(data.sort, "WidgetFieldSort", "");
        res.time = ObjectSerializer_1.ObjectSerializer.deserialize(data.time, "WidgetTime", "");
        res.title = ObjectSerializer_1.ObjectSerializer.deserialize(data.title, "string", "");
        if (['center', 'left', 'right', undefined].includes(data.title_align)) {
            res.titleAlign = data.title_align;
        }
        else {
            throw TypeError("invalid enum value " + data.title_align + " for title_align");
        }
        res.titleSize = ObjectSerializer_1.ObjectSerializer.deserialize(data.title_size, "string", "");
        if (data.type === undefined) {
            throw new TypeError("missing required attribute 'type' on 'LogStreamWidgetDefinition' object");
        }
        if (['log_stream', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        return res;
    };
    LogStreamWidgetDefinition.serialize = function (data) {
        var attributeTypes = LogStreamWidgetDefinition.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.columns = ObjectSerializer_1.ObjectSerializer.serialize(data.columns, "Array<string>", "");
        res.indexes = ObjectSerializer_1.ObjectSerializer.serialize(data.indexes, "Array<string>", "");
        res.logset = ObjectSerializer_1.ObjectSerializer.serialize(data.logset, "string", "");
        if (['inline', 'expanded-md', 'expanded-lg', undefined].includes(data.messageDisplay)) {
            res.message_display = data.messageDisplay;
        }
        else {
            throw TypeError("invalid enum value " + data.messageDisplay + " for messageDisplay");
        }
        res.query = ObjectSerializer_1.ObjectSerializer.serialize(data.query, "string", "");
        res.show_date_column = ObjectSerializer_1.ObjectSerializer.serialize(data.showDateColumn, "boolean", "");
        res.show_message_column = ObjectSerializer_1.ObjectSerializer.serialize(data.showMessageColumn, "boolean", "");
        res.sort = ObjectSerializer_1.ObjectSerializer.serialize(data.sort, "WidgetFieldSort", "");
        res.time = ObjectSerializer_1.ObjectSerializer.serialize(data.time, "WidgetTime", "");
        res.title = ObjectSerializer_1.ObjectSerializer.serialize(data.title, "string", "");
        if (['center', 'left', 'right', undefined].includes(data.titleAlign)) {
            res.title_align = data.titleAlign;
        }
        else {
            throw TypeError("invalid enum value " + data.titleAlign + " for titleAlign");
        }
        res.title_size = ObjectSerializer_1.ObjectSerializer.serialize(data.titleSize, "string", "");
        if (data.type === undefined) {
            throw new TypeError("missing required attribute 'type' on 'LogStreamWidgetDefinition' object");
        }
        if (['log_stream', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        return res;
    };
    LogStreamWidgetDefinition.discriminator = undefined;
    LogStreamWidgetDefinition.attributeTypeMap = {
        "columns": {
            "baseName": "columns",
            "type": "Array<string>",
            "format": ""
        },
        "indexes": {
            "baseName": "indexes",
            "type": "Array<string>",
            "format": ""
        },
        "logset": {
            "baseName": "logset",
            "type": "string",
            "format": ""
        },
        "messageDisplay": {
            "baseName": "message_display",
            "type": "WidgetMessageDisplay",
            "format": ""
        },
        "query": {
            "baseName": "query",
            "type": "string",
            "format": ""
        },
        "showDateColumn": {
            "baseName": "show_date_column",
            "type": "boolean",
            "format": ""
        },
        "showMessageColumn": {
            "baseName": "show_message_column",
            "type": "boolean",
            "format": ""
        },
        "sort": {
            "baseName": "sort",
            "type": "WidgetFieldSort",
            "format": ""
        },
        "time": {
            "baseName": "time",
            "type": "WidgetTime",
            "format": ""
        },
        "title": {
            "baseName": "title",
            "type": "string",
            "format": ""
        },
        "titleAlign": {
            "baseName": "title_align",
            "type": "WidgetTextAlign",
            "format": ""
        },
        "titleSize": {
            "baseName": "title_size",
            "type": "string",
            "format": ""
        },
        "type": {
            "baseName": "type",
            "type": "LogStreamWidgetDefinitionType",
            "format": ""
        }
    };
    return LogStreamWidgetDefinition;
}());
exports.LogStreamWidgetDefinition = LogStreamWidgetDefinition;
//# sourceMappingURL=LogStreamWidgetDefinition.js.map