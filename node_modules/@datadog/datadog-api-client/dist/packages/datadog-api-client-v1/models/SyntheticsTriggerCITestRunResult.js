"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyntheticsTriggerCITestRunResult = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Information about a single test run.
*/
var SyntheticsTriggerCITestRunResult = /** @class */ (function () {
    function SyntheticsTriggerCITestRunResult() {
    }
    SyntheticsTriggerCITestRunResult.getAttributeTypeMap = function () {
        return SyntheticsTriggerCITestRunResult.attributeTypeMap;
    };
    SyntheticsTriggerCITestRunResult.deserialize = function (data) {
        var res = new SyntheticsTriggerCITestRunResult();
        if (['laptop_large', 'tablet', 'mobile_small', 'chrome.laptop_large', 'chrome.tablet', 'chrome.mobile_small', 'firefox.laptop_large', 'firefox.tablet', 'firefox.mobile_small', undefined].includes(data.device)) {
            res.device = data.device;
        }
        else {
            throw TypeError("invalid enum value " + data.device + " for device");
        }
        res.location = ObjectSerializer_1.ObjectSerializer.deserialize(data.location, "number", "int64");
        res.publicId = ObjectSerializer_1.ObjectSerializer.deserialize(data.public_id, "string", "");
        res.resultId = ObjectSerializer_1.ObjectSerializer.deserialize(data.result_id, "string", "");
        return res;
    };
    SyntheticsTriggerCITestRunResult.serialize = function (data) {
        var attributeTypes = SyntheticsTriggerCITestRunResult.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        if (['laptop_large', 'tablet', 'mobile_small', 'chrome.laptop_large', 'chrome.tablet', 'chrome.mobile_small', 'firefox.laptop_large', 'firefox.tablet', 'firefox.mobile_small', undefined].includes(data.device)) {
            res.device = data.device;
        }
        else {
            throw TypeError("invalid enum value " + data.device + " for device");
        }
        res.location = ObjectSerializer_1.ObjectSerializer.serialize(data.location, "number", "int64");
        res.public_id = ObjectSerializer_1.ObjectSerializer.serialize(data.publicId, "string", "");
        res.result_id = ObjectSerializer_1.ObjectSerializer.serialize(data.resultId, "string", "");
        return res;
    };
    SyntheticsTriggerCITestRunResult.discriminator = undefined;
    SyntheticsTriggerCITestRunResult.attributeTypeMap = {
        "device": {
            "baseName": "device",
            "type": "SyntheticsDeviceID",
            "format": ""
        },
        "location": {
            "baseName": "location",
            "type": "number",
            "format": "int64"
        },
        "publicId": {
            "baseName": "public_id",
            "type": "string",
            "format": ""
        },
        "resultId": {
            "baseName": "result_id",
            "type": "string",
            "format": ""
        }
    };
    return SyntheticsTriggerCITestRunResult;
}());
exports.SyntheticsTriggerCITestRunResult = SyntheticsTriggerCITestRunResult;
//# sourceMappingURL=SyntheticsTriggerCITestRunResult.js.map