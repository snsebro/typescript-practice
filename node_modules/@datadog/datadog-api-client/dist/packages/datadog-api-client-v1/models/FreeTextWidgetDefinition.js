"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FreeTextWidgetDefinition = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Free text is a widget that allows you to add headings to your screenboard. Commonly used to state the overall purpose of the dashboard. Only available on FREE layout dashboards.
*/
var FreeTextWidgetDefinition = /** @class */ (function () {
    function FreeTextWidgetDefinition() {
    }
    FreeTextWidgetDefinition.getAttributeTypeMap = function () {
        return FreeTextWidgetDefinition.attributeTypeMap;
    };
    FreeTextWidgetDefinition.deserialize = function (data) {
        var res = new FreeTextWidgetDefinition();
        res.color = ObjectSerializer_1.ObjectSerializer.deserialize(data.color, "string", "");
        res.fontSize = ObjectSerializer_1.ObjectSerializer.deserialize(data.font_size, "string", "");
        if (data.text === undefined) {
            throw new TypeError("missing required attribute 'text' on 'FreeTextWidgetDefinition' object");
        }
        res.text = ObjectSerializer_1.ObjectSerializer.deserialize(data.text, "string", "");
        if (['center', 'left', 'right', undefined].includes(data.text_align)) {
            res.textAlign = data.text_align;
        }
        else {
            throw TypeError("invalid enum value " + data.text_align + " for text_align");
        }
        if (data.type === undefined) {
            throw new TypeError("missing required attribute 'type' on 'FreeTextWidgetDefinition' object");
        }
        if (['free_text', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        return res;
    };
    FreeTextWidgetDefinition.serialize = function (data) {
        var attributeTypes = FreeTextWidgetDefinition.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.color = ObjectSerializer_1.ObjectSerializer.serialize(data.color, "string", "");
        res.font_size = ObjectSerializer_1.ObjectSerializer.serialize(data.fontSize, "string", "");
        if (data.text === undefined) {
            throw new TypeError("missing required attribute 'text' on 'FreeTextWidgetDefinition' object");
        }
        res.text = ObjectSerializer_1.ObjectSerializer.serialize(data.text, "string", "");
        if (['center', 'left', 'right', undefined].includes(data.textAlign)) {
            res.text_align = data.textAlign;
        }
        else {
            throw TypeError("invalid enum value " + data.textAlign + " for textAlign");
        }
        if (data.type === undefined) {
            throw new TypeError("missing required attribute 'type' on 'FreeTextWidgetDefinition' object");
        }
        if (['free_text', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        return res;
    };
    FreeTextWidgetDefinition.discriminator = undefined;
    FreeTextWidgetDefinition.attributeTypeMap = {
        "color": {
            "baseName": "color",
            "type": "string",
            "format": ""
        },
        "fontSize": {
            "baseName": "font_size",
            "type": "string",
            "format": ""
        },
        "text": {
            "baseName": "text",
            "type": "string",
            "format": ""
        },
        "textAlign": {
            "baseName": "text_align",
            "type": "WidgetTextAlign",
            "format": ""
        },
        "type": {
            "baseName": "type",
            "type": "FreeTextWidgetDefinitionType",
            "format": ""
        }
    };
    return FreeTextWidgetDefinition;
}());
exports.FreeTextWidgetDefinition = FreeTextWidgetDefinition;
//# sourceMappingURL=FreeTextWidgetDefinition.js.map