/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HTTPMethod } from './HTTPMethod';
import { SyntheticsBasicAuth } from './SyntheticsBasicAuth';
import { SyntheticsTestRequestCertificate } from './SyntheticsTestRequestCertificate';
/**
* Object describing the Synthetic test request.
*/
export declare class SyntheticsTestRequest {
    'basicAuth'?: SyntheticsBasicAuth;
    /**
    * Body to include in the test.
    */
    'body'?: string;
    'certificate'?: SyntheticsTestRequestCertificate;
    /**
    * DNS server to use for DNS tests.
    */
    'dnsServer'?: string;
    /**
    * DNS server port to use for DNS tests.
    */
    'dnsServerPort'?: number;
    /**
    * Headers to include when performing the test.
    */
    'headers'?: {
        [key: string]: string;
    };
    /**
    * Host name to perform the test with.
    */
    'host'?: string;
    'method'?: HTTPMethod;
    /**
    * Determines whether or not to save the response body.
    */
    'noSavingResponseBody'?: boolean;
    /**
    * Number of pings to use per test.
    */
    'numberOfPackets'?: number;
    /**
    * Port to use when performing the test.
    */
    'port'?: number;
    /**
    * Query to use for the test.
    */
    'query'?: any;
    /**
    * Turns on a traceroute probe to discover all gateways along the path to the host destination.
    */
    'shouldTrackHops'?: boolean;
    /**
    * Timeout in seconds for the test.
    */
    'timeout'?: number;
    /**
    * URL to perform the test with.
    */
    'url'?: string;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: {
        [key: string]: {
            baseName: string;
            type: string;
            format: string;
        };
    };
    static getAttributeTypeMap(): {
        [key: string]: {
            baseName: string;
            type: string;
            format: string;
        };
    };
    static deserialize(data: {
        [key: string]: any;
    }): SyntheticsTestRequest;
    static serialize(data: SyntheticsTestRequest): {
        [key: string]: any;
    };
    constructor();
}
