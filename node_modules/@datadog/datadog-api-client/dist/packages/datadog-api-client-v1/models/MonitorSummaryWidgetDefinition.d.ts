/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { MonitorSummaryWidgetDefinitionType } from './MonitorSummaryWidgetDefinitionType';
import { WidgetColorPreference } from './WidgetColorPreference';
import { WidgetMonitorSummaryDisplayFormat } from './WidgetMonitorSummaryDisplayFormat';
import { WidgetMonitorSummarySort } from './WidgetMonitorSummarySort';
import { WidgetSummaryType } from './WidgetSummaryType';
import { WidgetTextAlign } from './WidgetTextAlign';
/**
* The monitor summary widget displays a summary view of all your Datadog monitors, or a subset based on a query. Only available on FREE layout dashboards.
*/
export declare class MonitorSummaryWidgetDefinition {
    'colorPreference'?: WidgetColorPreference;
    /**
    * The number of monitors to display.
    */
    'count'?: number;
    'displayFormat'?: WidgetMonitorSummaryDisplayFormat;
    /**
    * Whether to show counts of 0 or not.
    */
    'hideZeroCounts'?: boolean;
    /**
    * Query to filter the monitors with.
    */
    'query': string;
    /**
    * Whether to show the time that has elapsed since the monitor/group triggered.
    */
    'showLastTriggered'?: boolean;
    'sort'?: WidgetMonitorSummarySort;
    /**
    * The start of the list. Typically 0.
    */
    'start'?: number;
    'summaryType'?: WidgetSummaryType;
    /**
    * Title of the widget.
    */
    'title'?: string;
    'titleAlign'?: WidgetTextAlign;
    /**
    * Size of the title.
    */
    'titleSize'?: string;
    'type': MonitorSummaryWidgetDefinitionType;
    static readonly discriminator: string | undefined;
    static readonly attributeTypeMap: {
        [key: string]: {
            baseName: string;
            type: string;
            format: string;
        };
    };
    static getAttributeTypeMap(): {
        [key: string]: {
            baseName: string;
            type: string;
            format: string;
        };
    };
    static deserialize(data: {
        [key: string]: any;
    }): MonitorSummaryWidgetDefinition;
    static serialize(data: MonitorSummaryWidgetDefinition): {
        [key: string]: any;
    };
    constructor();
}
