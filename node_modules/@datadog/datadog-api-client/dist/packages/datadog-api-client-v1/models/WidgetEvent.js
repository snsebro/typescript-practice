"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.WidgetEvent = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Event overlay control options.  See the dedicated [Events JSON schema documentation](https://docs.datadoghq.com/dashboards/graphing_json/widget_json/#events-schema) to learn how to build the `<EVENTS_SCHEMA>`.
*/
var WidgetEvent = /** @class */ (function () {
    function WidgetEvent() {
    }
    WidgetEvent.getAttributeTypeMap = function () {
        return WidgetEvent.attributeTypeMap;
    };
    WidgetEvent.deserialize = function (data) {
        var res = new WidgetEvent();
        if (data.q === undefined) {
            throw new TypeError("missing required attribute 'q' on 'WidgetEvent' object");
        }
        res.q = ObjectSerializer_1.ObjectSerializer.deserialize(data.q, "string", "");
        res.tagsExecution = ObjectSerializer_1.ObjectSerializer.deserialize(data.tags_execution, "string", "");
        return res;
    };
    WidgetEvent.serialize = function (data) {
        var attributeTypes = WidgetEvent.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        if (data.q === undefined) {
            throw new TypeError("missing required attribute 'q' on 'WidgetEvent' object");
        }
        res.q = ObjectSerializer_1.ObjectSerializer.serialize(data.q, "string", "");
        res.tags_execution = ObjectSerializer_1.ObjectSerializer.serialize(data.tagsExecution, "string", "");
        return res;
    };
    WidgetEvent.discriminator = undefined;
    WidgetEvent.attributeTypeMap = {
        "q": {
            "baseName": "q",
            "type": "string",
            "format": ""
        },
        "tagsExecution": {
            "baseName": "tags_execution",
            "type": "string",
            "format": ""
        }
    };
    return WidgetEvent;
}());
exports.WidgetEvent = WidgetEvent;
//# sourceMappingURL=WidgetEvent.js.map