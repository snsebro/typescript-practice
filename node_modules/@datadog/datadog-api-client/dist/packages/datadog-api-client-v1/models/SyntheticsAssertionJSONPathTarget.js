"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyntheticsAssertionJSONPathTarget = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* An assertion for the `validatesJSONPath` operator.
*/
var SyntheticsAssertionJSONPathTarget = /** @class */ (function () {
    function SyntheticsAssertionJSONPathTarget() {
    }
    SyntheticsAssertionJSONPathTarget.getAttributeTypeMap = function () {
        return SyntheticsAssertionJSONPathTarget.attributeTypeMap;
    };
    SyntheticsAssertionJSONPathTarget.deserialize = function (data) {
        var res = new SyntheticsAssertionJSONPathTarget();
        if (data.operator === undefined) {
            throw new TypeError("missing required attribute 'operator' on 'SyntheticsAssertionJSONPathTarget' object");
        }
        if (['validatesJSONPath', undefined].includes(data.operator)) {
            res.operator = data.operator;
        }
        else {
            throw TypeError("invalid enum value " + data.operator + " for operator");
        }
        res.property = ObjectSerializer_1.ObjectSerializer.deserialize(data.property, "string", "");
        res.target = ObjectSerializer_1.ObjectSerializer.deserialize(data.target, "SyntheticsAssertionJSONPathTargetTarget", "");
        if (data.type === undefined) {
            throw new TypeError("missing required attribute 'type' on 'SyntheticsAssertionJSONPathTarget' object");
        }
        if (['body', 'header', 'statusCode', 'certificate', 'responseTime', 'property', 'recordEvery', 'recordSome', 'tlsVersion', 'minTlsVersion', 'latency', 'packetLossPercentage', 'packetsReceived', 'networkHop', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        return res;
    };
    SyntheticsAssertionJSONPathTarget.serialize = function (data) {
        var attributeTypes = SyntheticsAssertionJSONPathTarget.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        if (data.operator === undefined) {
            throw new TypeError("missing required attribute 'operator' on 'SyntheticsAssertionJSONPathTarget' object");
        }
        if (['validatesJSONPath', undefined].includes(data.operator)) {
            res.operator = data.operator;
        }
        else {
            throw TypeError("invalid enum value " + data.operator + " for operator");
        }
        res.property = ObjectSerializer_1.ObjectSerializer.serialize(data.property, "string", "");
        res.target = ObjectSerializer_1.ObjectSerializer.serialize(data.target, "SyntheticsAssertionJSONPathTargetTarget", "");
        if (data.type === undefined) {
            throw new TypeError("missing required attribute 'type' on 'SyntheticsAssertionJSONPathTarget' object");
        }
        if (['body', 'header', 'statusCode', 'certificate', 'responseTime', 'property', 'recordEvery', 'recordSome', 'tlsVersion', 'minTlsVersion', 'latency', 'packetLossPercentage', 'packetsReceived', 'networkHop', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        return res;
    };
    SyntheticsAssertionJSONPathTarget.discriminator = undefined;
    SyntheticsAssertionJSONPathTarget.attributeTypeMap = {
        "operator": {
            "baseName": "operator",
            "type": "SyntheticsAssertionJSONPathOperator",
            "format": ""
        },
        "property": {
            "baseName": "property",
            "type": "string",
            "format": ""
        },
        "target": {
            "baseName": "target",
            "type": "SyntheticsAssertionJSONPathTargetTarget",
            "format": ""
        },
        "type": {
            "baseName": "type",
            "type": "SyntheticsAssertionType",
            "format": ""
        }
    };
    return SyntheticsAssertionJSONPathTarget;
}());
exports.SyntheticsAssertionJSONPathTarget = SyntheticsAssertionJSONPathTarget;
//# sourceMappingURL=SyntheticsAssertionJSONPathTarget.js.map