"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DashboardSummaryDefinition = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Dashboard definition.
*/
var DashboardSummaryDefinition = /** @class */ (function () {
    function DashboardSummaryDefinition() {
    }
    DashboardSummaryDefinition.getAttributeTypeMap = function () {
        return DashboardSummaryDefinition.attributeTypeMap;
    };
    DashboardSummaryDefinition.deserialize = function (data) {
        var res = new DashboardSummaryDefinition();
        res.authorHandle = ObjectSerializer_1.ObjectSerializer.deserialize(data.author_handle, "string", "");
        res.createdAt = ObjectSerializer_1.ObjectSerializer.deserialize(data.created_at, "Date", "date-time");
        res.description = ObjectSerializer_1.ObjectSerializer.deserialize(data.description, "string", "");
        res.id = ObjectSerializer_1.ObjectSerializer.deserialize(data.id, "string", "");
        res.isReadOnly = ObjectSerializer_1.ObjectSerializer.deserialize(data.is_read_only, "boolean", "");
        if (['ordered', 'free', undefined].includes(data.layout_type)) {
            res.layoutType = data.layout_type;
        }
        else {
            throw TypeError("invalid enum value " + data.layout_type + " for layout_type");
        }
        res.modifiedAt = ObjectSerializer_1.ObjectSerializer.deserialize(data.modified_at, "Date", "date-time");
        res.title = ObjectSerializer_1.ObjectSerializer.deserialize(data.title, "string", "");
        res.url = ObjectSerializer_1.ObjectSerializer.deserialize(data.url, "string", "");
        return res;
    };
    DashboardSummaryDefinition.serialize = function (data) {
        var attributeTypes = DashboardSummaryDefinition.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.author_handle = ObjectSerializer_1.ObjectSerializer.serialize(data.authorHandle, "string", "");
        res.created_at = ObjectSerializer_1.ObjectSerializer.serialize(data.createdAt, "Date", "date-time");
        res.description = ObjectSerializer_1.ObjectSerializer.serialize(data.description, "string", "");
        res.id = ObjectSerializer_1.ObjectSerializer.serialize(data.id, "string", "");
        res.is_read_only = ObjectSerializer_1.ObjectSerializer.serialize(data.isReadOnly, "boolean", "");
        if (['ordered', 'free', undefined].includes(data.layoutType)) {
            res.layout_type = data.layoutType;
        }
        else {
            throw TypeError("invalid enum value " + data.layoutType + " for layoutType");
        }
        res.modified_at = ObjectSerializer_1.ObjectSerializer.serialize(data.modifiedAt, "Date", "date-time");
        res.title = ObjectSerializer_1.ObjectSerializer.serialize(data.title, "string", "");
        res.url = ObjectSerializer_1.ObjectSerializer.serialize(data.url, "string", "");
        return res;
    };
    DashboardSummaryDefinition.discriminator = undefined;
    DashboardSummaryDefinition.attributeTypeMap = {
        "authorHandle": {
            "baseName": "author_handle",
            "type": "string",
            "format": ""
        },
        "createdAt": {
            "baseName": "created_at",
            "type": "Date",
            "format": "date-time"
        },
        "description": {
            "baseName": "description",
            "type": "string",
            "format": ""
        },
        "id": {
            "baseName": "id",
            "type": "string",
            "format": ""
        },
        "isReadOnly": {
            "baseName": "is_read_only",
            "type": "boolean",
            "format": ""
        },
        "layoutType": {
            "baseName": "layout_type",
            "type": "DashboardLayoutType",
            "format": ""
        },
        "modifiedAt": {
            "baseName": "modified_at",
            "type": "Date",
            "format": "date-time"
        },
        "title": {
            "baseName": "title",
            "type": "string",
            "format": ""
        },
        "url": {
            "baseName": "url",
            "type": "string",
            "format": ""
        }
    };
    return DashboardSummaryDefinition;
}());
exports.DashboardSummaryDefinition = DashboardSummaryDefinition;
//# sourceMappingURL=DashboardSummaryDefinition.js.map