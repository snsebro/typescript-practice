"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsageBillableSummaryBody = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Response with properties for each aggregated usage type.
*/
var UsageBillableSummaryBody = /** @class */ (function () {
    function UsageBillableSummaryBody() {
    }
    UsageBillableSummaryBody.getAttributeTypeMap = function () {
        return UsageBillableSummaryBody.attributeTypeMap;
    };
    UsageBillableSummaryBody.deserialize = function (data) {
        var res = new UsageBillableSummaryBody();
        res.accountBillableUsage = ObjectSerializer_1.ObjectSerializer.deserialize(data.account_billable_usage, "number", "int64");
        res.elapsedUsageHours = ObjectSerializer_1.ObjectSerializer.deserialize(data.elapsed_usage_hours, "number", "int64");
        res.firstBillableUsageHour = ObjectSerializer_1.ObjectSerializer.deserialize(data.first_billable_usage_hour, "Date", "date-time");
        res.lastBillableUsageHour = ObjectSerializer_1.ObjectSerializer.deserialize(data.last_billable_usage_hour, "Date", "date-time");
        res.orgBillableUsage = ObjectSerializer_1.ObjectSerializer.deserialize(data.org_billable_usage, "number", "int64");
        res.percentageInAccount = ObjectSerializer_1.ObjectSerializer.deserialize(data.percentage_in_account, "number", "double");
        res.usageUnit = ObjectSerializer_1.ObjectSerializer.deserialize(data.usage_unit, "string", "");
        return res;
    };
    UsageBillableSummaryBody.serialize = function (data) {
        var attributeTypes = UsageBillableSummaryBody.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.account_billable_usage = ObjectSerializer_1.ObjectSerializer.serialize(data.accountBillableUsage, "number", "int64");
        res.elapsed_usage_hours = ObjectSerializer_1.ObjectSerializer.serialize(data.elapsedUsageHours, "number", "int64");
        res.first_billable_usage_hour = ObjectSerializer_1.ObjectSerializer.serialize(data.firstBillableUsageHour, "Date", "date-time");
        res.last_billable_usage_hour = ObjectSerializer_1.ObjectSerializer.serialize(data.lastBillableUsageHour, "Date", "date-time");
        res.org_billable_usage = ObjectSerializer_1.ObjectSerializer.serialize(data.orgBillableUsage, "number", "int64");
        res.percentage_in_account = ObjectSerializer_1.ObjectSerializer.serialize(data.percentageInAccount, "number", "double");
        res.usage_unit = ObjectSerializer_1.ObjectSerializer.serialize(data.usageUnit, "string", "");
        return res;
    };
    UsageBillableSummaryBody.discriminator = undefined;
    UsageBillableSummaryBody.attributeTypeMap = {
        "accountBillableUsage": {
            "baseName": "account_billable_usage",
            "type": "number",
            "format": "int64"
        },
        "elapsedUsageHours": {
            "baseName": "elapsed_usage_hours",
            "type": "number",
            "format": "int64"
        },
        "firstBillableUsageHour": {
            "baseName": "first_billable_usage_hour",
            "type": "Date",
            "format": "date-time"
        },
        "lastBillableUsageHour": {
            "baseName": "last_billable_usage_hour",
            "type": "Date",
            "format": "date-time"
        },
        "orgBillableUsage": {
            "baseName": "org_billable_usage",
            "type": "number",
            "format": "int64"
        },
        "percentageInAccount": {
            "baseName": "percentage_in_account",
            "type": "number",
            "format": "double"
        },
        "usageUnit": {
            "baseName": "usage_unit",
            "type": "string",
            "format": ""
        }
    };
    return UsageBillableSummaryBody;
}());
exports.UsageBillableSummaryBody = UsageBillableSummaryBody;
//# sourceMappingURL=UsageBillableSummaryBody.js.map