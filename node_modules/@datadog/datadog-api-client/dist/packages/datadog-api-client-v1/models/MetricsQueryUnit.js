"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetricsQueryUnit = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* Object containing the metric unit family, scale factor, name, and short name.
*/
var MetricsQueryUnit = /** @class */ (function () {
    function MetricsQueryUnit() {
    }
    MetricsQueryUnit.getAttributeTypeMap = function () {
        return MetricsQueryUnit.attributeTypeMap;
    };
    MetricsQueryUnit.deserialize = function (data) {
        var res = new MetricsQueryUnit();
        res.family = ObjectSerializer_1.ObjectSerializer.deserialize(data.family, "string", "");
        res.name = ObjectSerializer_1.ObjectSerializer.deserialize(data.name, "string", "");
        res.plural = ObjectSerializer_1.ObjectSerializer.deserialize(data.plural, "string", "");
        res.scaleFactor = ObjectSerializer_1.ObjectSerializer.deserialize(data.scale_factor, "number", "double");
        res.shortName = ObjectSerializer_1.ObjectSerializer.deserialize(data.short_name, "string", "");
        return res;
    };
    MetricsQueryUnit.serialize = function (data) {
        var attributeTypes = MetricsQueryUnit.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.family = ObjectSerializer_1.ObjectSerializer.serialize(data.family, "string", "");
        res.name = ObjectSerializer_1.ObjectSerializer.serialize(data.name, "string", "");
        res.plural = ObjectSerializer_1.ObjectSerializer.serialize(data.plural, "string", "");
        res.scale_factor = ObjectSerializer_1.ObjectSerializer.serialize(data.scaleFactor, "number", "double");
        res.short_name = ObjectSerializer_1.ObjectSerializer.serialize(data.shortName, "string", "");
        return res;
    };
    MetricsQueryUnit.discriminator = undefined;
    MetricsQueryUnit.attributeTypeMap = {
        "family": {
            "baseName": "family",
            "type": "string",
            "format": ""
        },
        "name": {
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        "plural": {
            "baseName": "plural",
            "type": "string",
            "format": ""
        },
        "scaleFactor": {
            "baseName": "scale_factor",
            "type": "number",
            "format": "double"
        },
        "shortName": {
            "baseName": "short_name",
            "type": "string",
            "format": ""
        }
    };
    return MetricsQueryUnit;
}());
exports.MetricsQueryUnit = MetricsQueryUnit;
//# sourceMappingURL=MetricsQueryUnit.js.map