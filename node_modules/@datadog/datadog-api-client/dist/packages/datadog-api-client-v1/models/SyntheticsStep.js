"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyntheticsStep = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* The steps used in a Synthetics browser test.
*/
var SyntheticsStep = /** @class */ (function () {
    function SyntheticsStep() {
    }
    SyntheticsStep.getAttributeTypeMap = function () {
        return SyntheticsStep.attributeTypeMap;
    };
    SyntheticsStep.deserialize = function (data) {
        var res = new SyntheticsStep();
        res.allowFailure = ObjectSerializer_1.ObjectSerializer.deserialize(data.allowFailure, "boolean", "");
        res.name = ObjectSerializer_1.ObjectSerializer.deserialize(data.name, "string", "");
        res.params = ObjectSerializer_1.ObjectSerializer.deserialize(data.params, "any", "");
        res.timeout = ObjectSerializer_1.ObjectSerializer.deserialize(data.timeout, "number", "int64");
        if (['assertCurrentUrl', 'assertElementAttribute', 'assertElementContent', 'assertElementPresent', 'assertEmail', 'assertFileDownload', 'assertFromJavascript', 'assertPageContains', 'assertPageLacks', 'click', 'extractFromJavascript', 'extractVariable', 'goToEmailLink', 'goToUrl', 'goToUrlAndMeasureTti', 'hover', 'playSubTest', 'pressKey', 'refresh', 'runApiTest', 'scroll', 'selectOption', 'typeText', 'uploadFiles', 'wait', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        return res;
    };
    SyntheticsStep.serialize = function (data) {
        var attributeTypes = SyntheticsStep.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        res.allowFailure = ObjectSerializer_1.ObjectSerializer.serialize(data.allowFailure, "boolean", "");
        res.name = ObjectSerializer_1.ObjectSerializer.serialize(data.name, "string", "");
        res.params = ObjectSerializer_1.ObjectSerializer.serialize(data.params, "any", "");
        res.timeout = ObjectSerializer_1.ObjectSerializer.serialize(data.timeout, "number", "int64");
        if (['assertCurrentUrl', 'assertElementAttribute', 'assertElementContent', 'assertElementPresent', 'assertEmail', 'assertFileDownload', 'assertFromJavascript', 'assertPageContains', 'assertPageLacks', 'click', 'extractFromJavascript', 'extractVariable', 'goToEmailLink', 'goToUrl', 'goToUrlAndMeasureTti', 'hover', 'playSubTest', 'pressKey', 'refresh', 'runApiTest', 'scroll', 'selectOption', 'typeText', 'uploadFiles', 'wait', undefined].includes(data.type)) {
            res.type = data.type;
        }
        else {
            throw TypeError("invalid enum value " + data.type + " for type");
        }
        return res;
    };
    SyntheticsStep.discriminator = undefined;
    SyntheticsStep.attributeTypeMap = {
        "allowFailure": {
            "baseName": "allowFailure",
            "type": "boolean",
            "format": ""
        },
        "name": {
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        "params": {
            "baseName": "params",
            "type": "any",
            "format": ""
        },
        "timeout": {
            "baseName": "timeout",
            "type": "number",
            "format": "int64"
        },
        "type": {
            "baseName": "type",
            "type": "SyntheticsStepType",
            "format": ""
        }
    };
    return SyntheticsStep;
}());
exports.SyntheticsStep = SyntheticsStep;
//# sourceMappingURL=SyntheticsStep.js.map