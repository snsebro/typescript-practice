"use strict";
/**
 * Unless explicitly stated otherwise all files in this repository are licensed under the Apache-2.0 License.
 * This product includes software developed at Datadog (https://www.datadoghq.com/).
 * Copyright 2020-Present Datadog, Inc.
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotebookLogStreamCellAttributes = void 0;
var ObjectSerializer_1 = require("./ObjectSerializer");
/**
* The attributes of a notebook `log_stream` cell.
*/
var NotebookLogStreamCellAttributes = /** @class */ (function () {
    function NotebookLogStreamCellAttributes() {
    }
    NotebookLogStreamCellAttributes.getAttributeTypeMap = function () {
        return NotebookLogStreamCellAttributes.attributeTypeMap;
    };
    NotebookLogStreamCellAttributes.deserialize = function (data) {
        var res = new NotebookLogStreamCellAttributes();
        if (data.definition === undefined) {
            throw new TypeError("missing required attribute 'definition' on 'NotebookLogStreamCellAttributes' object");
        }
        res.definition = ObjectSerializer_1.ObjectSerializer.deserialize(data.definition, "LogStreamWidgetDefinition", "");
        if (['xs', 's', 'm', 'l', 'xl', undefined].includes(data.graph_size)) {
            res.graphSize = data.graph_size;
        }
        else {
            throw TypeError("invalid enum value " + data.graph_size + " for graph_size");
        }
        res.time = ObjectSerializer_1.ObjectSerializer.deserialize(data.time, "NotebookCellTime", "");
        return res;
    };
    NotebookLogStreamCellAttributes.serialize = function (data) {
        var attributeTypes = NotebookLogStreamCellAttributes.getAttributeTypeMap();
        var res = {};
        for (var _i = 0, _a = Object.entries(data); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            if (!(key in attributeTypes)) {
                throw new TypeError(key + " attribute not in schema");
            }
        }
        if (data.definition === undefined) {
            throw new TypeError("missing required attribute 'definition' on 'NotebookLogStreamCellAttributes' object");
        }
        res.definition = ObjectSerializer_1.ObjectSerializer.serialize(data.definition, "LogStreamWidgetDefinition", "");
        if (['xs', 's', 'm', 'l', 'xl', undefined].includes(data.graphSize)) {
            res.graph_size = data.graphSize;
        }
        else {
            throw TypeError("invalid enum value " + data.graphSize + " for graphSize");
        }
        res.time = ObjectSerializer_1.ObjectSerializer.serialize(data.time, "NotebookCellTime", "");
        return res;
    };
    NotebookLogStreamCellAttributes.discriminator = undefined;
    NotebookLogStreamCellAttributes.attributeTypeMap = {
        "definition": {
            "baseName": "definition",
            "type": "LogStreamWidgetDefinition",
            "format": ""
        },
        "graphSize": {
            "baseName": "graph_size",
            "type": "NotebookGraphSize",
            "format": ""
        },
        "time": {
            "baseName": "time",
            "type": "NotebookCellTime",
            "format": ""
        }
    };
    return NotebookLogStreamCellAttributes;
}());
exports.NotebookLogStreamCellAttributes = NotebookLogStreamCellAttributes;
//# sourceMappingURL=NotebookLogStreamCellAttributes.js.map